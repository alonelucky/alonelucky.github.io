{
    "version": "https://jsonfeed.org/version/1",
    "title": "小码农博客 • All posts by \"golang\" category",
    "description": null,
    "home_page_url": "http://qiubo.ink",
    "items": [
        {
            "id": "http://qiubo.ink/2019/06/27/Golang%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%8F%8A%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87/",
            "url": "http://qiubo.ink/2019/06/27/Golang%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%8F%8A%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87/",
            "title": "Golang单元测试及测试覆盖率",
            "date_published": "2019-06-27T09:21:24.000Z",
            "content_html": "<p>使用 Golang 内置库 <code>testing</code> 测试书写的代码,如有不足,请雅正.</p>\n<span id=\"more\"></span>\n<p>本文 go 版本 1.12.5, 在 <code>go mod</code> 下 当前项目名称 <code>goshop</code></p>\n<h3 id=\"1-书写代码\"><a href=\"#1-书写代码\" class=\"headerlink\" title=\"1. 书写代码\"></a>1. 书写代码</h3><ol>\n<li>自定义库代码 <code>goshop/app/lib</code> 下 utils.go  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CheckPhoneNumber 校验手机号</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CheckPhoneNumber</span><span class=\"params\">(phone <span class=\"type\">string</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 手机号长度11位</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> StringLength(phone) != <span class=\"number\">11</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  reg := regexp.MustCompile(<span class=\"string\">`^1[3,4,5,6,7,8,9]&#123;1&#125;[0-9]&#123;9&#125;$`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.MatchString(phone)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// StringLength 获取字符串长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringLength</span><span class=\"params\">(str <span class=\"type\">string</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> strings.Count(str, <span class=\"string\">&quot;&quot;</span>) - <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>测试代码 <code>goshop/app/lib</code> 下 utils_test.go  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestCheckPhoneNumber</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">type</span> suite <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    data   <span class=\"type\">string</span></span><br><span class=\"line\">    result <span class=\"type\">bool</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  phoneExample := []suite&#123;</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;12345678901&quot;</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;1020&quot;</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;19456782901&quot;</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> phoneExample &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> result := CheckPhoneNumber(v.data); result != v.result &#123;</span><br><span class=\"line\">      t.Errorf(<span class=\"string\">&quot;测试用例 %s : 测试结构 %t , 与期望不符合 %t&quot;</span>, v.data, result, v.result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStringLength</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">type</span> suite <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    data   <span class=\"type\">string</span></span><br><span class=\"line\">    result <span class=\"type\">int</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  strExample := []suite&#123;</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;1678&quot;</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;13456789301&quot;</span>, <span class=\"number\">11</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;abcd&quot;</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;hello world&quot;</span>, <span class=\"number\">11</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;我在这&quot;</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;你是谁?Who are you?&quot;</span>, <span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> strExample &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> result := StringLength(v.data); result != v.result &#123;</span><br><span class=\"line\">      t.Errorf(<span class=\"string\">&quot;测试用例 %s : 测试结构 %d , 与期望不符合 %d&quot;</span>, v.data, result, v.result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"2-查看覆盖率\"><a href=\"#2-查看覆盖率\" class=\"headerlink\" title=\"2. 查看覆盖率\"></a>2. 查看覆盖率</h3><blockquote>\n<p><code>go test</code> 常用命令解释<br> 用法 <code>go test [build/_test flags] [packages] [build/test flags &amp; test binary flags]</code><br> <code>go test [file.go / mod_dir | main_test.go]</code> &#x2F; <code>go test 文件名/包名(main_test.go)</code></p>\n</blockquote>\n<ol>\n<li><p>普通展示<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 普通测试,只展示测试结果及时间</span></span><br><span class=\"line\">➜  go test goshop/app/lib</span><br><span class=\"line\"><span class=\"comment\">// ok      goshop/app/lib  0.007s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 展示测试明细, 此时仍没有覆盖率</span></span><br><span class=\"line\">➜  go test goshop/app/lib -v</span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestCheckEmail</span></span><br><span class=\"line\"><span class=\"comment\">// --- PASS: TestCheckEmail (0.00s)</span></span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestStringLength</span></span><br><span class=\"line\"><span class=\"comment\">// --- PASS: TestStringLength (0.00s)</span></span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestCheckPhoneNumber</span></span><br><span class=\"line\"><span class=\"comment\">// --- PASS: TestCheckPhoneNumber (0.00s)</span></span><br><span class=\"line\"><span class=\"comment\">// PASS</span></span><br><span class=\"line\"><span class=\"comment\">// ok      goshop/app/lib  (cached)</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li><p>展示测试明细及覆盖率,<br>展示的是当前库的所有文件的覆盖率,<br>此时已经知道覆盖率了,<br>但是不知道测试到底覆盖的是哪部分代码,<br>哪部分没有覆盖<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ go test goshop/app/lib -v -covermode=count </span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestCheckEmail</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// PASS</span></span><br><span class=\"line\"><span class=\"comment\">// coverage: 19.2% of statements</span></span><br><span class=\"line\"><span class=\"comment\">// ok      goshop/app/lib  0.007s  coverage: 19.2% of statements</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li><p>展示测试覆盖率,并生成覆盖统计文件到 count.out,<br>count.out 文件中详细展示了每个文件测试时某一行,执行的次数及其他信息(暂时只能用到次数)</p>\n</li>\n</ol>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ go test goshop/app/lib -v -coverprofile=count.<span class=\"property\">out</span></span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestCheckEmail</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// PASS</span></span><br><span class=\"line\"><span class=\"comment\">// coverage: 19.2% of statements</span></span><br><span class=\"line\"><span class=\"comment\">// ok      goshop/app/lib  0.007s  coverage: 19.2% of statements</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"4\">\n<li>分析 count.out 文件生成想要的结果<br>-func 生成每个函数的覆盖率<br>-html 生成 html 文件,已图形形式展示每个函数,每一行代码的覆盖率<br>生成测试运行,函数覆盖率,展示每一个函数单元测试的覆盖率,100% 则测试完整,0 则没有测试<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ go tool cover -func=count.<span class=\"property\">out</span></span><br><span class=\"line\"><span class=\"comment\">// goshop/app/lib/jwt.go:31:       signHeader              0.0%</span></span><br><span class=\"line\"><span class=\"comment\">// ....</span></span><br><span class=\"line\"><span class=\"comment\">// goshop/app/lib/utils.go:11:     CheckEmail              100.0%</span></span><br><span class=\"line\"><span class=\"comment\">// goshop/app/lib/utils.go:21:     CheckPhoneNumber        100.0%</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// total:                          (statements)            19.2%</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<pre><code>`➜ go tool cover -html=count.out` 会打开默认浏览器,展示测试覆盖率的图形化,\n可以切换,当前库下每个文件,看到每一行代码是否测试执行,没有执行的显示为红色, 灰色是不需要测试的, 亮绿色是测试通过的\n![](go-tool-cover-html.png)\n</code></pre>\n",
            "tags": [
                "golang",
                "测试"
            ]
        },
        {
            "id": "http://qiubo.ink/2019/06/21/Golang%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/",
            "url": "http://qiubo.ink/2019/06/21/Golang%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/",
            "title": "Golang获取字符串长度",
            "date_published": "2019-06-21T17:28:41.000Z",
            "content_html": "<p>尝试通过实际使用逐步了解go源码及发现实用函数</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-builtin-中的-len-函数\"><a href=\"#1-builtin-中的-len-函数\" class=\"headerlink\" title=\"1. builtin 中的 len 函数\"></a>1. builtin 中的 len 函数</h2><p>builtin 包为Go的预声明标识符提供了文档。无需引包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length := len(&quot;hello world&quot;)</span><br><span class=\"line\">// 11</span><br><span class=\"line\">length = len(&quot;你好, world&quot;)</span><br><span class=\"line\">// 13</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>优点：无需引包，直接使用<br>缺点：中文占3个字节长度，非实际字符数</p>\n</blockquote>\n<h2 id=\"2-strings-Count-统计字符函数\"><a href=\"#2-strings-Count-统计字符函数\" class=\"headerlink\" title=\"2. strings.Count 统计字符函数\"></a>2. strings.Count 统计字符函数</h2><p>strings 是字符串相关操作的内置库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length := strings.Count(&quot;hello world&quot;,&quot;&quot;) -1 </span><br><span class=\"line\">// 11</span><br><span class=\"line\">length = strings.Count(&quot;你好，世界&quot;,&quot;&quot;) - 1</span><br><span class=\"line\">// 5</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>优点：中文字符识别<br>缺点：参数冗余，且底层另有实现函数, 见3</p>\n</blockquote>\n<h2 id=\"3-unicode-utf8-RuneCountInString-utf8字符统计\"><a href=\"#3-unicode-utf8-RuneCountInString-utf8字符统计\" class=\"headerlink\" title=\"3. unicode&#x2F;utf8.RuneCountInString utf8字符统计\"></a>3. unicode&#x2F;utf8.RuneCountInString utf8字符统计</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length := utf8.RuneCountInString(&quot;hello world&quot;)</span><br><span class=\"line\">// 11</span><br><span class=\"line\">length = utf8.RuneCountInString(&quot;你好，世界&quot;)</span><br><span class=\"line\">// 5</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>优点：官方utf8长度统计，无其他函数调用<br>缺点：貌似只有utf8字符集</p>\n</blockquote>\n",
            "tags": [
                "golang",
                "string"
            ]
        },
        {
            "id": "http://qiubo.ink/2019/03/19/Go%20module%E7%A7%81%E6%9C%8D/",
            "url": "http://qiubo.ink/2019/03/19/Go%20module%E7%A7%81%E6%9C%8D/",
            "title": "Go module 私服",
            "date_published": "2019-03-19T17:00:43.000Z",
            "content_html": "<p>golang 1.11.0 之后 <code>go</code> 提供 mod 内置包管理工具</p>\n<p>但是实际应用时，由于网络等原因造成请求部分网站托管模块时无法响应，导致无法使用，使用ss代理有时又会产生新的问题， 又或者由于依赖过多，致使go mod 网络处理时长过久等原因，于是便有了go mod 私服项目 <a href=\"https://github.com/gomods/athens\">Athens</a></p>\n<span id=\"more\"></span>\n\n<h4 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h4><p>golang 1.11.0 之后 <code>go</code> 提供 mod 内置包管理工具</p>\n<p>但是实际应用时，由于网络等原因造成请求部分网站托管模块时无法响应，导致无法使用，使用ss代理有时又会产生新的问题， 又或者由于依赖过多，致使go mod 网络处理时长过久等原因，于是便有了go mod 私服项目 <a href=\"https://github.com/gomods/athens\">Athens</a></p>\n<h4 id=\"2-服务部署\"><a href=\"#2-服务部署\" class=\"headerlink\" title=\"2. 服务部署\"></a>2. 服务部署</h4><ul>\n<li>拉取代码</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># progromeRoot</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/gomods/athens</span><br><span class=\"line\"><span class=\"built_in\">cd</span> athens/cmd/proxy</span><br><span class=\"line\">go install</span><br></pre></td></tr></table></figure>\n<ul>\n<li>检查安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$GOPATH</span>/bin/proxy version</span><br></pre></td></tr></table></figure>\n<ul>\n<li>部署 使用任何常用的进程守护工具均可，此处 pm2 实例</li>\n</ul>\n<h6 id=\"默认配置文件端口为3000-3001-有冲突修改配置文件\"><a href=\"#默认配置文件端口为3000-3001-有冲突修改配置文件\" class=\"headerlink\" title=\"默认配置文件端口为3000&#x2F;3001 有冲突修改配置文件\"></a>默认配置文件端口为3000&#x2F;3001 有冲突修改配置文件</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start ./proxy -- -config_file=progromeRoot/config.dev.toml</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(可选)配置nginx 代理</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单配置</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name your.domain.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:3000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-本地使用\"><a href=\"#3-本地使用\" class=\"headerlink\" title=\"3. 本地使用\"></a>3. 本地使用</h4><p>服务配置完成后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host: http://your.domain.com</span><br><span class=\"line\">port: 80</span><br></pre></td></tr></table></figure>\n<p>修改本地环境变量</p>\n<h6 id=\"go-mod-go-get-使用的代理\"><a href=\"#go-mod-go-get-使用的代理\" class=\"headerlink\" title=\"go mod &#x2F;go get 使用的代理\"></a>go mod &#x2F;go get 使用的代理</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GOPROXY=http://your.domian.com</span><br></pre></td></tr></table></figure>\n<h6 id=\"不需要使用代理的域名\"><a href=\"#不需要使用代理的域名\" class=\"headerlink\" title=\"不需要使用代理的域名\"></a>不需要使用代理的域名</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> NO_PROXY=github.com,<span class=\"variable\">$NO_PROXY</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-小结\"><a href=\"#4-小结\" class=\"headerlink\" title=\"4. 小结\"></a>4. 小结</h4><p>此文是go mod 私服配置简版，该项目支持模块缓存，默认是使用内存，有兴趣的可以自行研究配置</p>\n",
            "tags": [
                "golang",
                "mod",
                "module",
                "私服"
            ]
        }
    ]
}