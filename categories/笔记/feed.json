{
    "version": "https://jsonfeed.org/version/1",
    "title": "小码农博客 • All posts by \"笔记\" category",
    "description": null,
    "home_page_url": "http://qiubo.ink",
    "items": [
        {
            "id": "http://qiubo.ink/2023/09/05/%E4%BD%BF%E7%94%A8openresty%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E7%81%B0%E5%BA%A6%E5%88%87%E6%8D%A2/",
            "url": "http://qiubo.ink/2023/09/05/%E4%BD%BF%E7%94%A8openresty%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E7%81%B0%E5%BA%A6%E5%88%87%E6%8D%A2/",
            "title": "使用openresty实现简单的灰度切换",
            "date_published": "2023-09-05T09:24:33.000Z",
            "content_html": "<p>通过了解 <code>C10K</code> 了解到了 <a href=\"https://openresty.org/\">openresty</a>。OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p>\n<span id=\"more\"></span>\n\n<p>底层使用了 <code>openresty</code> 的动态网关应用有 <a href=\"https://apisix.apache.org/\"><code>apisix</code></a> <a href=\"https://konghq.com/\"><code>Kong</code></a> 等知名网关服务。<br>本文就是在 <code>openresty</code> 的基础上实现简版的动态流量切换，达到灰度流量切换的目的。</p>\n<p><img src=\"/images/2023-09-05/01.png\"></p>\n<h3 id=\"运行原理\"><a href=\"#运行原理\" class=\"headerlink\" title=\"运行原理\"></a>运行原理</h3><ul>\n<li>openresty 执行过程，基础学习参照文章尾部 <code>OpenResty 最佳实践</code><br><img src=\"/images/2023-09-05/02.webp\"></li>\n</ul>\n<p>当HTTP请求进入时，判断请求信息(请求头或者请求URL参数)，如果符合灰度条件，则转发流量到灰度服务。</p>\n<h3 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h3><p>两个不同端口的后端服务，本文使用 nodejs 环境运行后端服务，代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"title class_\">Number</span>(process.<span class=\"property\">argv</span>[<span class=\"number\">2</span>]) || <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(port);</span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">write</span>(<span class=\"title class_\">String</span>(port));</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(port);</span><br></pre></td></tr></table></figure>\n\n<p>openresty conf 配置如下:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"section\">upstream</span> test.switch &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> localhost:<span class=\"number\">12345</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> localhost:<span class=\"number\">12346</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"section\">upstream</span> grey.test.switch &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> localhost:<span class=\"number\">12347</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">1280</span>;</span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://test.switch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时是使用反向代理的常规配置，命中的均为上游测试服务。</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><h4 id=\"基于本地文件的灰度识别\"><a href=\"#基于本地文件的灰度识别\" class=\"headerlink\" title=\"基于本地文件的灰度识别\"></a>基于本地文件的灰度识别</h4><p>lua 脚本</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> cjosn = <span class=\"built_in\">require</span> <span class=\"string\">&#x27;cjson&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">-- 获取请求头</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> headers = ngx.req.get_headers()</span><br><span class=\"line\"><span class=\"keyword\">local</span> key = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> headers ~= <span class=\"literal\">nil</span> <span class=\"keyword\">and</span> headers[<span class=\"string\">&quot;user-id&quot;</span>] ~= <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> </span><br><span class=\"line\">  <span class=\"comment\">-- 整理请求key</span></span><br><span class=\"line\">  key = <span class=\"string\">&quot;grey_key_prefix:&quot;</span>..headers[<span class=\"string\">&quot;user-id&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 灰度控制</span></span><br><span class=\"line\">ngx.header[<span class=\"string\">&quot;x-response-switch&quot;</span>] = <span class=\"string\">&quot;origin&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> v, ok = ngx.shared[<span class=\"string\">&quot;grey_host_dict&quot;</span>]:get(key)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> v <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"comment\">-- base_upstream 是外部配置的变量，正常服务</span></span><br><span class=\"line\">  ngx.var.switch_upstream = ngx.var.base_upstream</span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">  <span class=\"comment\">-- grey_upstream 是外部配置的变量，灰度服务</span></span><br><span class=\"line\">  ngx.header[<span class=\"string\">&quot;x-response-switch&quot;</span>] = <span class=\"string\">&quot;grey&quot;</span></span><br><span class=\"line\">  ngx.var.switch_upstream = ngx.var.grey_upstream</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 重载灰度配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ngx.var.document_uri == <span class=\"string\">&quot;/reload_grey_file&quot;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> fd = <span class=\"built_in\">io</span>.<span class=\"built_in\">open</span>(ngx.var.grey_file, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> s = fd:<span class=\"built_in\">read</span>(<span class=\"string\">&quot;*a&quot;</span>)</span><br><span class=\"line\">    fd:<span class=\"built_in\">close</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 输出load file 的内容</span></span><br><span class=\"line\">    ngx.<span class=\"built_in\">print</span>(<span class=\"string\">&quot;load json: &quot;</span>)</span><br><span class=\"line\">    ngx.say(s)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> json = cjosn:new()</span><br><span class=\"line\">    <span class=\"keyword\">local</span> tb = json.decode(s)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tb) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"comment\">-- 输出实际加入的灰度信息</span></span><br><span class=\"line\">        ngx.say(<span class=\"string\">&quot;kv: &quot;</span>..k..<span class=\"string\">&quot; =&gt; &quot;</span>..v)</span><br><span class=\"line\">        ngx.shared[<span class=\"string\">&quot;grey_host_dict&quot;</span>]:safe_set(k, v)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    ngx.<span class=\"built_in\">exit</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>openresty 配置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"attribute\">lua_shared_dict</span> grey_mem <span class=\"number\">1m</span>; <span class=\"comment\"># 配置灰度信息跨 worker 共享内存块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 配置基础变量</span></span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$base_upstream</span> <span class=\"string\">&quot;grey.test.switch&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$grey_upstream</span> <span class=\"string\">&quot;test.switch&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$grey_host_dict</span> <span class=\"string\">&quot;grey_mem2&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$grey_file</span> <span class=\"string\">&quot;/usr/local/openresty/custom/grey/config.json&quot;</span>; <span class=\"comment\"># &#123;&quot;grey_key_prefix:1&quot;: &quot;1&quot;&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">1280</span>;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 配置切换上下游变量便于切换流量</span></span><br><span class=\"line\">    <span class=\"attribute\">set</span> <span class=\"variable\">$switch_upstream</span> <span class=\"variable\">$switch_upstream</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://<span class=\"variable\">$switch_upstream</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>这样就达到了如开篇图的效果。</p>\n<h4 id=\"基于-redis-的灰度识别\"><a href=\"#基于-redis-的灰度识别\" class=\"headerlink\" title=\"基于 redis 的灰度识别\"></a>基于 redis 的灰度识别</h4><p>但是，基于文件的灰度配置不便，因此可以利用 openresty 提供的各种后端存储库实现方便的配置，如：<code>ngx_postgres</code> <code>ngx_redis2</code> <code>ngx_redis</code> 等模块， <code>lua-resty-memcached</code> <code>lua-resty-mysql</code> <code>lua-resty-redis</code> 等库。</p>\n<p>模块的简单使用如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"section\">upstream</span> redis_backend &#123;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:6379</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">keepalive</span> <span class=\"number\">16</span>; <span class=\"comment\"># redis持久化连接</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"section\">location</span> = /redis &#123;</span><br><span class=\"line\">    internal; <span class=\"comment\"># 标记为内部服务，外部无法请求到该路由</span></span><br><span class=\"line\">    <span class=\"attribute\">set_unescape_uri</span> <span class=\"variable\">$query</span> <span class=\"variable\">$arg_query</span>; <span class=\"comment\"># 处理请求参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">redis2_raw_query</span> <span class=\"variable\">$query</span>; <span class=\"comment\"># 传递给redis后端处理原始 redis 请求</span></span><br><span class=\"line\">    <span class=\"attribute\">redis2_pass</span> redis_backend;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>修改lua代码:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 获取请求头</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ngx.req.is_internal <span class=\"keyword\">then</span> </span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> parser = <span class=\"built_in\">require</span> <span class=\"string\">&quot;redis.parser&quot;</span> <span class=\"comment\">-- 引入基础库，解析redis响应</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> headers = ngx.req.get_headers()</span><br><span class=\"line\"><span class=\"keyword\">local</span> key = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> headers ~= <span class=\"literal\">nil</span> <span class=\"keyword\">and</span> headers[<span class=\"string\">&quot;user-id&quot;</span>] ~= <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> </span><br><span class=\"line\">  <span class=\"comment\">-- 整理请求key</span></span><br><span class=\"line\">  key = <span class=\"string\">&quot;grey_key_prefix:&quot;</span>..headers[<span class=\"string\">&quot;user-id&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hmget</span><span class=\"params\">(dict, key)</span></span></span><br><span class=\"line\">    <span class=\"comment\">-- 构造内部请求</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> res = ngx.location.capture(<span class=\"string\">&quot;/redis?query=hmget &quot;</span> .. dict .. <span class=\"string\">&quot; &quot;</span>.. key ..<span class=\"string\">&quot;\\r\\n&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> replies = parser.parse_replies(res.body, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\">-- 解析响应结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, reply <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(replies) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> reply[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 灰度控制</span></span><br><span class=\"line\">ngx.header[<span class=\"string\">&quot;x-response-switch&quot;</span>] = <span class=\"string\">&quot;origin&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> v, ok = hmget(<span class=\"string\">&quot;grey_host_dict&quot;</span>, key)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> v <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"comment\">-- base_upstream 是外部配置的变量，正常服务</span></span><br><span class=\"line\">  ngx.var.switch_upstream = ngx.var.base_upstream</span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">  <span class=\"comment\">-- grey_upstream 是外部配置的变量，灰度服务</span></span><br><span class=\"line\">  ngx.header[<span class=\"string\">&quot;x-response-switch&quot;</span>] = <span class=\"string\">&quot;grey&quot;</span></span><br><span class=\"line\">  ngx.var.switch_upstream = ngx.var.grey_upstream</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>如此就完成了轻量级的灰度流量自动切换。<br>Openresty还可以实现更加复杂的流量控制，可以直接使用成熟的网关框架；如果服务较小也可以直接基于 openresty 做一些简单的任务。</p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ol>\n<li>OpenResty 官网 <code>https://openresty.org/cn/</code></li>\n<li>OpenResty 最佳实践 <code>https://moonbingbing.gitbooks.io/openresty-best-practices/content/</code></li>\n<li>OpenResty 开源组件 <code>https://github.com/search?q=openresty&amp;type=repositories</code></li>\n</ol>\n",
            "tags": [
                "openresty",
                "nginx",
                "lua"
            ]
        },
        {
            "id": "http://qiubo.ink/2020/12/25/redis%E9%98%B2%E6%AD%A2%E8%B6%85%E5%94%AE/",
            "url": "http://qiubo.ink/2020/12/25/redis%E9%98%B2%E6%AD%A2%E8%B6%85%E5%94%AE/",
            "title": "redis防止超售",
            "date_published": "2020-12-25T11:50:23.000Z",
            "content_html": "<p>redis在应用中越来越广泛, 其中常用的大部分操作都是非原子性的, 例如<code>set</code>&#x2F;<code>get</code>&#x2F;<code>hmset</code>…这些会在多个操作时后边的覆写前边的</p>\n<span id=\"more\"></span>\n<h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h3><p>redis在应用中越来越广泛, 其中常用的大部分操作都是非原子性的, 例如<code>set</code>&#x2F;<code>get</code>&#x2F;<code>hmset</code>…这些会在多个操作时后边的覆写前边的, 例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">请求A--&gt;数据库C</span><br><span class=\"line\">更多... --&gt;数据库C</span><br><span class=\"line\">请求B--&gt;数据库C</span><br></pre></td></tr></table></figure>\n<p>请求前后先后进入, 几乎同时抵达数据库, 当<code>A</code>检查时没有请求, <code>B</code>先后到达,也检查到没有请求, 此时向<code>redis</code>写入当前请求信息, A写入,B也写入了, 且会被后写入的覆盖, 无提示, 此时便达不到限制的目的, 而且如果秒杀场景下请求大的情况下, 一下进入的可能销售远远超过库存的数量. </p>\n<p>此时就需要使用redis的原子性操作, 同时只能一个读写, 写入&#x2F;读取有失败提示.<br><code>setnx</code>&#x2F;<code>getset</code></p>\n<blockquote>\n<ul>\n<li><code>setnx Key Value</code> 设置一个键值, 如果同时写入只有一个会成功返回 1, 其余失败返回 0, 满足了并发加锁限制,</li>\n<li><code>getset Key NewValue</code> 获取并设置一个值, 成功会返回当前设置的值,</li>\n</ul>\n</blockquote>\n<p><strong>如果锁已超时，那么锁可能已由其他进程获得，这时直接执行 <code>del Key</code> 操作会导致把其他进程已获得 的锁释放掉</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数封装</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">lockRequest</span>(<span class=\"params\">lockKey</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 加锁, 默认无锁</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 进入加锁, 如果失败循环判断</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> resdis.<span class=\"title function_\">setnx</span>(lockKey, <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() + <span class=\"number\">100</span>&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 1. 加锁是否成功</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> time = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">get</span>(lockKey);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 加锁失败, 检测锁值时间是否小于当前时间,</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> timeout = time - <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 如果小于当前时间, 证明有进程超时, 直接绕过,不等待</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> time = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() + <span class=\"number\">100</span>&#125;</span>&#125;`</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 增加新值并返回旧值, 原子操作, </span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> t = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">getset</span>(lockKey, time);</span><br><span class=\"line\">            <span class=\"comment\">// 3. 如果有值在我们之前操作, 则返回的是前值, 不等于当前值, 继续等待</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() &gt; t) &#123;</span><br><span class=\"line\">                result = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不浪费资源,超时之后再操作, setTimeout实现的会有ms级误差</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"title function_\">sleep</span>(timeout);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span>(!result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h3><p>使用原子增减操作 <code>incrby/decrby</code> , 下单时对数据进行增减, 优势无超长时间等待</p>\n<p>如下: 简略代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Redis</span> =  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ioredis&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> redis = <span class=\"keyword\">new</span> <span class=\"title class_\">Redis</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = <span class=\"string\">&#x27;test:count&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count  = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (req.<span class=\"property\">url</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span>  <span class=\"string\">&#x27;/count&#x27;</span>:</span><br><span class=\"line\">            <span class=\"comment\">// 查询redis库存剩余 =&gt; 实际查询数据库库存剩余即可</span></span><br><span class=\"line\">            count = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">get</span>(key);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/set_count&#x27;</span>:</span><br><span class=\"line\">            <span class=\"comment\">// 设置库存数</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> redis.<span class=\"title function_\">set</span>(key, <span class=\"number\">10</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"attr\">default</span>: <span class=\"comment\">// 抢购逻辑</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> stock = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">get</span>(key);</span><br><span class=\"line\">            <span class=\"comment\">// 1. 查询当前库存, 如果有再进行</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stock &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                res.<span class=\"property\">statusCode</span>  = <span class=\"number\">500</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 模拟下单数量不同</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> num = <span class=\"built_in\">parseInt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">3</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 2. 原子减库存, 如果原子减后小于0, 则返还减量</span></span><br><span class=\"line\">            count = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">decrby</span>(key, num);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2.1 返还库存</span></span><br><span class=\"line\">                <span class=\"keyword\">await</span> redis.<span class=\"title function_\">incrby</span>(key, num);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 可以购买</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;库存: %d, 购买: %d&#x27;</span>, stock, num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>此案例使用 <code>单机redis</code> &#x2F; <code>pm2 start app.js -i 4</code> &#x2F; <code>ab -c 10 -n 100</code> 多进程进行&#x2F;多请求模拟操作. </p>\n<p>示例如下:</p>\n<ol>\n<li>多进程启动<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; pm2 start app.js -i 4</span><br></pre></td></tr></table></figure></li>\n<li><code>ab</code> 工具模拟请求<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; ab -c 10 -n 100 http://127.0.0.1:3000/buy</span><br><span class=\"line\">This is ApacheBench, Version 2.3 &lt;<span class=\"variable\">$Revision</span>: 1843412 $&gt;</span><br><span class=\"line\">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class=\"line\">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class=\"line\"></span><br><span class=\"line\">Benchmarking 127.0.0.1 (be patient).....<span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">Server Software:        </span><br><span class=\"line\">Server Hostname:        127.0.0.1</span><br><span class=\"line\">Server Port:            3000</span><br><span class=\"line\"></span><br><span class=\"line\">Document Path:          /buy/</span><br><span class=\"line\">Document Length:        0 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Concurrency Level:      10</span><br><span class=\"line\">Time taken <span class=\"keyword\">for</span> tests:   0.031 seconds</span><br><span class=\"line\">Complete requests:      100</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Non-2xx responses:      94</span><br><span class=\"line\">Total transferred:      9286 bytes</span><br><span class=\"line\">HTML transferred:       0 bytes</span><br><span class=\"line\">Requests per second:    3180.16 [<span class=\"comment\">#/sec] (mean)</span></span><br><span class=\"line\">Time per request:       3.144 [ms] (mean)</span><br><span class=\"line\">Time per request:       0.314 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          288.39 [Kbytes/sec] received</span><br><span class=\"line\"></span><br><span class=\"line\">Connection Times (ms)</span><br><span class=\"line\">              min  mean[+/-sd] median   max</span><br><span class=\"line\">Connect:        0    0   0.2      0       1</span><br><span class=\"line\">Processing:     1    2   1.4      2       8</span><br><span class=\"line\">Waiting:        1    2   1.2      1       6</span><br><span class=\"line\">Total:          1    3   1.4      2       8</span><br><span class=\"line\"></span><br><span class=\"line\">Percentage of the requests served within a certain time (ms)</span><br><span class=\"line\">  50%      2</span><br><span class=\"line\">  66%      2</span><br><span class=\"line\">  75%      3</span><br><span class=\"line\">  80%      3</span><br><span class=\"line\">  90%      5</span><br><span class=\"line\">  95%      6</span><br><span class=\"line\">  98%      8</span><br><span class=\"line\">  99%      8</span><br><span class=\"line\"> 100%      8 (longest request)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><code>pm2 log app</code> 日志打印<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; pm2 <span class=\"built_in\">log</span> app</span><br><span class=\"line\">...</span><br><span class=\"line\">2|app  | 库存: 10, 购买: 3</span><br><span class=\"line\">2|app  | 库存: 7, 购买: 3</span><br><span class=\"line\">0|app  | 库存: 7, 购买: 1</span><br><span class=\"line\">0|app  | 库存: 7, 购买: 1</span><br><span class=\"line\">0|app  | 库存: 7, 购买: 2</span><br></pre></td></tr></table></figure>\n通过日志打印可以看出, 库存为7的时候, 有4个请求进入, 并且下单成功, 之后便没有了, 保证了库存安全</li>\n<li>查看剩余库存<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; curl http://localhost:3000/count</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "nodejs",
                "redis",
                "并发"
            ]
        },
        {
            "id": "http://qiubo.ink/2020/03/26/docker%E5%85%8D%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE/",
            "url": "http://qiubo.ink/2020/03/26/docker%E5%85%8D%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE/",
            "title": "docker免删除容器修改配置",
            "date_published": "2020-03-26T21:28:24.000Z",
            "content_html": "<p>适用于小服务, 原理是暂停docker服务来修改容器配置,然后启动</p>\n<span id=\"more\"></span>\n<h3 id=\"起因docker部署mysql时端口配置错误\"><a href=\"#起因docker部署mysql时端口配置错误\" class=\"headerlink\" title=\"起因docker部署mysql时端口配置错误\"></a>起因docker部署mysql时端口配置错误</h3><p>3307 -&gt; 3307</p>\n<h3 id=\"知道可以删除运行中的docker容器-然后重启\"><a href=\"#知道可以删除运行中的docker容器-然后重启\" class=\"headerlink\" title=\"知道可以删除运行中的docker容器,然后重启\"></a>知道可以删除运行中的docker容器,然后重启</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop mysql_name &amp;&amp; docker <span class=\"built_in\">rm</span> mysql_name</span><br></pre></td></tr></table></figure>\n<h3 id=\"增加一种方式-暂停docker服务-修改hostconfig-json文件-再启动\"><a href=\"#增加一种方式-暂停docker服务-修改hostconfig-json文件-再启动\" class=\"headerlink\" title=\"增加一种方式, 暂停docker服务, 修改hostconfig.json文件,再启动\"></a>增加一种方式, 暂停docker服务, 修改hostconfig.json文件,再启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 暂停服务</span></span><br><span class=\"line\">service docker stop</span><br><span class=\"line\"><span class=\"comment\"># 修改hostcaonfig.json</span></span><br><span class=\"line\">vim /var/lib/docker/containers/[cont_hash_code]/hostconfig.json</span><br><span class=\"line\"><span class=\"comment\"># 修改对应配置,保存,启动docker</span></span><br><span class=\"line\">service docker start</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "测试",
                "docker"
            ]
        },
        {
            "id": "http://qiubo.ink/2019/06/27/Golang%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%8F%8A%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87/",
            "url": "http://qiubo.ink/2019/06/27/Golang%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%8F%8A%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87/",
            "title": "Golang单元测试及测试覆盖率",
            "date_published": "2019-06-27T09:21:24.000Z",
            "content_html": "<p>使用 Golang 内置库 <code>testing</code> 测试书写的代码,如有不足,请雅正.</p>\n<span id=\"more\"></span>\n<p>本文 go 版本 1.12.5, 在 <code>go mod</code> 下 当前项目名称 <code>goshop</code></p>\n<h3 id=\"1-书写代码\"><a href=\"#1-书写代码\" class=\"headerlink\" title=\"1. 书写代码\"></a>1. 书写代码</h3><ol>\n<li>自定义库代码 <code>goshop/app/lib</code> 下 utils.go  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CheckPhoneNumber 校验手机号</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CheckPhoneNumber</span><span class=\"params\">(phone <span class=\"type\">string</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 手机号长度11位</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> StringLength(phone) != <span class=\"number\">11</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  reg := regexp.MustCompile(<span class=\"string\">`^1[3,4,5,6,7,8,9]&#123;1&#125;[0-9]&#123;9&#125;$`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.MatchString(phone)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// StringLength 获取字符串长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringLength</span><span class=\"params\">(str <span class=\"type\">string</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> strings.Count(str, <span class=\"string\">&quot;&quot;</span>) - <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>测试代码 <code>goshop/app/lib</code> 下 utils_test.go  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestCheckPhoneNumber</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">type</span> suite <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    data   <span class=\"type\">string</span></span><br><span class=\"line\">    result <span class=\"type\">bool</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  phoneExample := []suite&#123;</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;12345678901&quot;</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;1020&quot;</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;19456782901&quot;</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> phoneExample &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> result := CheckPhoneNumber(v.data); result != v.result &#123;</span><br><span class=\"line\">      t.Errorf(<span class=\"string\">&quot;测试用例 %s : 测试结构 %t , 与期望不符合 %t&quot;</span>, v.data, result, v.result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStringLength</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">type</span> suite <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    data   <span class=\"type\">string</span></span><br><span class=\"line\">    result <span class=\"type\">int</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  strExample := []suite&#123;</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;1678&quot;</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;13456789301&quot;</span>, <span class=\"number\">11</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;abcd&quot;</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;hello world&quot;</span>, <span class=\"number\">11</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;我在这&quot;</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;你是谁?Who are you?&quot;</span>, <span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> strExample &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> result := StringLength(v.data); result != v.result &#123;</span><br><span class=\"line\">      t.Errorf(<span class=\"string\">&quot;测试用例 %s : 测试结构 %d , 与期望不符合 %d&quot;</span>, v.data, result, v.result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"2-查看覆盖率\"><a href=\"#2-查看覆盖率\" class=\"headerlink\" title=\"2. 查看覆盖率\"></a>2. 查看覆盖率</h3><blockquote>\n<p><code>go test</code> 常用命令解释<br> 用法 <code>go test [build/_test flags] [packages] [build/test flags &amp; test binary flags]</code><br> <code>go test [file.go / mod_dir | main_test.go]</code> &#x2F; <code>go test 文件名/包名(main_test.go)</code></p>\n</blockquote>\n<ol>\n<li><p>普通展示<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 普通测试,只展示测试结果及时间</span></span><br><span class=\"line\">➜  go test goshop/app/lib</span><br><span class=\"line\"><span class=\"comment\">// ok      goshop/app/lib  0.007s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 展示测试明细, 此时仍没有覆盖率</span></span><br><span class=\"line\">➜  go test goshop/app/lib -v</span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestCheckEmail</span></span><br><span class=\"line\"><span class=\"comment\">// --- PASS: TestCheckEmail (0.00s)</span></span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestStringLength</span></span><br><span class=\"line\"><span class=\"comment\">// --- PASS: TestStringLength (0.00s)</span></span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestCheckPhoneNumber</span></span><br><span class=\"line\"><span class=\"comment\">// --- PASS: TestCheckPhoneNumber (0.00s)</span></span><br><span class=\"line\"><span class=\"comment\">// PASS</span></span><br><span class=\"line\"><span class=\"comment\">// ok      goshop/app/lib  (cached)</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li><p>展示测试明细及覆盖率,<br>展示的是当前库的所有文件的覆盖率,<br>此时已经知道覆盖率了,<br>但是不知道测试到底覆盖的是哪部分代码,<br>哪部分没有覆盖<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ go test goshop/app/lib -v -covermode=count </span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestCheckEmail</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// PASS</span></span><br><span class=\"line\"><span class=\"comment\">// coverage: 19.2% of statements</span></span><br><span class=\"line\"><span class=\"comment\">// ok      goshop/app/lib  0.007s  coverage: 19.2% of statements</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li><p>展示测试覆盖率,并生成覆盖统计文件到 count.out,<br>count.out 文件中详细展示了每个文件测试时某一行,执行的次数及其他信息(暂时只能用到次数)</p>\n</li>\n</ol>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ go test goshop/app/lib -v -coverprofile=count.<span class=\"property\">out</span></span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestCheckEmail</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// PASS</span></span><br><span class=\"line\"><span class=\"comment\">// coverage: 19.2% of statements</span></span><br><span class=\"line\"><span class=\"comment\">// ok      goshop/app/lib  0.007s  coverage: 19.2% of statements</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"4\">\n<li>分析 count.out 文件生成想要的结果<br>-func 生成每个函数的覆盖率<br>-html 生成 html 文件,已图形形式展示每个函数,每一行代码的覆盖率<br>生成测试运行,函数覆盖率,展示每一个函数单元测试的覆盖率,100% 则测试完整,0 则没有测试<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ go tool cover -func=count.<span class=\"property\">out</span></span><br><span class=\"line\"><span class=\"comment\">// goshop/app/lib/jwt.go:31:       signHeader              0.0%</span></span><br><span class=\"line\"><span class=\"comment\">// ....</span></span><br><span class=\"line\"><span class=\"comment\">// goshop/app/lib/utils.go:11:     CheckEmail              100.0%</span></span><br><span class=\"line\"><span class=\"comment\">// goshop/app/lib/utils.go:21:     CheckPhoneNumber        100.0%</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// total:                          (statements)            19.2%</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<pre><code>`➜ go tool cover -html=count.out` 会打开默认浏览器,展示测试覆盖率的图形化,\n可以切换,当前库下每个文件,看到每一行代码是否测试执行,没有执行的显示为红色, 灰色是不需要测试的, 亮绿色是测试通过的\n![](go-tool-cover-html.png)\n</code></pre>\n",
            "tags": [
                "golang",
                "测试"
            ]
        },
        {
            "id": "http://qiubo.ink/2019/06/21/Golang%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/",
            "url": "http://qiubo.ink/2019/06/21/Golang%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/",
            "title": "Golang获取字符串长度",
            "date_published": "2019-06-21T17:28:41.000Z",
            "content_html": "<p>尝试通过实际使用逐步了解go源码及发现实用函数</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-builtin-中的-len-函数\"><a href=\"#1-builtin-中的-len-函数\" class=\"headerlink\" title=\"1. builtin 中的 len 函数\"></a>1. builtin 中的 len 函数</h2><p>builtin 包为Go的预声明标识符提供了文档。无需引包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length := len(&quot;hello world&quot;)</span><br><span class=\"line\">// 11</span><br><span class=\"line\">length = len(&quot;你好, world&quot;)</span><br><span class=\"line\">// 13</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>优点：无需引包，直接使用<br>缺点：中文占3个字节长度，非实际字符数</p>\n</blockquote>\n<h2 id=\"2-strings-Count-统计字符函数\"><a href=\"#2-strings-Count-统计字符函数\" class=\"headerlink\" title=\"2. strings.Count 统计字符函数\"></a>2. strings.Count 统计字符函数</h2><p>strings 是字符串相关操作的内置库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length := strings.Count(&quot;hello world&quot;,&quot;&quot;) -1 </span><br><span class=\"line\">// 11</span><br><span class=\"line\">length = strings.Count(&quot;你好，世界&quot;,&quot;&quot;) - 1</span><br><span class=\"line\">// 5</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>优点：中文字符识别<br>缺点：参数冗余，且底层另有实现函数, 见3</p>\n</blockquote>\n<h2 id=\"3-unicode-utf8-RuneCountInString-utf8字符统计\"><a href=\"#3-unicode-utf8-RuneCountInString-utf8字符统计\" class=\"headerlink\" title=\"3. unicode&#x2F;utf8.RuneCountInString utf8字符统计\"></a>3. unicode&#x2F;utf8.RuneCountInString utf8字符统计</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length := utf8.RuneCountInString(&quot;hello world&quot;)</span><br><span class=\"line\">// 11</span><br><span class=\"line\">length = utf8.RuneCountInString(&quot;你好，世界&quot;)</span><br><span class=\"line\">// 5</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>优点：官方utf8长度统计，无其他函数调用<br>缺点：貌似只有utf8字符集</p>\n</blockquote>\n",
            "tags": [
                "golang",
                "string"
            ]
        },
        {
            "id": "http://qiubo.ink/2018/09/25/Linux%E6%89%8B%E5%8A%A8%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98/",
            "url": "http://qiubo.ink/2018/09/25/Linux%E6%89%8B%E5%8A%A8%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98/",
            "title": "Linux手动释放内存",
            "date_published": "2018-09-25T14:09:08.000Z",
            "content_html": "<p>正常情况linux 下是不需要手动内存释放的,但是使用图形界面的时候部分程序的确占用较大内存，但又需要释放的时候就需要用到手动释放了．</p>\n<h3 id=\"1-查看内存\"><a href=\"#1-查看内存\" class=\"headerlink\" title=\"1. 查看内存\"></a>1. 查看内存</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/sys/vm/drop_caches</span><br><span class=\"line\"><span class=\"comment\"># 0</span></span><br><span class=\"line\"><span class=\"comment\"># 0 – 不释放</span></span><br><span class=\"line\"><span class=\"comment\"># 1 – 释放页缓存</span></span><br><span class=\"line\"><span class=\"comment\"># 2 – 释放dentries和inodes</span></span><br><span class=\"line\"><span class=\"comment\"># 3 – 释放所有缓存</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sync</span></span><br><span class=\"line\"><span class=\"comment\"># sync 命令运行 sync 子例程。如果必须停止系统，则运行 sync 命令以确保文件系统的完整性。</span></span><br><span class=\"line\"></span><br><span class=\"line\">$&gt; free -m </span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\"> Mem:           7929        5876         502         128        1549        1649</span><br><span class=\"line\"> Swap:             0           0           0</span><br><span class=\"line\"><span class=\"comment\"># total——总物理内存</span></span><br><span class=\"line\"><span class=\"comment\"># used——已使用内存，一般情况这个值会比较大，因为这个值包括了cache+应用程序使用的内存</span></span><br><span class=\"line\"><span class=\"comment\"># free——完全未被使用的内存</span></span><br><span class=\"line\"><span class=\"comment\"># shared——应用程序共享内存</span></span><br><span class=\"line\"><span class=\"comment\"># buffers——缓存，主要用于目录方面,inode值等（ls大目录可看到这个值增加）</span></span><br><span class=\"line\"><span class=\"comment\"># cached——缓存，用于已打开的文件</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-释放内存\"><a href=\"#2-释放内存\" class=\"headerlink\" title=\"2. 释放内存\"></a>2. 释放内存</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\">#              total        used        free      shared  buff/cache   available</span></span><br><span class=\"line\"><span class=\"comment\"># Mem:           7929        5902        1375         129         650        1628</span></span><br><span class=\"line\"><span class=\"comment\"># Swap:             0           0           0</span></span><br></pre></td></tr></table></figure>\n<p>内存已经释放掉了</p>\n",
            "tags": [
                "linux",
                "内存"
            ]
        },
        {
            "id": "http://qiubo.ink/2018/09/14/nodejs%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80%E7%9A%84jwt/",
            "url": "http://qiubo.ink/2018/09/14/nodejs%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80%E7%9A%84jwt/",
            "title": "nodejs实现基础的jwt",
            "date_published": "2018-09-14T11:57:03.000Z",
            "content_html": "<p>手动实现 <code>JSON Web Token</code> 了解 token 验证基本原理</p>\n<span id=\"more\"></span>\n<p>使用模块,nodejs原生模块<br>Crypto</p>\n<h3 id=\"1-实现机制\"><a href=\"#1-实现机制\" class=\"headerlink\" title=\"1. 实现机制\"></a>1. 实现机制</h3><p>JSON Web Token 由三部分组成，头部（Header）、载荷（Payload）与签名（Signature），并由 <code>.</code> 英文点拼接。</p>\n<h6 id=\"1-Header\"><a href=\"#1-Header\" class=\"headerlink\" title=\"1. Header\"></a>1. Header</h6><p>生成jwt头部,声明其类型以及签名所用的算法等的JSON格式,并将其进行base64转码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let jwtHeader = &#123;</span><br><span class=\"line\">    typ:&#x27;JWT&#x27;,</span><br><span class=\"line\">    alg:&#x27;SHA256&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jwtHeader = Buffer.from(JSON.stringify(jwtHeader)).toString(&#x27;base64&#x27;);</span><br><span class=\"line\">// base64</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-Payload\"><a href=\"#2-Payload\" class=\"headerlink\" title=\"2. Payload\"></a>2. Payload</h6><p>生成jwt载荷部分,并将其进行base64转码</p>\n<ul>\n<li><p>iss: 该JWT的签发者，是否使用是可选的；</p>\n</li>\n<li><p>sub: 该JWT所面向的用户，是否使用是可选的；</p>\n</li>\n<li><p>aud: 接收该JWT的一方，是否使用是可选的；</p>\n</li>\n<li><p>exp(expires): 什么时候过期，这里是一个Unix时间戳，是否使用是可选的；</p>\n</li>\n<li><p>iat(issued at): 在什么时候签发的(UNIX时间)，是否使用是可选的；</p>\n</li>\n<li><p>nbf (Not Before)：如果当前时间在nbf里的时间之前，则Token不被接受；一般都会留一些余地，比如几分钟；，是否使用是可选的；</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let jwtPayload = &#123;</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        userId: 123456</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    exp: &#x27;2018-08-01&#x27;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jwtPayload = Buffer.from(JSON.stringify(jwtPayload)).toString(&#x27;base64&#x27;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-Signature\"><a href=\"#3-Signature\" class=\"headerlink\" title=\"3. Signature\"></a>3. Signature</h6><p>将上面的两个编码后的字符串都用句号.连接在一起（头部在前）,并使用sha256及secret对其进行签名处理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const crypto = require(&#x27;crypto&#x27;);</span><br><span class=\"line\">let jwtStr = jwtHeader + &#x27;.&#x27; + jwtPayload;</span><br><span class=\"line\">let jwtSignature = crypto.createHmac(&#x27;sha256&#x27;,&#x27;my secret&#x27;).update(jwtStr).digest(&#x27;base64&#x27;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-jwt\"><a href=\"#4-jwt\" class=\"headerlink\" title=\"4. jwt\"></a>4. jwt</h6><p>将三个部分连接即组成了完整的jwt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let jwtToken = jwtHeader + &#x27;.&#x27; + jwtPayload + &#x27;.&#x27; + jwtSignature;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-jwt解析\"><a href=\"#2-jwt解析\" class=\"headerlink\" title=\"2. jwt解析\"></a>2. jwt解析</h3><p>处理生成 <code>jwt</code> 是需要使用的，生成如上，解析自然也就比较简单</p>\n<h6 id=\"1-校验签名\"><a href=\"#1-校验签名\" class=\"headerlink\" title=\"1. 校验签名\"></a>1. 校验签名</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 拆分jwt</span><br><span class=\"line\">let jwtArr = jwtToken.split(&#x27;.&#x27;);</span><br><span class=\"line\">// 根据头部和载荷验证签名是否匹配</span><br><span class=\"line\">let checkToken = crypto.createHmac(&#x27;sha256&#x27;,&#x27;my secret&#x27;).update(jwtArr[0]+&#x27;.&#x27;+jwtArr[1]).digest(&#x27;base64&#x27;);</span><br><span class=\"line\">checkToken ?= jwtArr[2]</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-解析数据\"><a href=\"#2-解析数据\" class=\"headerlink\" title=\"2. 解析数据\"></a>2. 解析数据</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//　校验签名通过，解析载荷的base64数据</span><br><span class=\"line\">let jwtPayload = JSON.parse(Buffer.from(jwtArr[1],&#x27;base64&#x27;).toString())</span><br></pre></td></tr></table></figure>",
            "tags": [
                "josn web token",
                "jwt"
            ]
        },
        {
            "id": "http://qiubo.ink/2018/09/14/frp%E7%BD%91%E7%BB%9C%E6%98%A0%E5%B0%84%E8%AE%B0%E5%BD%95/",
            "url": "http://qiubo.ink/2018/09/14/frp%E7%BD%91%E7%BB%9C%E6%98%A0%E5%B0%84%E8%AE%B0%E5%BD%95/",
            "title": "frp网络映射记录",
            "date_published": "2018-09-14T11:54:07.000Z",
            "content_html": "<p><code>frp</code>是使用 Golang 开发的一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。简单的部署和配置即可满足端口映射功能，用于调试微信开发或是其他必须外网条件的应用…</p>\n<span id=\"more\"></span>\n\n<p>下载 <a href=\"https://github.com/fatedier/frp/\"><code>frp</code></a> 对应版本</p>\n<p>文件结构</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frpc.exe      <span class=\"comment\"># 客户端二进制文件</span></span><br><span class=\"line\">frpc.ini      <span class=\"comment\"># 客户端配置文件</span></span><br><span class=\"line\">frpc.full.ini <span class=\"comment\"># 客户端配置完整文件</span></span><br><span class=\"line\">fprs.exe      <span class=\"comment\"># 服务端二进制文件</span></span><br><span class=\"line\">frps.ini      <span class=\"comment\"># 服务端配置文件</span></span><br><span class=\"line\">frps.full.ini <span class=\"comment\"># 服务端完整配置文件    </span></span><br><span class=\"line\">LICENSE       <span class=\"comment\"># 开源协议证书</span></span><br></pre></td></tr></table></figure>\n\n<p><code>frps</code> 服务端配置:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"comment\"># 绑定ip</span></span><br><span class=\"line\"><span class=\"attr\">bind_addr</span> = <span class=\"number\">192.168</span>.<span class=\"number\">1.114</span></span><br><span class=\"line\"><span class=\"comment\"># 绑定端口</span></span><br><span class=\"line\"><span class=\"attr\">bind_port</span> = <span class=\"number\">9898</span></span><br><span class=\"line\"><span class=\"comment\"># http设置需要的虚拟主机端口(访问时输入的端口,必须与监听端口不同)</span></span><br><span class=\"line\"><span class=\"attr\">vhost_http_port</span> = <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n<p><code>frpc</code> 服务端配置:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"comment\"># 链接服务端的地址</span></span><br><span class=\"line\"><span class=\"attr\">server_addr</span> = <span class=\"number\">192.168</span>.<span class=\"number\">1.114</span></span><br><span class=\"line\"><span class=\"comment\"># 链接服务端的端口</span></span><br><span class=\"line\"><span class=\"attr\">server_post</span> = <span class=\"number\">9898</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># http配置</span></span><br><span class=\"line\"><span class=\"section\">[http]</span></span><br><span class=\"line\"><span class=\"comment\"># 类型是http</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"comment\"># 域名(可以写为ip,访问时输入的ip)</span></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"comment\"># 需要映射的本地端口</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>",
            "tags": [
                "frp",
                "网络"
            ]
        },
        {
            "id": "http://qiubo.ink/2017/09/14/Verdaccio%E6%90%AD%E5%BB%BAnpm%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/",
            "url": "http://qiubo.ink/2017/09/14/Verdaccio%E6%90%AD%E5%BB%BAnpm%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/",
            "title": "Verdaccio 搭建npm私有仓库",
            "date_published": "2017-09-14T11:56:01.000Z",
            "content_html": "<p>使用Nodejs的过程中未免会遇到公司项目私有化开发，此时需要一些私有模块的发布和使用，<code>npmjs</code>的私有仓库是付费的功能,<code>cnpm</code>本地搭建又偏重，<code>verdaccio</code>项目刚好满足，轻量私有部署简单</p>\n<span id=\"more\"></span>\n\n<p>由于<code>sinopia</code>项目不再维护,故选取fork项目<code>verdaccio</code>进行搭建,使用方法一样,仅仅将<code>sinopia</code>换为<code>verdaccio</code></p>\n<p>环境依赖</p>\n<p>python 2.7.x<br>node-gyp</p>\n<h3 id=\"1-安装verdaccio\"><a href=\"#1-安装verdaccio\" class=\"headerlink\" title=\"1. 安装verdaccio\"></a>1. 安装verdaccio</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g verdaccio</span><br><span class=\"line\"></span><br><span class=\"line\">配置文件 ~/.config/verdaccio/config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 存放位置</span></span><br><span class=\"line\">storage: ./npmdata</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 认证</span></span><br><span class=\"line\">auth:</span><br><span class=\"line\">\thtpasswd:</span><br><span class=\"line\">\t\tfile:./authpasswd</span><br><span class=\"line\">\t\tmax_users:10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 抓取镜像源</span></span><br><span class=\"line\">uplinks</span><br><span class=\"line\">\tnpmjs:</span><br><span class=\"line\">\t\turl:http://registry.npm.taobao.org/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># package</span></span><br><span class=\"line\">packages:</span><br><span class=\"line\">\t<span class=\"string\">&quot;@*/*&quot;</span>:</span><br><span class=\"line\">\t\taccess:<span class=\"variable\">$all</span></span><br><span class=\"line\">\t\tpublish:<span class=\"variable\">$authenticated</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">\t\taccess:<span class=\"variable\">$all</span></span><br><span class=\"line\">\t\tpublish:<span class=\"variable\">$authenticated</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志</span></span><br><span class=\"line\">logs:</span><br><span class=\"line\">\t- &#123;<span class=\"built_in\">type</span>:stdout,format:pretty,level:http,path:./npm.log&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监听端口(默认没有这个选项监听4873端口)</span></span><br><span class=\"line\">listen:\t0.0.0.0:4433</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-启动项目\"><a href=\"#2-启动项目\" class=\"headerlink\" title=\"2. 启动项目\"></a>2. 启动项目</h3><ol>\n<li>默认启动<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">verdaccio</span><br><span class=\"line\"><span class=\"comment\"># 默认加载 ~/.config/verdaccio/config.yaml</span></span><br><span class=\"line\"><span class=\"comment\"># 默认监听</span></span><br><span class=\"line\"><span class=\"comment\"># 默认存储位置 ~/.config/verdaccio/storage/</span></span><br><span class=\"line\"><span class=\"comment\"># 默认账号密码存放位置 ~/.config/verdaccio/htpasswd</span></span><br></pre></td></tr></table></figure></li>\n<li>终端命令启动</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">verdaccio -l 端口 -c 配置文件位置</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>pm2进程守护</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start `<span class=\"built_in\">which</span> verdaccio` --name <span class=\"string\">&quot;local_npm&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-项目使用\"><a href=\"#3-项目使用\" class=\"headerlink\" title=\"3. 项目使用\"></a>3. 项目使用</h3><ol>\n<li>修改源<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">set</span> registry http://0.0.0.0:4433</span><br></pre></td></tr></table></figure></li>\n<li>增加用户</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm adduser --registry http://0.0.0.0:4433</span><br><span class=\"line\">Username:</span><br><span class=\"line\">Passwd:</span><br><span class=\"line\">Emial:</span><br></pre></td></tr></table></figure>\n<ol>\n<li>发布包 和发布到npm仓库一样,登录,发布</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n<ol>\n<li>安装包</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @xxx/yyy</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-注\"><a href=\"#4-注\" class=\"headerlink\" title=\"4. 注\"></a>4. 注</h3><p>使用 <code>nrm</code> 管理源 使用 nrm 增加源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm add nl http://0.0.0.0:4433</span><br></pre></td></tr></table></figure>\n<p>使用 nrm 切换源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm use nl</span><br></pre></td></tr></table></figure>\n<p>浏览 nrm 源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br></pre></td></tr></table></figure>",
            "tags": [
                "npm"
            ]
        },
        {
            "id": "http://qiubo.ink/2017/05/12/node-mysql%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/",
            "url": "http://qiubo.ink/2017/05/12/node-mysql%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/",
            "title": "node-mysql基础操作",
            "date_published": "2017-05-12T17:47:06.000Z",
            "content_html": "<h4 id=\"1-安装mysql模块\"><a href=\"#1-安装mysql模块\" class=\"headerlink\" title=\"1. 安装mysql模块\"></a>1. 安装mysql模块</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mysql --save</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-创建mysql-js\"><a href=\"#2-创建mysql-js\" class=\"headerlink\" title=\"2. 创建mysql.js\"></a>2. 创建mysql.js</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql = require(&#x27;mysql&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">var connection = mysql.createConnection(&#123;</span><br><span class=\"line\">    host:&#x27;localhost&#x27;,</span><br><span class=\"line\">    user:&#x27;root&#x27;,</span><br><span class=\"line\">    password:&#x27;root&#x27;,</span><br><span class=\"line\">    database:&#x27;node&#x27;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>利用mysql模块的createConnection函数,配置好相应参数即可连接mysql数据库,</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connection.connect();</span><br><span class=\"line\">console.log(&#x27;数据库连接成功&#x27;);</span><br></pre></td></tr></table></figure>\n<p>建立连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connection.query(sql,function(err,res)&#123;</span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        console.log(err);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        console.log(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>运行sql语句,返回数据信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connection.end();</span><br><span class=\"line\">console.log(&#x27;数据库关闭&#x27;);</span><br></pre></td></tr></table></figure>\n<p>关闭数据库连接</p>\n",
            "tags": [
                "nodejs",
                "mysql",
                "node操作数据库"
            ]
        },
        {
            "id": "http://qiubo.ink/2017/05/05/Push%E6%9C%AC%E5%9C%B0%E5%8E%9F%E6%9C%89%E6%96%87%E4%BB%B6%E5%88%B0github%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE/",
            "url": "http://qiubo.ink/2017/05/05/Push%E6%9C%AC%E5%9C%B0%E5%8E%9F%E6%9C%89%E6%96%87%E4%BB%B6%E5%88%B0github%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE/",
            "title": "Push 本地原有文件到github新建项目",
            "date_published": "2017-05-05T08:55:51.000Z",
            "content_html": "<ol>\n<li><p>本地项目已经完成，此时想同步至github上。</p>\n</li>\n<li><p>方法一：创建文件夹 clone github项目至本地 ，拷贝项目并上传</p>\n</li>\n<li><p>方法二：在项目文件夹下git init 创建git本地版本库，再上传</p>\n</li>\n<li><p>方法二显然更合适，不过在方法二进行时出现<code>failed to push some refs to git</code>错误提示,(不经常研究git工作原理，只是作为版本同步工具使用)，于是网上搜索。</p>\n</li>\n<li><p>是因为远程文件不在本地文件夹中所致，运行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     git pull --rebase ogigin master</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>4.本地出现远程文件，此时运行git push则无报错。</p>\n",
            "tags": [
                "git",
                "git版本管理"
            ]
        },
        {
            "id": "http://qiubo.ink/2017/05/05/mysql%E5%AD%A6%E4%B9%A0(%E4%BA%8C)/",
            "url": "http://qiubo.ink/2017/05/05/mysql%E5%AD%A6%E4%B9%A0(%E4%BA%8C)/",
            "title": "mysql学习(二)",
            "date_published": "2017-05-05T08:52:46.000Z",
            "content_html": "<h4 id=\"1-排序-order-by\"><a href=\"#1-排序-order-by\" class=\"headerlink\" title=\"1. 排序 order by\"></a>1. 排序 order by</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    mysql&gt; SELCET * FROM table_name ORDER BY author ASC;</span><br></pre></td></tr></table></figure>\n<p>排序:asc正序<br>    desc 倒序</p>\n<p>将table_name表中的数据按照作者名称倒序排列</p>\n<h4 id=\"2-分组\"><a href=\"#2-分组\" class=\"headerlink\" title=\"2. 分组\"></a>2. 分组</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    mysql&gt; select author,count(*) from yable_name group by author;</span><br></pre></td></tr></table></figure>\n<p>将表中数据按照作者名字统计</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    +--------+----------+</span><br><span class=\"line\">    | author | count(*) |</span><br><span class=\"line\">    +--------+----------+</span><br><span class=\"line\">    | Jick   |        1 |</span><br><span class=\"line\">    | John   |        1 |</span><br><span class=\"line\">    | To     |        1 |</span><br><span class=\"line\">    | Tomy   |        2 |</span><br><span class=\"line\">    | 小      |        2 |</span><br><span class=\"line\">    +--------+----------+</span><br></pre></td></tr></table></figure>\n<p>分组数据再归纳</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    mysql&gt; select author,count(*) from table_name group by author with rollup;</span><br><span class=\"line\"></span><br><span class=\"line\">    +--------+----------+</span><br><span class=\"line\">    | author | count(*) |</span><br><span class=\"line\">    +--------+----------+</span><br><span class=\"line\">    | Jick   |        1 |</span><br><span class=\"line\">    | John   |        1 |</span><br><span class=\"line\">    | To     |        1 |</span><br><span class=\"line\">    | Tomy   |        2 |</span><br><span class=\"line\">    | 小      |        2 |</span><br><span class=\"line\">    | NULL   |        7 |</span><br><span class=\"line\">    +--------+----------+</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-连接多个表的查询结果\"><a href=\"#3-连接多个表的查询结果\" class=\"headerlink\" title=\"3. 连接多个表的查询结果\"></a>3. 连接多个表的查询结果</h4><p>a) 创建新数据表并设置外键</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    mysql&gt; create table table_name2(</span><br><span class=\"line\">         &gt; id int not null auto_increment,</span><br><span class=\"line\">         &gt; author_id int not null,</span><br><span class=\"line\">         &gt; comments text not null,</span><br><span class=\"line\">         &gt; create_date date,</span><br><span class=\"line\">         &gt; primary key (id),</span><br><span class=\"line\">         &gt; foreign key (author\\_id) references test\\_table(id),</span><br><span class=\"line\">         &gt; )engine=InnoDB default charset=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">    mysql&gt; select a.id,a.author,b.comments from table\\_name a inner join table\\_name2 b on a.id = b.author_id;</span><br><span class=\"line\"></span><br><span class=\"line\">    +----+--------+----------+</span><br><span class=\"line\">    | id | author | comments |</span><br><span class=\"line\">    +----+--------+----------+</span><br><span class=\"line\">    |  3 | 小      | like     |</span><br><span class=\"line\">    |  4 | Tomy   | like     |</span><br><span class=\"line\">    |  4 | Tomy   | love     |</span><br><span class=\"line\">    +----+--------+----------+</span><br></pre></td></tr></table></figure>",
            "tags": [
                "mysql",
                "数据库"
            ]
        },
        {
            "id": "http://qiubo.ink/2017/05/05/mysql%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "url": "http://qiubo.ink/2017/05/05/mysql%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "title": "mysql学习(一)",
            "date_published": "2017-05-05T08:52:00.000Z",
            "content_html": "<ol>\n<li><p>创建数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     mysql&gt; create database database_name;</span><br></pre></td></tr></table></figure></li>\n<li><p>删除数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     mysql&gt; drop database database_name;</span><br></pre></td></tr></table></figure></li>\n<li><p>创建表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     mysql&gt; create table table_name(</span><br><span class=\"line\">          &gt; id int not null auto_increment,</span><br><span class=\"line\">          &gt; author varchar(10) not null,</span><br><span class=\"line\">          &gt; title varchar(50) not null,</span><br><span class=\"line\">          &gt; content text,</span><br><span class=\"line\">          &gt; create_date date,</span><br><span class=\"line\">          &gt; primary key ( id )</span><br><span class=\"line\">          &gt; )engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建id为整型,不为空,自动增加</p>\n</li>\n<li><p>作者为长度为10的字符串,不为空</p>\n</li>\n<li><p>标题为不为空的长度为100的字符串</p>\n</li>\n<li><p>内容为长文本类型</p>\n</li>\n<li><p>创建时间为时间类型</p>\n</li>\n<li><p>设置id为主键</p>\n</li>\n<li><p>设置mysql存储引擎为InnoDB,字符集为utf-8</p>\n</li>\n<li><p>删除表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     mysql&gt; drop table table_name;</span><br></pre></td></tr></table></figure>\n<p>删除table_name的表</p>\n</li>\n<li><p>增加数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     mysql&gt; insert into table_name</span><br><span class=\"line\">          &gt; (author,title,content,create_date)</span><br><span class=\"line\">          &gt; values</span><br><span class=\"line\">          &gt; (&#x27;Tomy&#x27;,&#x27;Read book&#x27;,&#x27;&#x27;,now());</span><br></pre></td></tr></table></figure>\n<p>增加数据作者为Tomy 标题为Read book 内容为null 时间为当前时间</p>\n</li>\n<li><p>查询数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     mysql&gt; select id,author,title,create_date</span><br><span class=\"line\">          &gt; from table_name</span><br><span class=\"line\">          &gt; where id &gt; 2 limit 2 offset 5;</span><br><span class=\"line\">     // binary 区分大小写匹配</span><br><span class=\"line\">     // limit 限制显示数据条数</span><br><span class=\"line\">     // offset 数据偏移条数</span><br></pre></td></tr></table></figure>\n<p>查询id 大于2的行,展示从第6条开始的两条数据的id,作者,标题,创建时间</p>\n</li>\n<li><p>删除数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     mysql&gt; delete from test_table where id = 1;</span><br></pre></td></tr></table></figure>\n<p>删除id为1的数据行</p>\n<p>注:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     mysql&gt; dalete from test_table;</span><br></pre></td></tr></table></figure>\n<p>没有注明查询条件的话,默认清空当前表中所有数据</p>\n</li>\n<li><p>修改数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     mysql&gt; update table_name set author=&#x27;New data&#x27; where id = 2;</span><br></pre></td></tr></table></figure>\n<p>修改id为2行的作者为New data</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     mysql&gt; update table_name set author=&#x27;New name&#x27;,title=&#x27;Learning&#x27; where id =3;</span><br></pre></td></tr></table></figure>\n<p>修改id为3的数据行的作者和标题</p>\n</li>\n<li><p><code>Like</code> 查询模糊数据<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     mysql&gt; select * from table_name where author like &#x27;%o&#x27;;</span><br></pre></td></tr></table></figure><br>查询table_name表中作者字段以字母o结尾的数据<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     mysql&gt; select * from table_name where author like &#x27;t%&#x27;;</span><br></pre></td></tr></table></figure><br>查询table_name表中作者字段以字母t起始的数据</p>\n</li>\n<li><p><code> union </code>查询语句<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from table_name where author like &#x27;www%&#x27;</span><br><span class=\"line\">     &gt; union all</span><br><span class=\"line\">     &gt; select * from table_name where author like &#x27;%cn&#x27;;</span><br></pre></td></tr></table></figure><br>union 两个参数:all 输出所有查询结果,包括重复数据</p>\n</li>\n</ol>\n<pre><code>         :distinct 排除重复数据并输出(默认值)\n</code></pre>\n",
            "tags": [
                "mysql",
                "数据库"
            ]
        },
        {
            "id": "http://qiubo.ink/2017/03/28/Debian%E4%B8%8B%E5%AE%89%E8%A3%85mysql,%E5%8F%8A%E8%AE%BF%E9%97%AE%E9%85%8D%E7%BD%AE/",
            "url": "http://qiubo.ink/2017/03/28/Debian%E4%B8%8B%E5%AE%89%E8%A3%85mysql,%E5%8F%8A%E8%AE%BF%E9%97%AE%E9%85%8D%E7%BD%AE/",
            "title": "Debian下安装mysql,及访问配置",
            "date_published": "2017-03-28T09:12:50.000Z",
            "content_html": "<ol>\n<li><p>使用 <code>putty</code> 连接服务器  </p>\n</li>\n<li><p>直接运行 <code>apt-get install mysql-server mysql-client</code></p>\n</li>\n<li><p>安装完成后,即可自动运行</p>\n</li>\n<li><p>外部不能访问:</p>\n<p>修改 <code>mysql</code> 配置文件 <code>my.conf</code></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bind-address</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br></pre></td></tr></table></figure>\n<p>修改为:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bind-address</span> = <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span> 或者 行前加 <span class=\"comment\"># 号注释该行</span></span><br></pre></td></tr></table></figure></li>\n<li><p>重启mysql</p>\n</li>\n<li><p>赋予远程访问权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; GRANT ALL ON *.* TO <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;root_password&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改默认用户名密码</p>\n</li>\n<li><p><code>mysql&gt; UPDATE user SET Password=PASSWORD(’newpassword’) where USER=’root’</code> </p>\n</li>\n<li><p><code>mysql&gt; FLUSH PRIVILEGES; </code></p>\n</li>\n</ol>\n<p>此时即可远程访问mysql数据库,进行管理.</p>\n",
            "tags": [
                "服务器环境配置mysql"
            ]
        },
        {
            "id": "http://qiubo.ink/2017/02/17/VS%20Code%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/",
            "url": "http://qiubo.ink/2017/02/17/VS%20Code%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/",
            "title": "VS Code前端开发常用插件",
            "date_published": "2017-02-17T11:12:27.000Z",
            "content_html": "<blockquote>\n<p>前言: Visual Studio Code (简称 VS Code &#x2F; VSC) 是一款免费开源的现代化轻量级代码编辑器，支持几乎所有主流的开发语言的语法高亮、智能代码补全、自定义热键、括号匹配、代码片段、代码对比 Diff、GIT 等特性，支持插件扩展，并针对网页开发和云端应用开发做了优化。软件跨平台支持 Win、Mac 以及 Linux，运行流畅，可谓是微软的良心之作……</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>VS code 开发个人常用插件:</p>\n<ol>\n<li><code>Path Intellisense</code> 自动补全路径提示</li>\n<li><code>npm intellisense</code> npm自动补全</li>\n<li><code>c/c++</code> c&#x2F;c++开发</li>\n<li><code>ESLint</code> js代码风格</li>\n<li><code>GitLens</code> git可视化控制</li>\n<li><code>Go</code> golang 开发</li>\n<li><code>hexdump for VSCode</code> 16进制文件查看</li>\n<li><code>Settings Sync</code> VSCode 配置同步</li>\n<li><code>VS Live Share</code> visual studio 实时代码协作</li>\n<li><code>vscode-icons</code> vscode图标主题</li>\n</ol>\n",
            "tags": [
                "Vscode",
                "常用插件",
                "编辑器"
            ]
        },
        {
            "id": "http://qiubo.ink/2016/12/26/linux%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85nodejs/",
            "url": "http://qiubo.ink/2016/12/26/linux%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85nodejs/",
            "title": "linux下配置安装nodejs",
            "date_published": "2016-12-26T11:29:20.000Z",
            "content_html": "<h2 id=\"linux下配置安装nodejs\"><a href=\"#linux下配置安装nodejs\" class=\"headerlink\" title=\"linux下配置安装nodejs\"></a>linux下配置安装nodejs</h2><p>（非广告）virmach 美国VPS主机 <code>7.5刀/年</code>（折合软妹币52.129；按软妹付款为54多）， 配置如下：</p>\n<table>\n<thead>\n<tr>\n<th>CPU</th>\n<th>RAM</th>\n<th>硬盘</th>\n<th>带宽&#x2F;流量</th>\n<th>IP</th>\n<th>DDoS保护</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1核</td>\n<td>128M</td>\n<td>10G SSD</td>\n<td>1Gbps&#x2F;250Gbp</td>\n<td>一个</td>\n<td>10Gbps</td>\n</tr>\n</tbody></table>\n<p>个人觉得还可以，就买了一个练习配置，因为内存不大，所以打算配置nodejs练练手，就当学习了。下边是linux配置，非购买使用流程。</p>\n<ol>\n<li>根据提供的IP:22使用putty链接</li>\n<li>用户名root 密码***** <img src=\"http://xiaqiubo.top/wp-content/uploads/2017/02/virmach001-300x188.png\"></li>\n<li>该主机自带了python2.7.3 <img src=\"http://xiaqiubo.top/wp-content/uploads/2017/02/virmach002-300x42.png\"></li>\n<li>于是安装node就省去了很大一步（注：还得在本地虚拟机从零测试安装） <code>cd /usr/local/</code> 在这个文件夹下（当然哪个文件夹都可以），下载nodejs资源包 本来想服务器在国外，下载国外的node资源应该不错，</li>\n</ol>\n<ul>\n<li>于是乎找到下载地址（官网的） <a href=\"https://nodejs.org/dist/v6.9.2/node-v6.9.2-linux-x86.tar.xz\">https://nodejs.org/dist/v6.9.2/node-v6.9.2-linux-x86.tar.xz</a> </li>\n<li>运行 <code>wget --no-check-certificate https://nodejs.org/dist/v6.9.2/node-v6.9.2-linux-x86.tar.xz</code> no-check-certificate是阻止wget下载前验证 下载成功 ，而且网速还不错<br><img src=\"http://xiaqiubo.top/wp-content/uploads/2017/02/virmach003-300x188.png\"> </li>\n<li>解压 <code>tar node-v6.9.2-linux-x86.tar.xz</code> (已解决使用xz命令解压缩  2016-12-26) 格式错误。于是只能拐回国内链接 </li>\n<li>同样运行 <code>wget --no-check-certificate https://nodejs.org/dist/v6.2.0/node-v6.2.0-linux-x86.tar.gz</code>          <br><img src=\"http://xiaqiubo.top/wp-content/uploads/2017/02/virmach004-300x189.png\"> 下载成功，网速依旧。</li>\n<li>解压 <code>tar node-v6.9.2-linux-x86.tar.xz</code></li>\n</ul>\n<ol start=\"5\">\n<li>解压文件包并重命名文件夹（详情搜索mv命令） <code>mv node-v6.9.2-linux-x86 node</code></li>\n<li>配置临时环境变量 <code>export PATH=/usr/local/python/bin:/usr/local/node/bin:$PATH</code> 该环境变量为临时变量，关闭ssh窗口即失效 所以需要配置永久环境变量，修改etc&#x2F;profile文件</li>\n<li>编辑添加全局环境变量 <code>vim /etc/profile</code><br>   <img src=\"http://xiaqiubo.top/wp-content/uploads/2017/02/virmach005-300x188.png\"> 增加变量路径 <code>:wq</code>保存退出</li>\n<li>node环境配置成功<br>   <img src=\"http://xiaqiubo.top/wp-content/uploads/2017/02/virmach006-300x48.png\"></li>\n</ol>\n<p>剩下的后期继续更新。</p>\n",
            "tags": [
                "linux",
                "nodejs",
                "虚拟主机"
            ]
        },
        {
            "id": "http://qiubo.ink/2016/12/15/Cmder%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E5%8F%8Agit%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%AE%8C%E6%95%B4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/",
            "url": "http://qiubo.ink/2016/12/15/Cmder%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E5%8F%8Agit%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%AE%8C%E6%95%B4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/",
            "title": "Cmder中文乱码及git中文显示不完整解决方法",
            "date_published": "2016-12-15T09:25:00.000Z",
            "content_html": "<p>Cmder是一款Windows环境下非常简洁美观易用的cmd替代者,它支持了大部分的Linux命令。 但是，默认的中文相关设置Gb2312、Chinese big 都无法解决cmder显示中文乱码的现象，在网上找了很多中文设置方法，由于版本不对，找不到对应设置项。 今天找到了一篇博文，解决了这个问题。</p>\n<ol>\n<li>打开<code>cmder</code></li>\n<li><code>win+alt+p</code>（右下角–》setting）打开设置面板</li>\n<li>在左侧栏中 Startup&#x3D;&#x3D;》Environment 添加<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set LANG=zh_CN.UTF8</span><br></pre></td></tr></table></figure>\n </li>\n<li>一般这样就OK了大部分场合都能正确的显示中文（GBK须设置set LANG&#x3D;zh_CN.CBK） 具体更多细节和cmder详细介绍请参考原文。 <a href=\"http://blog.csdn.net/mihupengpeng/article/details/53009110?locationNum=16&fps=1\">原文链接</a></li>\n</ol>\n<p>另外，解决cmder中文显示问题后，cmder自带的git中文显示仍然有问题，本人情况如下 “345\\214\\273\\351\\227\\256\\347\\255\\224\\347\\244\\276\\345\\214\\272.md” 解决方法<a href=\"http://blog.csdn.net/yunnywu/article/details/50553908\">参考文章</a>（该文章提供了多种情景git显示乱码的解决方案） 在bash提示符下输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.quotepath <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>core.quotepath设为false的话，就不会对0x80以上的字符进行quote。中文显示正常。</p>\n",
            "tags": [
                "cmder",
                "git学习"
            ]
        },
        {
            "id": "http://qiubo.ink/2016/12/08/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9B%BE%E7%89%87/",
            "url": "http://qiubo.ink/2016/12/08/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9B%BE%E7%89%87/",
            "title": "响应式图片",
            "date_published": "2016-12-08T19:18:03.000Z",
            "content_html": "<p>在当前响应式设计和自适应设计的流行下，大部分web页面往往都兼容多终端设备，其中一个比较麻烦的问题就是图片的加载了。不同平台显然不可能用同一张大的图片，这样子不但浪费手机流量、影响网站载入速度并且在小屏幕下会很不清晰。让浏览器根据分辨率自动识别图片是最好的方法。</p>\n<span id=\"more\"></span>\n<h3 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h3><h4 id=\"picture标签\"><a href=\"#picture标签\" class=\"headerlink\" title=\"picture标签\"></a>picture标签</h4><p>引用HTML5新特性</p>\n<ol>\n<li>创建标签</li>\n<li>在标签内使用source元素</li>\n<li>添加media属性</li>\n<li>srcset加载图片</li>\n<li>img元素避免老旧浏览器不识别picture标签和srcset属性<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">picture</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">srcset</span>=<span class=\"string\">&quot;img/300.png&quot;</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;(min-width:300px)&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">srcset</span>=<span class=\"string\">&quot;img/600.png&quot;</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;(min-width:600px)&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">srcset</span>=<span class=\"string\">&quot;img/1200.png&quot;</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;(min-width:1200px)&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">srcset</span>=<span class=\"string\">&quot;img/1200.png&quot;</span>/&gt;</span>                </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">picture</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h3><h4 id=\"srcset属性\"><a href=\"#srcset属性\" class=\"headerlink\" title=\"srcset属性\"></a>srcset属性</h4><ol>\n<li><p>img标签的新属性</p>\n</li>\n<li><p>配合sizes属性使用更好</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">srcset</span>=<span class=\"string\">&quot;img/300.png 300w,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">             img/600.png 600w,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">             img/1200.png 1200w&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">sizes</span>=<span class=\"string\">&quot;(max-width:300px) 100vm,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            (max-width:600px) 50vm,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            (max-width:1200) 300px&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>srcset中的300w、600w、1200w类似于媒体查询，规定了不同宽度下应该加载的图片。当图片外围的宽度不为视口宽度的100%时，该属性会出现一些小问题，所以需要与sizes属性相配合。 sizes属性的媒体查询规定的是视口大小与其缩放比例</p>\n<h3 id=\"方法三：\"><a href=\"#方法三：\" class=\"headerlink\" title=\"方法三：\"></a>方法三：</h3><p>js或cookie控制服务器 <a href=\"http://www.wzsky.net/html/Photo/theory/130077.html\">详细参考</a></p>\n</li>\n</ol>\n",
            "tags": [
                "响应式图片",
                "移动端兼容",
                "前端"
            ]
        },
        {
            "id": "http://qiubo.ink/2016/12/08/gulp%E5%88%9D%E4%BD%93%E9%AA%8C/",
            "url": "http://qiubo.ink/2016/12/08/gulp%E5%88%9D%E4%BD%93%E9%AA%8C/",
            "title": "gulp初体验",
            "date_published": "2016-12-08T12:09:12.000Z",
            "content_html": "<p>在云IDEcloud9中体验测试了gulp</p>\n<h4 id=\"1-首先npm-install-gulp-g\"><a href=\"#1-首先npm-install-gulp-g\" class=\"headerlink\" title=\"1. 首先npm install gulp -g\"></a>1. 首先npm install gulp -g</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp --save-dev 全局和项目安装gulp</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-测试项目为压缩文件和修改文件名称\"><a href=\"#2-测试项目为压缩文件和修改文件名称\" class=\"headerlink\" title=\"2. 测试项目为压缩文件和修改文件名称\"></a>2. 测试项目为压缩文件和修改文件名称</h4><p>安装gulp依赖项</p>\n<p>| 名称 | 含义 |<br>|gulp-minify|压缩css文件|<br>|gulp-uglify|压缩js文件|<br>|gulp-concat|合并文件|<br>|gulp-rename|修改文件或文件夹名称|</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-minify --save-dev</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-创建gulpfile-js文件\"><a href=\"#3-创建gulpfile-js文件\" class=\"headerlink\" title=\"3. 创建gulpfile.js文件\"></a>3. 创建gulpfile.js文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&#x27;gulp&#x27;),</span><br><span class=\"line\">    minify = require(&#x27;gulp-minify&#x27;),</span><br><span class=\"line\">    uglify = require(&#x27;gulp-uglify&#x27;),</span><br><span class=\"line\">    concat = require(&#x27;gulp-concat&#x27;),</span><br><span class=\"line\">    rename = require(&#x27;gulp-rename&#x27;);</span><br><span class=\"line\">//获取每个组件</span><br><span class=\"line\"> gulp.task(&#x27;taskName&#x27;,function()&#123;</span><br><span class=\"line\">    return gulp.src(&#x27;./dst/js/*.js&#x27;)               //返回任务操作路径和文件</span><br><span class=\"line\">        .pipe(concat(&#x27;functions.js&#x27;))              //合并所有的js文件为functions.js</span><br><span class=\"line\">        .pipe(gulp.dest(&#x27;./src/js/&#x27;))              //输出functions.js文件到根目录下src下js文件夹</span><br><span class=\"line\">        .pipe(uglify())                            //压缩该文件</span><br><span class=\"line\">        .pipe(rename(&#123;extname:&#x27;.min.js&#x27;&#125;))         //对压缩后的文件进行重命名，修改文件后缀为.min.js</span><br><span class=\"line\">        .pipe(gulp.dest(&#x27;./src/js/&#x27;));             //输出到与未压缩同目录下</span><br><span class=\"line\"> &#125;);//新建一个名字叫taskName的任务</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-文件内容详解：\"><a href=\"#4-文件内容详解：\" class=\"headerlink\" title=\"4. 文件内容详解：\"></a>4. 文件内容详解：</h4><h5 id=\"require-函数：\"><a href=\"#require-函数：\" class=\"headerlink\" title=\"require()函数：\"></a>require()函数：</h5><p>参数为string<br><strong>1. 如果string为内置模块</strong><br>        返回该模块 不再继续执行<br><strong>2. 如果string以文件路径形式（如：’.&#x2F;X’、’..&#x2F;X’ 、’&#x2F;X’）</strong><br>        根据 X 所在的父模块，确定 X 的绝对路径。 将 X 当成文件，依次查找名称为X的文件，只要其中有一个存在，就返回该文件，不再继续执行。 X X.js X.json X.node 将 X 当成目录，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。 X&#x2F;package.json X&#x2F;index.js X&#x2F;index.json X&#x2F;index.node<br><strong>3. 如果string不带路径</strong><br>        根据 X 所在的父模块，确定 X 可能的安装目录。 依次在每个目录中，将 X 当成文件名或目录名加载。<br>        <a href=\"http://www.ruanyifeng.com/blog/2015/05/require.html\">参考文章1</a><br>        <a href=\"http://www.jdon.com/idea/nodejs/how-require-actually-works.html\">参考文章2</a></p>\n<h5 id=\"gulp-task\"><a href=\"#gulp-task\" class=\"headerlink\" title=\"gulp.task()\"></a>gulp.task()</h5><p>用于创建gulp任务，默认任务名称为<code>default task(&#39;a&#39;,b)</code>; 参数a：指定任务名称 参数b：匿名函数 执行任务时运行 gulp a（默认任务名直接执行 gulp 即可）</p>\n<h5 id=\"gulp-src\"><a href=\"#gulp-src\" class=\"headerlink\" title=\"gulp.src()\"></a>gulp.src()</h5><pre><code>    `gulp.src(globs[, options])`\n    1. `globs` 参数是文件匹配模式(类似正则表达式)，用来匹配文件路径(包括文件名)，当然这里也可以直接指定某个具体的文件路径。当有多个匹配模式时，该参数可以为一个数组。\n    2. `options` 为可选参数。通常情况下我们不需要用到。\n</code></pre>\n<h5 id=\"pipe\"><a href=\"#pipe\" class=\"headerlink\" title=\"pipe()\"></a>pipe()</h5><p><code>node.js</code> 中 <code>stream</code>（流）的指示方向</p>\n<h5 id=\"gulp-dest\"><a href=\"#gulp-dest\" class=\"headerlink\" title=\"gulp.dest()\"></a>gulp.dest()</h5><p><code>gulp.dest()</code> 方法是用来写文件的，其语法为：</p>\n<pre><code>    `gulp.dest(path[,options])`\n    1. path为写入文件的路径\n    2. options为一个可选的参数对象，通常我们不需要用到\n</code></pre>\n<h5 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h5><p>合并文件，指定参数为合并后的文件名称</p>\n<h5 id=\"uglify\"><a href=\"#uglify\" class=\"headerlink\" title=\"uglify()\"></a>uglify()</h5><p>压缩文件，没有制定参数，直接压缩js文件</p>\n<h5 id=\"rename\"><a href=\"#rename\" class=\"headerlink\" title=\"rename()\"></a>rename()</h5><p>参数为数组，<code>basename</code>、<code>prefix/suffix</code>、<code>extname</code>、<code>dirname</code> 常用：prefix: ‘pre-‘ 增加前缀pre- suffix: ‘-suf’ 增加后缀，不改变文件性质 extname:’.min.js’ 修改文件后缀 <a href=\"http://www.cnblogs.com/2050/p/4198792.html\">参考文章3</a></p>\n",
            "tags": [
                "nodejs",
                "gulp",
                "前端自动化"
            ]
        },
        {
            "id": "http://qiubo.ink/2016/11/19/git%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/",
            "url": "http://qiubo.ink/2016/11/19/git%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/",
            "title": "【小码农博客】git添加文件夹下所有文件",
            "date_published": "2016-11-19T10:47:05.000Z",
            "content_html": "<p>最近，突然想将之前做的部分项目上传至 <code>github</code> 上，却发现网上对于上传整个文件夹的讲解多种多样，转念一想，其实和添加文件是一样的，首先打开git-bash命令行</p>\n<blockquote>\n<p><code>git status</code></p>\n</blockquote>\n<p>发现有一个新的文件夹 添加文件是</p>\n<blockquote>\n<p><code>git add (files name)</code></p>\n</blockquote>\n<p>  或者添加文件夹下所有的文件所</p>\n<blockquote>\n<p><code>git add dirname/*</code></p>\n</blockquote>\n<p>这样一下所有的文件都被添加到 <code>git</code> 暂存区了， 剩下的就是 <code>git commit</code> 和 <code>git push</code>了。</p>\n",
            "tags": [
                "git学习",
                "git",
                "git版本管理"
            ]
        }
    ]
}