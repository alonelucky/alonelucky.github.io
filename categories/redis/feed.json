{
    "version": "https://jsonfeed.org/version/1",
    "title": "小码农博客 • All posts by \"redis\" category",
    "description": null,
    "home_page_url": "http://qiubo.ink",
    "items": [
        {
            "id": "http://qiubo.ink/2020/12/25/redis%E9%98%B2%E6%AD%A2%E8%B6%85%E5%94%AE/",
            "url": "http://qiubo.ink/2020/12/25/redis%E9%98%B2%E6%AD%A2%E8%B6%85%E5%94%AE/",
            "title": "redis防止超售",
            "date_published": "2020-12-25T11:50:23.000Z",
            "content_html": "<p>redis在应用中越来越广泛, 其中常用的大部分操作都是非原子性的, 例如<code>set</code>&#x2F;<code>get</code>&#x2F;<code>hmset</code>…这些会在多个操作时后边的覆写前边的</p>\n<span id=\"more\"></span>\n<h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h3><p>redis在应用中越来越广泛, 其中常用的大部分操作都是非原子性的, 例如<code>set</code>&#x2F;<code>get</code>&#x2F;<code>hmset</code>…这些会在多个操作时后边的覆写前边的, 例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">请求A--&gt;数据库C</span><br><span class=\"line\">更多... --&gt;数据库C</span><br><span class=\"line\">请求B--&gt;数据库C</span><br></pre></td></tr></table></figure>\n<p>请求前后先后进入, 几乎同时抵达数据库, 当<code>A</code>检查时没有请求, <code>B</code>先后到达,也检查到没有请求, 此时向<code>redis</code>写入当前请求信息, A写入,B也写入了, 且会被后写入的覆盖, 无提示, 此时便达不到限制的目的, 而且如果秒杀场景下请求大的情况下, 一下进入的可能销售远远超过库存的数量. </p>\n<p>此时就需要使用redis的原子性操作, 同时只能一个读写, 写入&#x2F;读取有失败提示.<br><code>setnx</code>&#x2F;<code>getset</code></p>\n<blockquote>\n<ul>\n<li><code>setnx Key Value</code> 设置一个键值, 如果同时写入只有一个会成功返回 1, 其余失败返回 0, 满足了并发加锁限制,</li>\n<li><code>getset Key NewValue</code> 获取并设置一个值, 成功会返回当前设置的值,</li>\n</ul>\n</blockquote>\n<p><strong>如果锁已超时，那么锁可能已由其他进程获得，这时直接执行 <code>del Key</code> 操作会导致把其他进程已获得 的锁释放掉</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数封装</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">lockRequest</span>(<span class=\"params\">lockKey</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 加锁, 默认无锁</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 进入加锁, 如果失败循环判断</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> resdis.<span class=\"title function_\">setnx</span>(lockKey, <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() + <span class=\"number\">100</span>&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 1. 加锁是否成功</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> time = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">get</span>(lockKey);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 加锁失败, 检测锁值时间是否小于当前时间,</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> timeout = time - <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 如果小于当前时间, 证明有进程超时, 直接绕过,不等待</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> time = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() + <span class=\"number\">100</span>&#125;</span>&#125;`</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 增加新值并返回旧值, 原子操作, </span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> t = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">getset</span>(lockKey, time);</span><br><span class=\"line\">            <span class=\"comment\">// 3. 如果有值在我们之前操作, 则返回的是前值, 不等于当前值, 继续等待</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() &gt; t) &#123;</span><br><span class=\"line\">                result = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不浪费资源,超时之后再操作, setTimeout实现的会有ms级误差</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"title function_\">sleep</span>(timeout);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span>(!result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h3><p>使用原子增减操作 <code>incrby/decrby</code> , 下单时对数据进行增减, 优势无超长时间等待</p>\n<p>如下: 简略代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Redis</span> =  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ioredis&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> redis = <span class=\"keyword\">new</span> <span class=\"title class_\">Redis</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = <span class=\"string\">&#x27;test:count&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count  = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (req.<span class=\"property\">url</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span>  <span class=\"string\">&#x27;/count&#x27;</span>:</span><br><span class=\"line\">            <span class=\"comment\">// 查询redis库存剩余 =&gt; 实际查询数据库库存剩余即可</span></span><br><span class=\"line\">            count = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">get</span>(key);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/set_count&#x27;</span>:</span><br><span class=\"line\">            <span class=\"comment\">// 设置库存数</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> redis.<span class=\"title function_\">set</span>(key, <span class=\"number\">10</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"attr\">default</span>: <span class=\"comment\">// 抢购逻辑</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> stock = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">get</span>(key);</span><br><span class=\"line\">            <span class=\"comment\">// 1. 查询当前库存, 如果有再进行</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stock &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                res.<span class=\"property\">statusCode</span>  = <span class=\"number\">500</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 模拟下单数量不同</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> num = <span class=\"built_in\">parseInt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">3</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 2. 原子减库存, 如果原子减后小于0, 则返还减量</span></span><br><span class=\"line\">            count = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">decrby</span>(key, num);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2.1 返还库存</span></span><br><span class=\"line\">                <span class=\"keyword\">await</span> redis.<span class=\"title function_\">incrby</span>(key, num);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 可以购买</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;库存: %d, 购买: %d&#x27;</span>, stock, num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>此案例使用 <code>单机redis</code> &#x2F; <code>pm2 start app.js -i 4</code> &#x2F; <code>ab -c 10 -n 100</code> 多进程进行&#x2F;多请求模拟操作. </p>\n<p>示例如下:</p>\n<ol>\n<li>多进程启动<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; pm2 start app.js -i 4</span><br></pre></td></tr></table></figure></li>\n<li><code>ab</code> 工具模拟请求<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; ab -c 10 -n 100 http://127.0.0.1:3000/buy</span><br><span class=\"line\">This is ApacheBench, Version 2.3 &lt;<span class=\"variable\">$Revision</span>: 1843412 $&gt;</span><br><span class=\"line\">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class=\"line\">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class=\"line\"></span><br><span class=\"line\">Benchmarking 127.0.0.1 (be patient).....<span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">Server Software:        </span><br><span class=\"line\">Server Hostname:        127.0.0.1</span><br><span class=\"line\">Server Port:            3000</span><br><span class=\"line\"></span><br><span class=\"line\">Document Path:          /buy/</span><br><span class=\"line\">Document Length:        0 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Concurrency Level:      10</span><br><span class=\"line\">Time taken <span class=\"keyword\">for</span> tests:   0.031 seconds</span><br><span class=\"line\">Complete requests:      100</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Non-2xx responses:      94</span><br><span class=\"line\">Total transferred:      9286 bytes</span><br><span class=\"line\">HTML transferred:       0 bytes</span><br><span class=\"line\">Requests per second:    3180.16 [<span class=\"comment\">#/sec] (mean)</span></span><br><span class=\"line\">Time per request:       3.144 [ms] (mean)</span><br><span class=\"line\">Time per request:       0.314 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          288.39 [Kbytes/sec] received</span><br><span class=\"line\"></span><br><span class=\"line\">Connection Times (ms)</span><br><span class=\"line\">              min  mean[+/-sd] median   max</span><br><span class=\"line\">Connect:        0    0   0.2      0       1</span><br><span class=\"line\">Processing:     1    2   1.4      2       8</span><br><span class=\"line\">Waiting:        1    2   1.2      1       6</span><br><span class=\"line\">Total:          1    3   1.4      2       8</span><br><span class=\"line\"></span><br><span class=\"line\">Percentage of the requests served within a certain time (ms)</span><br><span class=\"line\">  50%      2</span><br><span class=\"line\">  66%      2</span><br><span class=\"line\">  75%      3</span><br><span class=\"line\">  80%      3</span><br><span class=\"line\">  90%      5</span><br><span class=\"line\">  95%      6</span><br><span class=\"line\">  98%      8</span><br><span class=\"line\">  99%      8</span><br><span class=\"line\"> 100%      8 (longest request)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><code>pm2 log app</code> 日志打印<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; pm2 <span class=\"built_in\">log</span> app</span><br><span class=\"line\">...</span><br><span class=\"line\">2|app  | 库存: 10, 购买: 3</span><br><span class=\"line\">2|app  | 库存: 7, 购买: 3</span><br><span class=\"line\">0|app  | 库存: 7, 购买: 1</span><br><span class=\"line\">0|app  | 库存: 7, 购买: 1</span><br><span class=\"line\">0|app  | 库存: 7, 购买: 2</span><br></pre></td></tr></table></figure>\n通过日志打印可以看出, 库存为7的时候, 有4个请求进入, 并且下单成功, 之后便没有了, 保证了库存安全</li>\n<li>查看剩余库存<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; curl http://localhost:3000/count</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "nodejs",
                "redis",
                "并发"
            ]
        }
    ]
}