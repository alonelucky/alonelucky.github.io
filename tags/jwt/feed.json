{
    "version": "https://jsonfeed.org/version/1",
    "title": "小码农博客 • All posts by \"jwt\" tag",
    "description": null,
    "home_page_url": "http://qiubo.ink",
    "items": [
        {
            "id": "http://qiubo.ink/2018/09/14/nodejs%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80%E7%9A%84jwt/",
            "url": "http://qiubo.ink/2018/09/14/nodejs%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80%E7%9A%84jwt/",
            "title": "nodejs实现基础的jwt",
            "date_published": "2018-09-14T11:57:03.000Z",
            "content_html": "<p>手动实现 <code>JSON Web Token</code> 了解 token 验证基本原理</p>\n<span id=\"more\"></span>\n<p>使用模块,nodejs原生模块<br>Crypto</p>\n<h3 id=\"1-实现机制\"><a href=\"#1-实现机制\" class=\"headerlink\" title=\"1. 实现机制\"></a>1. 实现机制</h3><p>JSON Web Token 由三部分组成，头部（Header）、载荷（Payload）与签名（Signature），并由 <code>.</code> 英文点拼接。</p>\n<h6 id=\"1-Header\"><a href=\"#1-Header\" class=\"headerlink\" title=\"1. Header\"></a>1. Header</h6><p>生成jwt头部,声明其类型以及签名所用的算法等的JSON格式,并将其进行base64转码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let jwtHeader = &#123;</span><br><span class=\"line\">    typ:&#x27;JWT&#x27;,</span><br><span class=\"line\">    alg:&#x27;SHA256&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jwtHeader = Buffer.from(JSON.stringify(jwtHeader)).toString(&#x27;base64&#x27;);</span><br><span class=\"line\">// base64</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-Payload\"><a href=\"#2-Payload\" class=\"headerlink\" title=\"2. Payload\"></a>2. Payload</h6><p>生成jwt载荷部分,并将其进行base64转码</p>\n<ul>\n<li><p>iss: 该JWT的签发者，是否使用是可选的；</p>\n</li>\n<li><p>sub: 该JWT所面向的用户，是否使用是可选的；</p>\n</li>\n<li><p>aud: 接收该JWT的一方，是否使用是可选的；</p>\n</li>\n<li><p>exp(expires): 什么时候过期，这里是一个Unix时间戳，是否使用是可选的；</p>\n</li>\n<li><p>iat(issued at): 在什么时候签发的(UNIX时间)，是否使用是可选的；</p>\n</li>\n<li><p>nbf (Not Before)：如果当前时间在nbf里的时间之前，则Token不被接受；一般都会留一些余地，比如几分钟；，是否使用是可选的；</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let jwtPayload = &#123;</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        userId: 123456</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    exp: &#x27;2018-08-01&#x27;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jwtPayload = Buffer.from(JSON.stringify(jwtPayload)).toString(&#x27;base64&#x27;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-Signature\"><a href=\"#3-Signature\" class=\"headerlink\" title=\"3. Signature\"></a>3. Signature</h6><p>将上面的两个编码后的字符串都用句号.连接在一起（头部在前）,并使用sha256及secret对其进行签名处理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const crypto = require(&#x27;crypto&#x27;);</span><br><span class=\"line\">let jwtStr = jwtHeader + &#x27;.&#x27; + jwtPayload;</span><br><span class=\"line\">let jwtSignature = crypto.createHmac(&#x27;sha256&#x27;,&#x27;my secret&#x27;).update(jwtStr).digest(&#x27;base64&#x27;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-jwt\"><a href=\"#4-jwt\" class=\"headerlink\" title=\"4. jwt\"></a>4. jwt</h6><p>将三个部分连接即组成了完整的jwt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let jwtToken = jwtHeader + &#x27;.&#x27; + jwtPayload + &#x27;.&#x27; + jwtSignature;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-jwt解析\"><a href=\"#2-jwt解析\" class=\"headerlink\" title=\"2. jwt解析\"></a>2. jwt解析</h3><p>处理生成 <code>jwt</code> 是需要使用的，生成如上，解析自然也就比较简单</p>\n<h6 id=\"1-校验签名\"><a href=\"#1-校验签名\" class=\"headerlink\" title=\"1. 校验签名\"></a>1. 校验签名</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 拆分jwt</span><br><span class=\"line\">let jwtArr = jwtToken.split(&#x27;.&#x27;);</span><br><span class=\"line\">// 根据头部和载荷验证签名是否匹配</span><br><span class=\"line\">let checkToken = crypto.createHmac(&#x27;sha256&#x27;,&#x27;my secret&#x27;).update(jwtArr[0]+&#x27;.&#x27;+jwtArr[1]).digest(&#x27;base64&#x27;);</span><br><span class=\"line\">checkToken ?= jwtArr[2]</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-解析数据\"><a href=\"#2-解析数据\" class=\"headerlink\" title=\"2. 解析数据\"></a>2. 解析数据</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//　校验签名通过，解析载荷的base64数据</span><br><span class=\"line\">let jwtPayload = JSON.parse(Buffer.from(jwtArr[1],&#x27;base64&#x27;).toString())</span><br></pre></td></tr></table></figure>",
            "tags": [
                "josn web token",
                "jwt"
            ]
        }
    ]
}