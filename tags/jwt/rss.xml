<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>小码农博客 • Posts by &#34;jwt&#34; tag</title>
        <link>http://qiubo.ink</link>
        <description></description>
        <language>ZH-cn</language>
        <pubDate>Fri, 14 Sep 2018 11:57:03 +0000</pubDate>
        <lastBuildDate>Fri, 14 Sep 2018 11:57:03 +0000</lastBuildDate>
        <category>cmder</category>
        <category>git学习</category>
        <category>服务器环境配置mysql</category>
        <category>golang</category>
        <category>mod</category>
        <category>module</category>
        <category>私服</category>
        <category>测试</category>
        <category>string</category>
        <category>linux</category>
        <category>内存</category>
        <category>queue</category>
        <category>笔记</category>
        <category>nats</category>
        <category>nodejs</category>
        <category>git</category>
        <category>git版本管理</category>
        <category>Vscode</category>
        <category>常用插件</category>
        <category>编辑器</category>
        <category>npm</category>
        <category>docker</category>
        <category>frp</category>
        <category>网络</category>
        <category>gulp</category>
        <category>前端自动化</category>
        <category>虚拟主机</category>
        <category>mysql</category>
        <category>数据库</category>
        <category>node操作数据库</category>
        <category>josn web token</category>
        <category>jwt</category>
        <category>redis</category>
        <category>并发</category>
        <category>composer</category>
        <category>php管理</category>
        <category>cli</category>
        <category>openresty</category>
        <category>nginx</category>
        <category>lua</category>
        <category>前端</category>
        <category>响应式图片</category>
        <category>移动端兼容</category>
        <category>wrk</category>
        <category>web</category>
        <category>dart</category>
        <category>算法</category>
        <category>JSON</category>
        <category>XML</category>
        <category>Protobuf</category>
        <category>Msgpack</category>
        <category>CBOR</category>
        <item>
            <guid isPermalink="true">http://qiubo.ink/2018/09/14/nodejs%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80%E7%9A%84jwt/</guid>
            <title>nodejs实现基础的jwt</title>
            <link>http://qiubo.ink/2018/09/14/nodejs%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80%E7%9A%84jwt/</link>
            <category>josn web token</category>
            <category>jwt</category>
            <pubDate>Fri, 14 Sep 2018 11:57:03 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;手动实现 &lt;code&gt;JSON Web Token&lt;/code&gt; 了解 token 验证基本原理&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;使用模块,nodejs原生模块&lt;br&gt;Crypto&lt;/p&gt;
&lt;h3 id=&#34;1-实现机制&#34;&gt;&lt;a href=&#34;#1-实现机制&#34; class=&#34;headerlink&#34; title=&#34;1. 实现机制&#34;&gt;&lt;/a&gt;1. 实现机制&lt;/h3&gt;&lt;p&gt;JSON Web Token 由三部分组成，头部（Header）、载荷（Payload）与签名（Signature），并由 &lt;code&gt;.&lt;/code&gt; 英文点拼接。&lt;/p&gt;
&lt;h6 id=&#34;1-Header&#34;&gt;&lt;a href=&#34;#1-Header&#34; class=&#34;headerlink&#34; title=&#34;1. Header&#34;&gt;&lt;/a&gt;1. Header&lt;/h6&gt;&lt;p&gt;生成jwt头部,声明其类型以及签名所用的算法等的JSON格式,并将其进行base64转码&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let jwtHeader = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    typ:&amp;#x27;JWT&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    alg:&amp;#x27;SHA256&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;jwtHeader = Buffer.from(JSON.stringify(jwtHeader)).toString(&amp;#x27;base64&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// base64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;2-Payload&#34;&gt;&lt;a href=&#34;#2-Payload&#34; class=&#34;headerlink&#34; title=&#34;2. Payload&#34;&gt;&lt;/a&gt;2. Payload&lt;/h6&gt;&lt;p&gt;生成jwt载荷部分,并将其进行base64转码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;iss: 该JWT的签发者，是否使用是可选的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sub: 该JWT所面向的用户，是否使用是可选的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;aud: 接收该JWT的一方，是否使用是可选的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;exp(expires): 什么时候过期，这里是一个Unix时间戳，是否使用是可选的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iat(issued at): 在什么时候签发的(UNIX时间)，是否使用是可选的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nbf (Not Before)：如果当前时间在nbf里的时间之前，则Token不被接受；一般都会留一些余地，比如几分钟；，是否使用是可选的；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let jwtPayload = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        userId: 123456&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    exp: &amp;#x27;2018-08-01&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;jwtPayload = Buffer.from(JSON.stringify(jwtPayload)).toString(&amp;#x27;base64&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;3-Signature&#34;&gt;&lt;a href=&#34;#3-Signature&#34; class=&#34;headerlink&#34; title=&#34;3. Signature&#34;&gt;&lt;/a&gt;3. Signature&lt;/h6&gt;&lt;p&gt;将上面的两个编码后的字符串都用句号.连接在一起（头部在前）,并使用sha256及secret对其进行签名处理&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const crypto = require(&amp;#x27;crypto&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let jwtStr = jwtHeader + &amp;#x27;.&amp;#x27; + jwtPayload;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let jwtSignature = crypto.createHmac(&amp;#x27;sha256&amp;#x27;,&amp;#x27;my secret&amp;#x27;).update(jwtStr).digest(&amp;#x27;base64&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;4-jwt&#34;&gt;&lt;a href=&#34;#4-jwt&#34; class=&#34;headerlink&#34; title=&#34;4. jwt&#34;&gt;&lt;/a&gt;4. jwt&lt;/h6&gt;&lt;p&gt;将三个部分连接即组成了完整的jwt&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let jwtToken = jwtHeader + &amp;#x27;.&amp;#x27; + jwtPayload + &amp;#x27;.&amp;#x27; + jwtSignature;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-jwt解析&#34;&gt;&lt;a href=&#34;#2-jwt解析&#34; class=&#34;headerlink&#34; title=&#34;2. jwt解析&#34;&gt;&lt;/a&gt;2. jwt解析&lt;/h3&gt;&lt;p&gt;处理生成 &lt;code&gt;jwt&lt;/code&gt; 是需要使用的，生成如上，解析自然也就比较简单&lt;/p&gt;
&lt;h6 id=&#34;1-校验签名&#34;&gt;&lt;a href=&#34;#1-校验签名&#34; class=&#34;headerlink&#34; title=&#34;1. 校验签名&#34;&gt;&lt;/a&gt;1. 校验签名&lt;/h6&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 拆分jwt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let jwtArr = jwtToken.split(&amp;#x27;.&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 根据头部和载荷验证签名是否匹配&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let checkToken = crypto.createHmac(&amp;#x27;sha256&amp;#x27;,&amp;#x27;my secret&amp;#x27;).update(jwtArr[0]+&amp;#x27;.&amp;#x27;+jwtArr[1]).digest(&amp;#x27;base64&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;checkToken ?= jwtArr[2]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;2-解析数据&#34;&gt;&lt;a href=&#34;#2-解析数据&#34; class=&#34;headerlink&#34; title=&#34;2. 解析数据&#34;&gt;&lt;/a&gt;2. 解析数据&lt;/h6&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//　校验签名通过，解析载荷的base64数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let jwtPayload = JSON.parse(Buffer.from(jwtArr[1],&amp;#x27;base64&amp;#x27;).toString())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
    </channel>
</rss>
