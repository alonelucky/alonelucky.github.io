{
    "version": "https://jsonfeed.org/version/1",
    "title": "小码农博客 • All posts by \"nodejs\" tag",
    "description": null,
    "home_page_url": "http://qiubo.ink",
    "items": [
        {
            "id": "http://qiubo.ink/2023/03/16/Nodejs-v19-x-%E6%94%AF%E6%8C%81%E6%89%93%E5%8C%85%E5%8F%AF%E6%89%A7%E8%A1%8C%E5%8D%95%E6%96%87%E4%BB%B6/",
            "url": "http://qiubo.ink/2023/03/16/Nodejs-v19-x-%E6%94%AF%E6%8C%81%E6%89%93%E5%8C%85%E5%8F%AF%E6%89%A7%E8%A1%8C%E5%8D%95%E6%96%87%E4%BB%B6/",
            "title": "Nodejs v19.x 支持打包可执行单文件",
            "date_published": "2023-03-16T10:45:34.000Z",
            "content_html": "<p>官方文档：<a href=\"https://nodejs.org/dist/latest-v19.x/docs/api/single-executable-applications.html\">Single executable applications</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"特性介绍：\"><a href=\"#特性介绍：\" class=\"headerlink\" title=\"特性介绍：\"></a>特性介绍：</h2><p>有的语言原生工具链就支持打包单独可执行文件，如：<code>go build</code> <code>dart complite exe</code></p>\n<p>有的有社区解决方案，如：<code>PyInstaller</code> nodejs社区的：<a href=\"https://github.com/vercel/ncc\"><code>ncc</code></a>&#x2F;<a href=\"https://github.com/vercel/pkg\"><code>pkg</code></a></p>\n<p>如今，nodejs 在 v19.x 引入实验性单独可执行文件，提供了官方打包工具链。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>基础环境：安装 Nodejs v19.x 及以上，只有最新版本支持</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  1.创建 js 文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;console.log(`Hello, $&#123;process.argv[2]&#125;!`);&#x27;</span> &gt; hello.js</span><br><span class=\"line\"><span class=\"comment\"># 2. 复制当前版本的 node 二进制文件到当前目录，并重命名为想要的二进制名称</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> $(<span class=\"built_in\">which</span> node) hello</span><br><span class=\"line\"><span class=\"comment\"># 3. 进行打包</span></span><br><span class=\"line\">npx postject hello NODE_JS_CODE hello.js \\</span><br><span class=\"line\">    --sentinel-fuse NODE_JS_FUSE_fce680ab2cc467b6e072b8b5df1996b2 \\</span><br><span class=\"line\">    --macho-segment-name NODE_JS <span class=\"comment\"># 最后一行只有 macos 需要</span></span><br><span class=\"line\"><span class=\"comment\"># 4. 运行可执行文件</span></span><br><span class=\"line\">./hello world</span><br><span class=\"line\">Hello, world!</span><br></pre></td></tr></table></figure>\n<p>以上是官方示例，通过第三步可以看出，实际上是 <a href=\"https://github.com/nodejs/postject\"><code>postject</code></a> 在起作用, 可以自行安装使用</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>目前只能打包一个 js 文件， 与 pkg 是打包一整个文件夹不同，是否就不能应用了呢？顺势可以想到把整个项目打包为单独的 js 文件不就解决了这个问题了吗？这便是 ncc（Compile a Node.js project into a single file. Supports TypeScript, binary addons, dynamic requires.）, 尝试一下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> singleapp</span><br><span class=\"line\"><span class=\"comment\"># 初始化项目</span></span><br><span class=\"line\">npm init</span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">npm i -S express</span><br><span class=\"line\"><span class=\"comment\"># ...创建多文件文件夹及相互依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 ncc 打包单文件， dist/index.js</span></span><br><span class=\"line\">ncc build app.js -o dist</span><br><span class=\"line\"><span class=\"comment\"># 复制当前版本的 node 二进制文件到当前目录，并重命名为想要的二进制名称</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> $(<span class=\"built_in\">which</span> node) singleapp</span><br><span class=\"line\"><span class=\"comment\"># 3. 进行打包</span></span><br><span class=\"line\">npx postject singleapp NODE_JS_CODE dist/index.js \\</span><br><span class=\"line\">    --sentinel-fuse NODE_JS_FUSE_fce680ab2cc467b6e072b8b5df1996b2 \\</span><br><span class=\"line\">    --macho-segment-name NODE_JS <span class=\"comment\"># 最后一行只有 macos 需要</span></span><br><span class=\"line\"><span class=\"comment\"># 4. 运行可执行文件</span></span><br><span class=\"line\">./singleapp</span><br><span class=\"line\">server is running at 127.0.0.1:3000</span><br></pre></td></tr></table></figure>\n<p>由于打包了 nodevm 所以生成的二进制文件会比较大，单文件打包结果是 83Mb，但是 node 二进制原包是 90MB，应该是有压缩，可以使用 <code>upx</code> 进行二进制加壳压缩。</p>\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>Nodejs 多年呼吁的打包功能官方终于开始启动了，还有一些瑕疵，而且实验性功能改动到后边会比较大，可以多多跟进，目前的官方讨论区在</p>\n<ul>\n<li><a href=\"https://github.com/nodejs/single-executable/discussions\">讨论区</a></li>\n<li><a href=\"https://github.com/nodejs/node/issues/43432\">Initiative: Single Executable Application #43432</a></li>\n</ul>\n<p>以前社区百花齐放提供了很多的打包方案，<code>pkg</code>, <code>jsexe</code>, <code>ncc</code>, <code>bytecode</code> 等等，其实 <code>webpack</code> 这些也是可以支持后端项目打包的，也可以打包合并为单独 js 文件，复用 js 打包生态，源码混淆，sourcemap 支持等等</p>\n",
            "tags": [
                "nodejs"
            ]
        },
        {
            "id": "http://qiubo.ink/2021/02/20/%E7%94%A8200%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0web%E6%A1%86%E6%9E%B6/",
            "url": "http://qiubo.ink/2021/02/20/%E7%94%A8200%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0web%E6%A1%86%E6%9E%B6/",
            "title": "用200行代码实现web框架",
            "date_published": "2021-02-20T16:58:31.000Z",
            "content_html": "<p>简化的web框架实现, 实现类似express的函数式路由注册, 支持模糊路由匹配, 支持洋葱中间件模型</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>说明: </p>\n<ol>\n<li>无特殊表达式</li>\n<li>移除类型可以直接作为js使用</li>\n</ol>\n</blockquote>\n<p><a href=\"https://github.com/opentoys/baseweb\">已实现多语言</a> <a href=\"https://github.com/opentoys/singleweb\">单文件版</a></p>\n<p>实现前提:</p>\n<ol>\n<li>ts基本语法</li>\n<li>仅依赖内置<code>http</code>库</li>\n<li>利用 <code>Map</code> 实现路由查找</li>\n</ol>\n<p>实现内容:</p>\n<ol>\n<li>基础服务</li>\n<li>路由查找</li>\n<li>上下文处理</li>\n<li>超时处理</li>\n<li>中间件</li>\n<li>错误处理</li>\n</ol>\n<p>核心内容包含3个类:</p>\n<ol>\n<li>Application</li>\n<li>Router</li>\n<li>Context</li>\n</ol>\n<p>1个额外类型定义</p>\n<ol>\n<li><code>type Handler=(ctx: Context) =&gt; void|Promise&lt;void&gt;</code></li>\n</ol>\n<p>特殊语法介绍:</p>\n<ol>\n<li>自定义类型 <code>type a=()=&gt;void</code> </li>\n<li>空值判断 <code>var a = id ?? 0</code></li>\n<li>可选参数 <code>function(a?:any)</code></li>\n<li>解构参数 <code>function(...arr: string[])</code></li>\n</ol>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><h4 id=\"1-Router\"><a href=\"#1-Router\" class=\"headerlink\" title=\"1. Router\"></a>1. Router</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Handler</span>=<span class=\"function\">(<span class=\"params\">ctx: Context</span>) =&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt; | <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Router</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认路由</span></span><br><span class=\"line\">    <span class=\"attr\">uri</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 子级路由</span></span><br><span class=\"line\">    <span class=\"attr\">childrenRoute</span>:<span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">Router</span>&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">Router</span>&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 中间件处理函数</span></span><br><span class=\"line\">    <span class=\"attr\">middleware</span>:<span class=\"title class_\">Handler</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">u: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">uri</span> = u ?? <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 挂载自定义路由</span></span><br><span class=\"line\">    <span class=\"title function_\">hook</span>(<span class=\"params\">r: Router</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">childrenRoute</span>.<span class=\"title function_\">set</span>(r.<span class=\"property\">uri</span>, r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 挂载中间件</span></span><br><span class=\"line\">    <span class=\"title function_\">use</span>(<span class=\"params\">...a:Handler[]</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>.<span class=\"title function_\">push</span>(...a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// get请求</span></span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\">uri: <span class=\"built_in\">string</span>, ...params: Handler[]</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">any</span>(<span class=\"string\">&#x27;GET&#x27;</span>, uri, ...params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认路由加载</span></span><br><span class=\"line\">    <span class=\"title function_\">any</span>(<span class=\"params\">method: <span class=\"built_in\">string</span>, uri: <span class=\"built_in\">string</span>, ...handler: Handler[]</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (uri.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;/&#x27;</span>) == <span class=\"number\">0</span>) uri = uri.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> uris = uri.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">r</span>: <span class=\"title class_\">Router</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果添加的为多级路由, 则拆分挂载</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> u <span class=\"keyword\">of</span> uris) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> nr = <span class=\"keyword\">new</span> <span class=\"title class_\">Router</span>(u);</span><br><span class=\"line\">            r.<span class=\"property\">childrenRoute</span>.<span class=\"title function_\">set</span>(u, nr);</span><br><span class=\"line\">            r = nr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        r.<span class=\"property\">middleware</span>.<span class=\"title function_\">push</span>(...handler);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 路由分组</span></span><br><span class=\"line\">    <span class=\"title function_\">group</span>(<span class=\"params\">prefix: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">any</span>(<span class=\"string\">&#x27;ANY&#x27;</span>, prefix);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 分组函数别名</span></span><br><span class=\"line\">    <span class=\"title function_\">prefix</span>(<span class=\"params\">prefix: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">any</span>(<span class=\"string\">&#x27;ANY&#x27;</span>, prefix);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 实现路由查找及执行</span></span><br><span class=\"line\">    <span class=\"title function_\">find</span>(<span class=\"params\">ctx: Context, uris?: <span class=\"built_in\">string</span>[]</span>) &#123;</span><br><span class=\"line\">        uris = uris ?? ctx.<span class=\"property\">url</span>.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">r</span>: <span class=\"title class_\">Router</span>|<span class=\"literal\">null</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        ctx.<span class=\"property\">middleware</span>.<span class=\"title function_\">push</span>(...r?.<span class=\"property\">middleware</span> ?? []);</span><br><span class=\"line\">        <span class=\"comment\">// 查询递归执行子路由</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> uris) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 查询下一级路由</span></span><br><span class=\"line\">            r = r?.<span class=\"property\">childrenRoute</span>.<span class=\"title function_\">get</span>(uris[i]) ?? <span class=\"literal\">null</span>;</span><br><span class=\"line\">            ctx.<span class=\"property\">middleware</span>.<span class=\"title function_\">push</span>(...r?.<span class=\"property\">middleware</span> ?? []);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有查到最后的路由, 手动添加404处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!r) ctx.<span class=\"property\">middleware</span>.<span class=\"title function_\">push</span>(<span class=\"keyword\">async</span> (ctx) =&gt; &#123;</span><br><span class=\"line\">            ctx.<span class=\"property\">statusCode</span> = <span class=\"number\">404</span>;</span><br><span class=\"line\">            ctx.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Not found&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 开始依次执行中间件</span></span><br><span class=\"line\">        ctx.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Application\"><a href=\"#2-Application\" class=\"headerlink\" title=\"2. Application\"></a>2. Application</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 核心app类继承路由, 即为全局根路由</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Router</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">server</span>: http.<span class=\"property\">Server</span>;</span><br><span class=\"line\">    <span class=\"attr\">timeout</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attr\">errorHandler</span>: <span class=\"function\">(<span class=\"params\">err: <span class=\"built_in\">Error</span>, ctx: Context</span>) =&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt;;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化根路由</span></span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 默认错误处理函数</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">errorHandler</span> = <span class=\"keyword\">async</span> (err, ctx) =&gt; &#123;</span><br><span class=\"line\">            ctx.<span class=\"property\">statusCode</span> = <span class=\"number\">500</span>;</span><br><span class=\"line\">            ctx.<span class=\"title function_\">send</span>(err.<span class=\"property\">stack</span> ?? <span class=\"string\">&#x27;server error&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 创建服务</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">server</span> = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 初始化上下文</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> ctx = <span class=\"keyword\">new</span> <span class=\"title class_\">Context</span>(req, res);</span><br><span class=\"line\">            <span class=\"comment\">// 绑定处理函数</span></span><br><span class=\"line\">            ctx.<span class=\"property\">errorHandler</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">errorHandler</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 设置超时</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">timeout</span> &gt; <span class=\"number\">0</span>) ctx.<span class=\"title function_\">timeout</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timeout</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 路由查找处理</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">find</span>(ctx);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 监听</span></span><br><span class=\"line\">    <span class=\"title function_\">listen</span>(<span class=\"params\">addr: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">server</span>.<span class=\"title function_\">listen</span>(addr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Context\"><a href=\"#3-Context\" class=\"headerlink\" title=\"3. Context\"></a>3. Context</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> http <span class=\"keyword\">from</span> <span class=\"string\">&#x27;http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Context</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 原生请求</span></span><br><span class=\"line\">    <span class=\"attr\">request</span>: http.<span class=\"property\">IncomingMessage</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 原生响应</span></span><br><span class=\"line\">    <span class=\"attr\">response</span>: http.<span class=\"property\">ServerResponse</span>;</span><br><span class=\"line\">    <span class=\"attr\">query</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    <span class=\"attr\">body</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 是否已返回请求</span></span><br><span class=\"line\">    <span class=\"attr\">isEnd</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 中间件执行计数</span></span><br><span class=\"line\">    <span class=\"attr\">nextInx</span>: <span class=\"built_in\">number</span> = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 设置响应码</span></span><br><span class=\"line\">    <span class=\"attr\">statusCode</span>:<span class=\"built_in\">number</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 当前路由的全部执行函数</span></span><br><span class=\"line\">    <span class=\"attr\">middleware</span>:<span class=\"title class_\">Handler</span>[] = [];</span><br><span class=\"line\">    <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">    <span class=\"attr\">errorHandler</span>: <span class=\"function\">(<span class=\"params\">err: <span class=\"built_in\">Error</span>, ctx: Context</span>) =&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt;;</span><br><span class=\"line\">    <span class=\"attr\">responseHeader</span>: <span class=\"title class_\">Map</span>&lt;<span class=\"title class_\">String</span>, <span class=\"built_in\">string</span>&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"title class_\">String</span>, <span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 初始化上下文</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">req: http.IncomingMessage, res: http.ServerResponse</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">request</span> = req;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span> = res;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> = req.<span class=\"property\">url</span> ?? <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">method</span> = req.<span class=\"property\">method</span>?.<span class=\"title function_\">toLocaleUpperCase</span>() ?? <span class=\"string\">&quot;GET&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">errorHandler</span> = <span class=\"keyword\">async</span> (err, ctx) =&gt; &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 超时处理</span></span><br><span class=\"line\">    <span class=\"title function_\">timeout</span>(<span class=\"params\">time: <span class=\"built_in\">number</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (time &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">statusCode</span> = <span class=\"number\">500</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;server timeout&quot;</span>);</span><br><span class=\"line\">        &#125;, time);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 下一次执行原理</span></span><br><span class=\"line\">    <span class=\"title function_\">next</span>(<span class=\"params\">info?: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果next有内容, 则证明有显式错误, 及时处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (info) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">nextInx</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>.<span class=\"property\">length</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">errorHandler</span>(info, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">nextInx</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果计数结束/响应结束, 则终止中间件执行</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nextInx</span> &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>.<span class=\"property\">length</span> || <span class=\"variable language_\">this</span>.<span class=\"property\">isEnd</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 防止中间件错误</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">nextInx</span>](<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">nextInx</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>.<span class=\"property\">length</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">errorHandler</span>(err, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 响应封装</span></span><br><span class=\"line\">    <span class=\"title function_\">send</span>(<span class=\"params\">str: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isEnd</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/plain; charset=utf-8&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> <span class=\"variable language_\">this</span>.<span class=\"property\">responseHeader</span>.<span class=\"title function_\">keys</span>()) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">setHeader</span>(key, <span class=\"variable language_\">this</span>.<span class=\"property\">responseHeader</span>.<span class=\"title function_\">get</span>(key) ?? <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"property\">statusCode</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">statusCode</span> || <span class=\"number\">200</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">write</span>(str);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">isEnd</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">json</span>(<span class=\"params\">str: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isEnd</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/json; charset=utf-8&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> <span class=\"variable language_\">this</span>.<span class=\"property\">responseHeader</span>.<span class=\"title function_\">keys</span>()) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">setHeader</span>(key, <span class=\"variable language_\">this</span>.<span class=\"property\">responseHeader</span>.<span class=\"title function_\">get</span>(key) ?? <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"property\">statusCode</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">statusCode</span> || <span class=\"number\">200</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">write</span>(str);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">isEnd</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">setHeader</span>(<span class=\"params\">key: <span class=\"built_in\">string</span>, value: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">responseHeader</span>.<span class=\"title function_\">set</span>(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">Application</span>();</span><br><span class=\"line\">    root.<span class=\"title function_\">use</span>(<span class=\"keyword\">async</span> (ctx)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello middleware&quot;</span>);</span><br><span class=\"line\">        ctx.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> api = root.<span class=\"title function_\">group</span>(<span class=\"string\">&#x27;/api&#x27;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    api.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/user&quot;</span>, <span class=\"function\">(<span class=\"params\">ctx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        ctx.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;hello ctx&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> apiPrefix = api.<span class=\"title function_\">prefix</span>(<span class=\"string\">&quot;/prefix&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 中间件及执行顺序</span></span><br><span class=\"line\">    apiPrefix.<span class=\"title function_\">use</span>(<span class=\"keyword\">async</span> (ctx) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello next&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// ctx.json(`&#123;&quot;status&quot;: 200&#125;`)</span></span><br><span class=\"line\">        ctx.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello next end&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 测试执行顺序</span></span><br><span class=\"line\">    apiPrefix.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/hello&quot;</span>, <span class=\"keyword\">async</span> (ctx) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello prefix start&quot;</span>);</span><br><span class=\"line\">        ctx.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;hello prefix ctx&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello prefix end&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 测试超时</span></span><br><span class=\"line\">    apiPrefix.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/timeout&quot;</span>, <span class=\"keyword\">async</span> (ctx) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello timeout start&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 测试错误捕获</span></span><br><span class=\"line\">    apiPrefix.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/error&quot;</span>, <span class=\"keyword\">async</span> (ctx) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello error start&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 测试hook</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> r = <span class=\"keyword\">new</span> <span class=\"title class_\">Router</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    root.<span class=\"title function_\">hook</span>(r);</span><br><span class=\"line\">    </span><br><span class=\"line\">    root.<span class=\"property\">errorHandler</span> = <span class=\"keyword\">async</span> (err, ctx) =&gt; &#123;</span><br><span class=\"line\">        ctx.<span class=\"property\">statusCode</span> = <span class=\"number\">500</span>;</span><br><span class=\"line\">        ctx.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;server hello error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.<span class=\"title function_\">listen</span>(<span class=\"string\">&#x27;12345&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">main</span>();</span><br></pre></td></tr></table></figure>",
            "tags": [
                "golang",
                "nodejs",
                "web",
                "dart"
            ]
        },
        {
            "id": "http://qiubo.ink/2020/12/25/redis%E9%98%B2%E6%AD%A2%E8%B6%85%E5%94%AE/",
            "url": "http://qiubo.ink/2020/12/25/redis%E9%98%B2%E6%AD%A2%E8%B6%85%E5%94%AE/",
            "title": "redis防止超售",
            "date_published": "2020-12-25T11:50:23.000Z",
            "content_html": "<p>redis在应用中越来越广泛, 其中常用的大部分操作都是非原子性的, 例如<code>set</code>&#x2F;<code>get</code>&#x2F;<code>hmset</code>…这些会在多个操作时后边的覆写前边的</p>\n<span id=\"more\"></span>\n<h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h3><p>redis在应用中越来越广泛, 其中常用的大部分操作都是非原子性的, 例如<code>set</code>&#x2F;<code>get</code>&#x2F;<code>hmset</code>…这些会在多个操作时后边的覆写前边的, 例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">请求A--&gt;数据库C</span><br><span class=\"line\">更多... --&gt;数据库C</span><br><span class=\"line\">请求B--&gt;数据库C</span><br></pre></td></tr></table></figure>\n<p>请求前后先后进入, 几乎同时抵达数据库, 当<code>A</code>检查时没有请求, <code>B</code>先后到达,也检查到没有请求, 此时向<code>redis</code>写入当前请求信息, A写入,B也写入了, 且会被后写入的覆盖, 无提示, 此时便达不到限制的目的, 而且如果秒杀场景下请求大的情况下, 一下进入的可能销售远远超过库存的数量. </p>\n<p>此时就需要使用redis的原子性操作, 同时只能一个读写, 写入&#x2F;读取有失败提示.<br><code>setnx</code>&#x2F;<code>getset</code></p>\n<blockquote>\n<ul>\n<li><code>setnx Key Value</code> 设置一个键值, 如果同时写入只有一个会成功返回 1, 其余失败返回 0, 满足了并发加锁限制,</li>\n<li><code>getset Key NewValue</code> 获取并设置一个值, 成功会返回当前设置的值,</li>\n</ul>\n</blockquote>\n<p><strong>如果锁已超时，那么锁可能已由其他进程获得，这时直接执行 <code>del Key</code> 操作会导致把其他进程已获得 的锁释放掉</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数封装</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">lockRequest</span>(<span class=\"params\">lockKey</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 加锁, 默认无锁</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 进入加锁, 如果失败循环判断</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> resdis.<span class=\"title function_\">setnx</span>(lockKey, <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() + <span class=\"number\">100</span>&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 1. 加锁是否成功</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> time = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">get</span>(lockKey);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 加锁失败, 检测锁值时间是否小于当前时间,</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> timeout = time - <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 如果小于当前时间, 证明有进程超时, 直接绕过,不等待</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> time = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() + <span class=\"number\">100</span>&#125;</span>&#125;`</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 增加新值并返回旧值, 原子操作, </span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> t = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">getset</span>(lockKey, time);</span><br><span class=\"line\">            <span class=\"comment\">// 3. 如果有值在我们之前操作, 则返回的是前值, 不等于当前值, 继续等待</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() &gt; t) &#123;</span><br><span class=\"line\">                result = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不浪费资源,超时之后再操作, setTimeout实现的会有ms级误差</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"title function_\">sleep</span>(timeout);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span>(!result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h3><p>使用原子增减操作 <code>incrby/decrby</code> , 下单时对数据进行增减, 优势无超长时间等待</p>\n<p>如下: 简略代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Redis</span> =  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ioredis&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> redis = <span class=\"keyword\">new</span> <span class=\"title class_\">Redis</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = <span class=\"string\">&#x27;test:count&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count  = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (req.<span class=\"property\">url</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span>  <span class=\"string\">&#x27;/count&#x27;</span>:</span><br><span class=\"line\">            <span class=\"comment\">// 查询redis库存剩余 =&gt; 实际查询数据库库存剩余即可</span></span><br><span class=\"line\">            count = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">get</span>(key);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/set_count&#x27;</span>:</span><br><span class=\"line\">            <span class=\"comment\">// 设置库存数</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> redis.<span class=\"title function_\">set</span>(key, <span class=\"number\">10</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"attr\">default</span>: <span class=\"comment\">// 抢购逻辑</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> stock = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">get</span>(key);</span><br><span class=\"line\">            <span class=\"comment\">// 1. 查询当前库存, 如果有再进行</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stock &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                res.<span class=\"property\">statusCode</span>  = <span class=\"number\">500</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 模拟下单数量不同</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> num = <span class=\"built_in\">parseInt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">3</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 2. 原子减库存, 如果原子减后小于0, 则返还减量</span></span><br><span class=\"line\">            count = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">decrby</span>(key, num);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2.1 返还库存</span></span><br><span class=\"line\">                <span class=\"keyword\">await</span> redis.<span class=\"title function_\">incrby</span>(key, num);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 可以购买</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;库存: %d, 购买: %d&#x27;</span>, stock, num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>此案例使用 <code>单机redis</code> &#x2F; <code>pm2 start app.js -i 4</code> &#x2F; <code>ab -c 10 -n 100</code> 多进程进行&#x2F;多请求模拟操作. </p>\n<p>示例如下:</p>\n<ol>\n<li>多进程启动<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; pm2 start app.js -i 4</span><br></pre></td></tr></table></figure></li>\n<li><code>ab</code> 工具模拟请求<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; ab -c 10 -n 100 http://127.0.0.1:3000/buy</span><br><span class=\"line\">This is ApacheBench, Version 2.3 &lt;<span class=\"variable\">$Revision</span>: 1843412 $&gt;</span><br><span class=\"line\">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class=\"line\">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class=\"line\"></span><br><span class=\"line\">Benchmarking 127.0.0.1 (be patient).....<span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">Server Software:        </span><br><span class=\"line\">Server Hostname:        127.0.0.1</span><br><span class=\"line\">Server Port:            3000</span><br><span class=\"line\"></span><br><span class=\"line\">Document Path:          /buy/</span><br><span class=\"line\">Document Length:        0 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Concurrency Level:      10</span><br><span class=\"line\">Time taken <span class=\"keyword\">for</span> tests:   0.031 seconds</span><br><span class=\"line\">Complete requests:      100</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Non-2xx responses:      94</span><br><span class=\"line\">Total transferred:      9286 bytes</span><br><span class=\"line\">HTML transferred:       0 bytes</span><br><span class=\"line\">Requests per second:    3180.16 [<span class=\"comment\">#/sec] (mean)</span></span><br><span class=\"line\">Time per request:       3.144 [ms] (mean)</span><br><span class=\"line\">Time per request:       0.314 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          288.39 [Kbytes/sec] received</span><br><span class=\"line\"></span><br><span class=\"line\">Connection Times (ms)</span><br><span class=\"line\">              min  mean[+/-sd] median   max</span><br><span class=\"line\">Connect:        0    0   0.2      0       1</span><br><span class=\"line\">Processing:     1    2   1.4      2       8</span><br><span class=\"line\">Waiting:        1    2   1.2      1       6</span><br><span class=\"line\">Total:          1    3   1.4      2       8</span><br><span class=\"line\"></span><br><span class=\"line\">Percentage of the requests served within a certain time (ms)</span><br><span class=\"line\">  50%      2</span><br><span class=\"line\">  66%      2</span><br><span class=\"line\">  75%      3</span><br><span class=\"line\">  80%      3</span><br><span class=\"line\">  90%      5</span><br><span class=\"line\">  95%      6</span><br><span class=\"line\">  98%      8</span><br><span class=\"line\">  99%      8</span><br><span class=\"line\"> 100%      8 (longest request)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><code>pm2 log app</code> 日志打印<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; pm2 <span class=\"built_in\">log</span> app</span><br><span class=\"line\">...</span><br><span class=\"line\">2|app  | 库存: 10, 购买: 3</span><br><span class=\"line\">2|app  | 库存: 7, 购买: 3</span><br><span class=\"line\">0|app  | 库存: 7, 购买: 1</span><br><span class=\"line\">0|app  | 库存: 7, 购买: 1</span><br><span class=\"line\">0|app  | 库存: 7, 购买: 2</span><br></pre></td></tr></table></figure>\n通过日志打印可以看出, 库存为7的时候, 有4个请求进入, 并且下单成功, 之后便没有了, 保证了库存安全</li>\n<li>查看剩余库存<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; curl http://localhost:3000/count</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "nodejs",
                "redis",
                "并发"
            ]
        },
        {
            "id": "http://qiubo.ink/2018/09/14/%E4%BD%BF%E7%94%A8nodejs%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/",
            "url": "http://qiubo.ink/2018/09/14/%E4%BD%BF%E7%94%A8nodejs%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/",
            "title": "使用nodejs创建自己的自动化工具",
            "date_published": "2018-09-14T12:00:07.000Z",
            "content_html": "<p>nodejs能方便的进行前端的文件压缩结合等等,自动化操作,但是经常使用的我们,是不是也能方便的建立自己的自动化部署工具呢?比如:经常从头建立的文件夹模式,千篇一律的index.html等等</p>\n<span id=\"more\"></span>\n<h3 id=\"开发步骤\"><a href=\"#开发步骤\" class=\"headerlink\" title=\"开发步骤\"></a>开发步骤</h3><h6 id=\"1-安装nodejs环境\"><a href=\"#1-安装nodejs环境\" class=\"headerlink\" title=\"1. 安装nodejs环境\"></a>1. 安装nodejs环境</h6><p>从<a href=\"https://nodejs.org/\">官网</a>或<a href=\"https://nodejs.cn/\">中文官网</a>下载nodejs的安装包,参照网上的安装方法安装好nodejs环境,</p>\n<p>此处不是介绍nodejs,,因此不介绍如何安装</p>\n<h6 id=\"2-创建项目\"><a href=\"#2-创建项目\" class=\"headerlink\" title=\"2. 创建项目\"></a>2. 创建项目</h6><p>创建项目文件夹,进入并执行npm init,如下图 <a href=\"https://github.com/xiaqiubo/nodejs-traning/blob/master/course/imgs/20171031/01.png\"><img src=\"https://github.com/xiaqiubo/nodejs-traning/raw/master/course/imgs/20171031/01.png\"></a></p>\n<p>如下信息是需要填写的 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package name: (jiaocheng)</span><br><span class=\"line\">version: (1.0.0) 0.1.0</span><br><span class=\"line\">description: 自制自动化工具</span><br><span class=\"line\">entry point: (index.js)</span><br><span class=\"line\"><span class=\"built_in\">test</span> <span class=\"built_in\">command</span>:</span><br><span class=\"line\">git repository:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: xiaoxia</span><br><span class=\"line\">license: (ISC)</span><br></pre></td></tr></table></figure>\n<p>在最后生成的package.json中增加一项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"string\">&quot;bin&quot;</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;jiaocheng&quot;</span>:<span class=\"string\">&quot;index.js&quot;</span>\t</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>bin为可执行命令,<code>jiaocheng</code>为执行命令,<code>index.js</code>为命令执行文件入口</p>\n<p>然后执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">link</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/xiaqiubo/nodejs-traning/blob/master/course/imgs/20171031/04.png\"><img src=\"https://github.com/xiaqiubo/nodejs-traning/raw/master/course/imgs/20171031/04.png\"></a>此命令向系统增加一条软连接(可以理解为快捷方式)引用,方便使用当前项目的 bin 命令(便于本地调试)</p>\n<h6 id=\"3-创建index-js-入口文件\"><a href=\"#3-创建index-js-入口文件\" class=\"headerlink\" title=\"3. 创建index.js,入口文件\"></a>3. 创建index.js,入口文件</h6><p>一定要在顶部加上 <code>#!/usr/bin/env node</code> 声明,该文件使用环境变量 node 调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>如图 :</p>\n<p><a href=\"https://github.com/xiaqiubo/nodejs-traning/blob/master/course/imgs/20171031/02.png\"><img src=\"https://github.com/xiaqiubo/nodejs-traning/raw/master/course/imgs/20171031/02.png\"></a></p>\n<p>然后打开cmd窗口,输入 <code>jiaocheng</code> 回车,输出如下图</p>\n<p><a href=\"https://github.com/xiaqiubo/nodejs-traning/blob/master/course/imgs/20171031/03.png\"><img src=\"https://github.com/xiaqiubo/nodejs-traning/raw/master/course/imgs/20171031/03.png\"></a></p>\n<h6 id=\"4-项目依赖选择\"><a href=\"#4-项目依赖选择\" class=\"headerlink\" title=\"4. 项目依赖选择\"></a>4. 项目依赖选择</h6><p>此时已经基本成型了,你可以执行命令做一些你想做的事情,也可以自己处理一些 process 变量</p>\n<p>常用的nodejs自带 process属性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.argv\t\t<span class=\"comment\"># \t获取传入参数</span></span><br><span class=\"line\">process.cwd()\t\t<span class=\"comment\">#\t获取当前命令执行所在目录</span></span><br><span class=\"line\">process.env\t\t\t<span class=\"comment\">#\t获取当前系统用户的环境变量</span></span><br><span class=\"line\">process.pid\t\t\t<span class=\"comment\">#\t获取当前进程的pid</span></span><br><span class=\"line\">process.platform\t<span class=\"comment\">#\t获取当前运行的平台(系统)</span></span><br><span class=\"line\">process.stdin\t\t<span class=\"comment\">#\t输入</span></span><br><span class=\"line\">process.stdout\t\t<span class=\"comment\"># \t输出</span></span><br><span class=\"line\">process.versions\t<span class=\"comment\">#\t当前nodejs环境所有版本信息</span></span><br></pre></td></tr></table></figure>\n<p>常用模块推荐 (持续更新中):</p>\n<p>commander \t#\t作者Tj用于自动生成命令参数获取,单包无依赖</p>\n<p>commander 链接及使用看<a href=\"https://npmjs.com/package/commander\">npmjs</a>介绍或者<a href=\"https://github.com/tj/commander.js\">github</a>介绍即可</p>\n<h3 id=\"模块发布\"><a href=\"#模块发布\" class=\"headerlink\" title=\"模块发布\"></a>模块发布</h3><hr>\n<h6 id=\"5-注册npmjs账号\"><a href=\"#5-注册npmjs账号\" class=\"headerlink\" title=\"5. 注册npmjs账号\"></a>5. 注册npmjs账号</h6><p>到<a href=\"https://www.npmjs.com/signup\">npmjs官网注册</a>一个npmjs账号,用于发布自己的模块</p>\n<h6 id=\"6-登录npmjs并发布自己的模块\"><a href=\"#6-登录npmjs并发布自己的模块\" class=\"headerlink\" title=\"6. 登录npmjs并发布自己的模块\"></a>6. 登录npmjs并发布自己的模块</h6><p>模块按照上面的步骤开发,注册过账号后就可以发布自己的模块了,此处的登录不是在网页上的登录,而是在命令行下执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n<p>会提示输入账号密码,输入注册的账号密码即可</p>\n<p>登录成功后,到项目目录下,执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n<p>片刻后便会执行成功</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>部分开发者习惯将npm镜像修改为国内的cnpm.js淘宝镜像,在发布包的时候记得将镜像切换回官方 <a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a></li>\n</ol>\n<p>可以执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config list</span><br></pre></td></tr></table></figure>\n<p>查看是否替换</p>\n<ol start=\"2\">\n<li>发布的npm模块名称必须为全小写,不支持大小驼峰名称,一般修改为英文中横线</li>\n</ol>\n",
            "tags": [
                "nodejs",
                "cli"
            ]
        },
        {
            "id": "http://qiubo.ink/2017/05/12/node-mysql%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/",
            "url": "http://qiubo.ink/2017/05/12/node-mysql%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/",
            "title": "node-mysql基础操作",
            "date_published": "2017-05-12T17:47:06.000Z",
            "content_html": "<h4 id=\"1-安装mysql模块\"><a href=\"#1-安装mysql模块\" class=\"headerlink\" title=\"1. 安装mysql模块\"></a>1. 安装mysql模块</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mysql --save</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-创建mysql-js\"><a href=\"#2-创建mysql-js\" class=\"headerlink\" title=\"2. 创建mysql.js\"></a>2. 创建mysql.js</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql = require(&#x27;mysql&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">var connection = mysql.createConnection(&#123;</span><br><span class=\"line\">    host:&#x27;localhost&#x27;,</span><br><span class=\"line\">    user:&#x27;root&#x27;,</span><br><span class=\"line\">    password:&#x27;root&#x27;,</span><br><span class=\"line\">    database:&#x27;node&#x27;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>利用mysql模块的createConnection函数,配置好相应参数即可连接mysql数据库,</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connection.connect();</span><br><span class=\"line\">console.log(&#x27;数据库连接成功&#x27;);</span><br></pre></td></tr></table></figure>\n<p>建立连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connection.query(sql,function(err,res)&#123;</span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        console.log(err);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        console.log(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>运行sql语句,返回数据信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connection.end();</span><br><span class=\"line\">console.log(&#x27;数据库关闭&#x27;);</span><br></pre></td></tr></table></figure>\n<p>关闭数据库连接</p>\n",
            "tags": [
                "nodejs",
                "mysql",
                "node操作数据库"
            ]
        },
        {
            "id": "http://qiubo.ink/2016/12/26/linux%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85nodejs/",
            "url": "http://qiubo.ink/2016/12/26/linux%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85nodejs/",
            "title": "linux下配置安装nodejs",
            "date_published": "2016-12-26T11:29:20.000Z",
            "content_html": "<h2 id=\"linux下配置安装nodejs\"><a href=\"#linux下配置安装nodejs\" class=\"headerlink\" title=\"linux下配置安装nodejs\"></a>linux下配置安装nodejs</h2><p>（非广告）virmach 美国VPS主机 <code>7.5刀/年</code>（折合软妹币52.129；按软妹付款为54多）， 配置如下：</p>\n<table>\n<thead>\n<tr>\n<th>CPU</th>\n<th>RAM</th>\n<th>硬盘</th>\n<th>带宽&#x2F;流量</th>\n<th>IP</th>\n<th>DDoS保护</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1核</td>\n<td>128M</td>\n<td>10G SSD</td>\n<td>1Gbps&#x2F;250Gbp</td>\n<td>一个</td>\n<td>10Gbps</td>\n</tr>\n</tbody></table>\n<p>个人觉得还可以，就买了一个练习配置，因为内存不大，所以打算配置nodejs练练手，就当学习了。下边是linux配置，非购买使用流程。</p>\n<ol>\n<li>根据提供的IP:22使用putty链接</li>\n<li>用户名root 密码***** <img src=\"http://xiaqiubo.top/wp-content/uploads/2017/02/virmach001-300x188.png\"></li>\n<li>该主机自带了python2.7.3 <img src=\"http://xiaqiubo.top/wp-content/uploads/2017/02/virmach002-300x42.png\"></li>\n<li>于是安装node就省去了很大一步（注：还得在本地虚拟机从零测试安装） <code>cd /usr/local/</code> 在这个文件夹下（当然哪个文件夹都可以），下载nodejs资源包 本来想服务器在国外，下载国外的node资源应该不错，</li>\n</ol>\n<ul>\n<li>于是乎找到下载地址（官网的） <a href=\"https://nodejs.org/dist/v6.9.2/node-v6.9.2-linux-x86.tar.xz\">https://nodejs.org/dist/v6.9.2/node-v6.9.2-linux-x86.tar.xz</a> </li>\n<li>运行 <code>wget --no-check-certificate https://nodejs.org/dist/v6.9.2/node-v6.9.2-linux-x86.tar.xz</code> no-check-certificate是阻止wget下载前验证 下载成功 ，而且网速还不错<br><img src=\"http://xiaqiubo.top/wp-content/uploads/2017/02/virmach003-300x188.png\"> </li>\n<li>解压 <code>tar node-v6.9.2-linux-x86.tar.xz</code> (已解决使用xz命令解压缩  2016-12-26) 格式错误。于是只能拐回国内链接 </li>\n<li>同样运行 <code>wget --no-check-certificate https://nodejs.org/dist/v6.2.0/node-v6.2.0-linux-x86.tar.gz</code>          <br><img src=\"http://xiaqiubo.top/wp-content/uploads/2017/02/virmach004-300x189.png\"> 下载成功，网速依旧。</li>\n<li>解压 <code>tar node-v6.9.2-linux-x86.tar.xz</code></li>\n</ul>\n<ol start=\"5\">\n<li>解压文件包并重命名文件夹（详情搜索mv命令） <code>mv node-v6.9.2-linux-x86 node</code></li>\n<li>配置临时环境变量 <code>export PATH=/usr/local/python/bin:/usr/local/node/bin:$PATH</code> 该环境变量为临时变量，关闭ssh窗口即失效 所以需要配置永久环境变量，修改etc&#x2F;profile文件</li>\n<li>编辑添加全局环境变量 <code>vim /etc/profile</code><br>   <img src=\"http://xiaqiubo.top/wp-content/uploads/2017/02/virmach005-300x188.png\"> 增加变量路径 <code>:wq</code>保存退出</li>\n<li>node环境配置成功<br>   <img src=\"http://xiaqiubo.top/wp-content/uploads/2017/02/virmach006-300x48.png\"></li>\n</ol>\n<p>剩下的后期继续更新。</p>\n",
            "tags": [
                "linux",
                "nodejs",
                "虚拟主机"
            ]
        },
        {
            "id": "http://qiubo.ink/2016/12/08/gulp%E5%88%9D%E4%BD%93%E9%AA%8C/",
            "url": "http://qiubo.ink/2016/12/08/gulp%E5%88%9D%E4%BD%93%E9%AA%8C/",
            "title": "gulp初体验",
            "date_published": "2016-12-08T12:09:12.000Z",
            "content_html": "<p>在云IDEcloud9中体验测试了gulp</p>\n<h4 id=\"1-首先npm-install-gulp-g\"><a href=\"#1-首先npm-install-gulp-g\" class=\"headerlink\" title=\"1. 首先npm install gulp -g\"></a>1. 首先npm install gulp -g</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp --save-dev 全局和项目安装gulp</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-测试项目为压缩文件和修改文件名称\"><a href=\"#2-测试项目为压缩文件和修改文件名称\" class=\"headerlink\" title=\"2. 测试项目为压缩文件和修改文件名称\"></a>2. 测试项目为压缩文件和修改文件名称</h4><p>安装gulp依赖项</p>\n<p>| 名称 | 含义 |<br>|gulp-minify|压缩css文件|<br>|gulp-uglify|压缩js文件|<br>|gulp-concat|合并文件|<br>|gulp-rename|修改文件或文件夹名称|</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-minify --save-dev</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-创建gulpfile-js文件\"><a href=\"#3-创建gulpfile-js文件\" class=\"headerlink\" title=\"3. 创建gulpfile.js文件\"></a>3. 创建gulpfile.js文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&#x27;gulp&#x27;),</span><br><span class=\"line\">    minify = require(&#x27;gulp-minify&#x27;),</span><br><span class=\"line\">    uglify = require(&#x27;gulp-uglify&#x27;),</span><br><span class=\"line\">    concat = require(&#x27;gulp-concat&#x27;),</span><br><span class=\"line\">    rename = require(&#x27;gulp-rename&#x27;);</span><br><span class=\"line\">//获取每个组件</span><br><span class=\"line\"> gulp.task(&#x27;taskName&#x27;,function()&#123;</span><br><span class=\"line\">    return gulp.src(&#x27;./dst/js/*.js&#x27;)               //返回任务操作路径和文件</span><br><span class=\"line\">        .pipe(concat(&#x27;functions.js&#x27;))              //合并所有的js文件为functions.js</span><br><span class=\"line\">        .pipe(gulp.dest(&#x27;./src/js/&#x27;))              //输出functions.js文件到根目录下src下js文件夹</span><br><span class=\"line\">        .pipe(uglify())                            //压缩该文件</span><br><span class=\"line\">        .pipe(rename(&#123;extname:&#x27;.min.js&#x27;&#125;))         //对压缩后的文件进行重命名，修改文件后缀为.min.js</span><br><span class=\"line\">        .pipe(gulp.dest(&#x27;./src/js/&#x27;));             //输出到与未压缩同目录下</span><br><span class=\"line\"> &#125;);//新建一个名字叫taskName的任务</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-文件内容详解：\"><a href=\"#4-文件内容详解：\" class=\"headerlink\" title=\"4. 文件内容详解：\"></a>4. 文件内容详解：</h4><h5 id=\"require-函数：\"><a href=\"#require-函数：\" class=\"headerlink\" title=\"require()函数：\"></a>require()函数：</h5><p>参数为string<br><strong>1. 如果string为内置模块</strong><br>        返回该模块 不再继续执行<br><strong>2. 如果string以文件路径形式（如：’.&#x2F;X’、’..&#x2F;X’ 、’&#x2F;X’）</strong><br>        根据 X 所在的父模块，确定 X 的绝对路径。 将 X 当成文件，依次查找名称为X的文件，只要其中有一个存在，就返回该文件，不再继续执行。 X X.js X.json X.node 将 X 当成目录，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。 X&#x2F;package.json X&#x2F;index.js X&#x2F;index.json X&#x2F;index.node<br><strong>3. 如果string不带路径</strong><br>        根据 X 所在的父模块，确定 X 可能的安装目录。 依次在每个目录中，将 X 当成文件名或目录名加载。<br>        <a href=\"http://www.ruanyifeng.com/blog/2015/05/require.html\">参考文章1</a><br>        <a href=\"http://www.jdon.com/idea/nodejs/how-require-actually-works.html\">参考文章2</a></p>\n<h5 id=\"gulp-task\"><a href=\"#gulp-task\" class=\"headerlink\" title=\"gulp.task()\"></a>gulp.task()</h5><p>用于创建gulp任务，默认任务名称为<code>default task(&#39;a&#39;,b)</code>; 参数a：指定任务名称 参数b：匿名函数 执行任务时运行 gulp a（默认任务名直接执行 gulp 即可）</p>\n<h5 id=\"gulp-src\"><a href=\"#gulp-src\" class=\"headerlink\" title=\"gulp.src()\"></a>gulp.src()</h5><pre><code>    `gulp.src(globs[, options])`\n    1. `globs` 参数是文件匹配模式(类似正则表达式)，用来匹配文件路径(包括文件名)，当然这里也可以直接指定某个具体的文件路径。当有多个匹配模式时，该参数可以为一个数组。\n    2. `options` 为可选参数。通常情况下我们不需要用到。\n</code></pre>\n<h5 id=\"pipe\"><a href=\"#pipe\" class=\"headerlink\" title=\"pipe()\"></a>pipe()</h5><p><code>node.js</code> 中 <code>stream</code>（流）的指示方向</p>\n<h5 id=\"gulp-dest\"><a href=\"#gulp-dest\" class=\"headerlink\" title=\"gulp.dest()\"></a>gulp.dest()</h5><p><code>gulp.dest()</code> 方法是用来写文件的，其语法为：</p>\n<pre><code>    `gulp.dest(path[,options])`\n    1. path为写入文件的路径\n    2. options为一个可选的参数对象，通常我们不需要用到\n</code></pre>\n<h5 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h5><p>合并文件，指定参数为合并后的文件名称</p>\n<h5 id=\"uglify\"><a href=\"#uglify\" class=\"headerlink\" title=\"uglify()\"></a>uglify()</h5><p>压缩文件，没有制定参数，直接压缩js文件</p>\n<h5 id=\"rename\"><a href=\"#rename\" class=\"headerlink\" title=\"rename()\"></a>rename()</h5><p>参数为数组，<code>basename</code>、<code>prefix/suffix</code>、<code>extname</code>、<code>dirname</code> 常用：prefix: ‘pre-‘ 增加前缀pre- suffix: ‘-suf’ 增加后缀，不改变文件性质 extname:’.min.js’ 修改文件后缀 <a href=\"http://www.cnblogs.com/2050/p/4198792.html\">参考文章3</a></p>\n",
            "tags": [
                "nodejs",
                "gulp",
                "前端自动化"
            ]
        }
    ]
}