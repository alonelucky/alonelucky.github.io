{
    "version": "https://jsonfeed.org/version/1",
    "title": "小码农博客 • All posts by \"lua\" tag",
    "description": null,
    "home_page_url": "http://qiubo.ink",
    "items": [
        {
            "id": "http://qiubo.ink/2023/09/05/%E4%BD%BF%E7%94%A8openresty%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E7%81%B0%E5%BA%A6%E5%88%87%E6%8D%A2/",
            "url": "http://qiubo.ink/2023/09/05/%E4%BD%BF%E7%94%A8openresty%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E7%81%B0%E5%BA%A6%E5%88%87%E6%8D%A2/",
            "title": "使用openresty实现简单的灰度切换",
            "date_published": "2023-09-05T09:24:33.000Z",
            "content_html": "<p>通过了解 <code>C10K</code> 了解到了 <a href=\"https://openresty.org/\">openresty</a>。OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p>\n<span id=\"more\"></span>\n\n<p>底层使用了 <code>openresty</code> 的动态网关应用有 <a href=\"https://apisix.apache.org/\"><code>apisix</code></a> <a href=\"https://konghq.com/\"><code>Kong</code></a> 等知名网关服务。<br>本文就是在 <code>openresty</code> 的基础上实现简版的动态流量切换，达到灰度流量切换的目的。</p>\n<p><img src=\"/images/2023-09-05/01.png\"></p>\n<h3 id=\"运行原理\"><a href=\"#运行原理\" class=\"headerlink\" title=\"运行原理\"></a>运行原理</h3><ul>\n<li>openresty 执行过程，基础学习参照文章尾部 <code>OpenResty 最佳实践</code><br><img src=\"/images/2023-09-05/02.webp\"></li>\n</ul>\n<p>当HTTP请求进入时，判断请求信息(请求头或者请求URL参数)，如果符合灰度条件，则转发流量到灰度服务。</p>\n<h3 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h3><p>两个不同端口的后端服务，本文使用 nodejs 环境运行后端服务，代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"title class_\">Number</span>(process.<span class=\"property\">argv</span>[<span class=\"number\">2</span>]) || <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(port);</span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">write</span>(<span class=\"title class_\">String</span>(port));</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(port);</span><br></pre></td></tr></table></figure>\n\n<p>openresty conf 配置如下:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"section\">upstream</span> test.switch &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> localhost:<span class=\"number\">12345</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> localhost:<span class=\"number\">12346</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"section\">upstream</span> grey.test.switch &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> localhost:<span class=\"number\">12347</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">1280</span>;</span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://test.switch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时是使用反向代理的常规配置，命中的均为上游测试服务。</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><h4 id=\"基于本地文件的灰度识别\"><a href=\"#基于本地文件的灰度识别\" class=\"headerlink\" title=\"基于本地文件的灰度识别\"></a>基于本地文件的灰度识别</h4><p>lua 脚本</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> cjosn = <span class=\"built_in\">require</span> <span class=\"string\">&#x27;cjson&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">-- 获取请求头</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> headers = ngx.req.get_headers()</span><br><span class=\"line\"><span class=\"keyword\">local</span> key = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> headers ~= <span class=\"literal\">nil</span> <span class=\"keyword\">and</span> headers[<span class=\"string\">&quot;user-id&quot;</span>] ~= <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> </span><br><span class=\"line\">  <span class=\"comment\">-- 整理请求key</span></span><br><span class=\"line\">  key = <span class=\"string\">&quot;grey_key_prefix:&quot;</span>..headers[<span class=\"string\">&quot;user-id&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 灰度控制</span></span><br><span class=\"line\">ngx.header[<span class=\"string\">&quot;x-response-switch&quot;</span>] = <span class=\"string\">&quot;origin&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> v, ok = ngx.shared[<span class=\"string\">&quot;grey_host_dict&quot;</span>]:get(key)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> v <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"comment\">-- base_upstream 是外部配置的变量，正常服务</span></span><br><span class=\"line\">  ngx.var.switch_upstream = ngx.var.base_upstream</span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">  <span class=\"comment\">-- grey_upstream 是外部配置的变量，灰度服务</span></span><br><span class=\"line\">  ngx.header[<span class=\"string\">&quot;x-response-switch&quot;</span>] = <span class=\"string\">&quot;grey&quot;</span></span><br><span class=\"line\">  ngx.var.switch_upstream = ngx.var.grey_upstream</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 重载灰度配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ngx.var.document_uri == <span class=\"string\">&quot;/reload_grey_file&quot;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> fd = <span class=\"built_in\">io</span>.<span class=\"built_in\">open</span>(ngx.var.grey_file, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> s = fd:<span class=\"built_in\">read</span>(<span class=\"string\">&quot;*a&quot;</span>)</span><br><span class=\"line\">    fd:<span class=\"built_in\">close</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 输出load file 的内容</span></span><br><span class=\"line\">    ngx.<span class=\"built_in\">print</span>(<span class=\"string\">&quot;load json: &quot;</span>)</span><br><span class=\"line\">    ngx.say(s)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> json = cjosn:new()</span><br><span class=\"line\">    <span class=\"keyword\">local</span> tb = json.decode(s)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tb) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"comment\">-- 输出实际加入的灰度信息</span></span><br><span class=\"line\">        ngx.say(<span class=\"string\">&quot;kv: &quot;</span>..k..<span class=\"string\">&quot; =&gt; &quot;</span>..v)</span><br><span class=\"line\">        ngx.shared[<span class=\"string\">&quot;grey_host_dict&quot;</span>]:safe_set(k, v)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    ngx.<span class=\"built_in\">exit</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>openresty 配置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"attribute\">lua_shared_dict</span> grey_mem <span class=\"number\">1m</span>; <span class=\"comment\"># 配置灰度信息跨 worker 共享内存块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 配置基础变量</span></span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$base_upstream</span> <span class=\"string\">&quot;grey.test.switch&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$grey_upstream</span> <span class=\"string\">&quot;test.switch&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$grey_host_dict</span> <span class=\"string\">&quot;grey_mem2&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$grey_file</span> <span class=\"string\">&quot;/usr/local/openresty/custom/grey/config.json&quot;</span>; <span class=\"comment\"># &#123;&quot;grey_key_prefix:1&quot;: &quot;1&quot;&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">1280</span>;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 配置切换上下游变量便于切换流量</span></span><br><span class=\"line\">    <span class=\"attribute\">set</span> <span class=\"variable\">$switch_upstream</span> <span class=\"variable\">$switch_upstream</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://<span class=\"variable\">$switch_upstream</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>这样就达到了如开篇图的效果。</p>\n<h4 id=\"基于-redis-的灰度识别\"><a href=\"#基于-redis-的灰度识别\" class=\"headerlink\" title=\"基于 redis 的灰度识别\"></a>基于 redis 的灰度识别</h4><p>但是，基于文件的灰度配置不便，因此可以利用 openresty 提供的各种后端存储库实现方便的配置，如：<code>ngx_postgres</code> <code>ngx_redis2</code> <code>ngx_redis</code> 等模块， <code>lua-resty-memcached</code> <code>lua-resty-mysql</code> <code>lua-resty-redis</code> 等库。</p>\n<p>模块的简单使用如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"section\">upstream</span> redis_backend &#123;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:6379</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">keepalive</span> <span class=\"number\">16</span>; <span class=\"comment\"># redis持久化连接</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"section\">location</span> = /redis &#123;</span><br><span class=\"line\">    internal; <span class=\"comment\"># 标记为内部服务，外部无法请求到该路由</span></span><br><span class=\"line\">    <span class=\"attribute\">set_unescape_uri</span> <span class=\"variable\">$query</span> <span class=\"variable\">$arg_query</span>; <span class=\"comment\"># 处理请求参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">redis2_raw_query</span> <span class=\"variable\">$query</span>; <span class=\"comment\"># 传递给redis后端处理原始 redis 请求</span></span><br><span class=\"line\">    <span class=\"attribute\">redis2_pass</span> redis_backend;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>修改lua代码:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 获取请求头</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ngx.req.is_internal <span class=\"keyword\">then</span> </span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> parser = <span class=\"built_in\">require</span> <span class=\"string\">&quot;redis.parser&quot;</span> <span class=\"comment\">-- 引入基础库，解析redis响应</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> headers = ngx.req.get_headers()</span><br><span class=\"line\"><span class=\"keyword\">local</span> key = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> headers ~= <span class=\"literal\">nil</span> <span class=\"keyword\">and</span> headers[<span class=\"string\">&quot;user-id&quot;</span>] ~= <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> </span><br><span class=\"line\">  <span class=\"comment\">-- 整理请求key</span></span><br><span class=\"line\">  key = <span class=\"string\">&quot;grey_key_prefix:&quot;</span>..headers[<span class=\"string\">&quot;user-id&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hmget</span><span class=\"params\">(dict, key)</span></span></span><br><span class=\"line\">    <span class=\"comment\">-- 构造内部请求</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> res = ngx.location.capture(<span class=\"string\">&quot;/redis?query=hmget &quot;</span> .. dict .. <span class=\"string\">&quot; &quot;</span>.. key ..<span class=\"string\">&quot;\\r\\n&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> replies = parser.parse_replies(res.body, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\">-- 解析响应结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, reply <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(replies) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> reply[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 灰度控制</span></span><br><span class=\"line\">ngx.header[<span class=\"string\">&quot;x-response-switch&quot;</span>] = <span class=\"string\">&quot;origin&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> v, ok = hmget(<span class=\"string\">&quot;grey_host_dict&quot;</span>, key)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> v <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"comment\">-- base_upstream 是外部配置的变量，正常服务</span></span><br><span class=\"line\">  ngx.var.switch_upstream = ngx.var.base_upstream</span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">  <span class=\"comment\">-- grey_upstream 是外部配置的变量，灰度服务</span></span><br><span class=\"line\">  ngx.header[<span class=\"string\">&quot;x-response-switch&quot;</span>] = <span class=\"string\">&quot;grey&quot;</span></span><br><span class=\"line\">  ngx.var.switch_upstream = ngx.var.grey_upstream</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>如此就完成了轻量级的灰度流量自动切换。<br>Openresty还可以实现更加复杂的流量控制，可以直接使用成熟的网关框架；如果服务较小也可以直接基于 openresty 做一些简单的任务。</p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ol>\n<li>OpenResty 官网 <code>https://openresty.org/cn/</code></li>\n<li>OpenResty 最佳实践 <code>https://moonbingbing.gitbooks.io/openresty-best-practices/content/</code></li>\n<li>OpenResty 开源组件 <code>https://github.com/search?q=openresty&amp;type=repositories</code></li>\n</ol>\n",
            "tags": [
                "openresty",
                "nginx",
                "lua"
            ]
        },
        {
            "id": "http://qiubo.ink/2023/08/30/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8wrk%E8%BF%9B%E8%A1%8C%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/",
            "url": "http://qiubo.ink/2023/08/30/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8wrk%E8%BF%9B%E8%A1%8C%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/",
            "title": "学习使用wrk进行压力测试",
            "date_published": "2023-08-30T13:13:08.000Z",
            "content_html": "<p>最近发现了一个新的 HTTP 压力测试工具 <code>wrk</code>，非常容易上手和使用。<code>wrk</code> 使用非常简单，对应的命令行参数也不多，但是足够自己简单压测一些 <code>http</code> 服务了。官方下载地址为 <code>https://github.com/wg/wrk</code>。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/images/2023-08-30/01.png\"></p>\n<p>根据官方示例，其实 <code>wrk</code> 最大的特点是支持动态脚本修改请求，本身不大的身体集成了 <code>luajit</code> 用于实施请求时动态修改请求&#x2F;响应。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h5 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h5><p>由于wrk依赖的一些特性在Windows上没有，因此<a href=\"https://github.com/wg/wrk/issues/187\">不支持</a>在windows上编译运行，编译成功也会有一些奇怪的问题。因此建议曲线使用，在 docker 中编译, 借助docker在windows上使用。</p>\n<h5 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h5><ol>\n<li><code>brew install wrk</code></li>\n<li>源码安装<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取源码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/wg/wrk</span><br><span class=\"line\"><span class=\"comment\"># mbp2018 大概编译10分钟</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> wrk &amp;&amp; make</span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\">wrk -h</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h5><p>源码安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取源码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/wg/wrk</span><br><span class=\"line\"><span class=\"comment\"># 编译过程相关依赖可以参照 dockerfile 中的依赖项</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> wrk &amp;&amp; make</span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\">wrk -h</span><br></pre></td></tr></table></figure>\n<h5 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h5><p>Dockerfile内容如下，较少的依赖，编译后无依赖项</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:latest as BUILD</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> root</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> ./ /root/wrk</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">cd</span> wrk &amp;&amp; apt update &amp;&amp; apt install make gcc unzip openssl libterm-readkey-perl -y </span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> make</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:latest</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=BUILD /root/wrk/wrk /usr/local/bin</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用介绍\"><a href=\"#使用介绍\" class=\"headerlink\" title=\"使用介绍\"></a>使用介绍</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wrk: invalid option -- h</span><br><span class=\"line\">Usage: wrk &lt;options&gt; &lt;url&gt;                            </span><br><span class=\"line\">  Options:                                            </span><br><span class=\"line\">    -c, --connections &lt;N&gt;  Connections to keep open   # 总连接数(客户端数)</span><br><span class=\"line\">    -d, --duration    &lt;T&gt;  Duration of test           # 测试运行总时间</span><br><span class=\"line\">    -t, --threads     &lt;N&gt;  Number of threads to use   # 线程数</span><br><span class=\"line\">                                                      </span><br><span class=\"line\">    -s, --script      &lt;S&gt;  Load Lua script file       # 执行脚本 </span><br><span class=\"line\">    -H, --header      &lt;H&gt;  Add header to request      # 全局请求 header</span><br><span class=\"line\">        --latency          Print latency statistics   # 输出延迟统计信息</span><br><span class=\"line\">        --timeout     &lt;T&gt;  Socket/request timeout     # 单次请求超时时间</span><br><span class=\"line\">    -v, --version          Print version details      # 版本</span><br><span class=\"line\">                                                      </span><br><span class=\"line\">  Numeric arguments may include a SI unit (1k, 1M, 1G) # 数值参数可以包括单位(1K、1M、1G)</span><br><span class=\"line\">  Time arguments may include a time unit (2s, 2m, 2h)  # 时间参数可以包括时间单位(2s、2m、2h)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>使用 <code>nodejs</code> 写了一个脚本, 用于测试并发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">http</span> <span class=\"operator\">=</span> require(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">port</span> <span class=\"operator\">=</span> Number(process.argv[<span class=\"number\">2</span>]) || <span class=\"number\">0</span>;</span><br><span class=\"line\">console.log(port);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">let</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">http.createServer((req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.url.includes(<span class=\"string\">&#x27;status&#x27;</span>)) <span class=\"keyword\">return</span> res.end();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.url.includes(<span class=\"string\">&#x27;count&#x27;</span>)) &#123; <span class=\"comment\">// 可以事后统计实际处理的请求数量</span></span><br><span class=\"line\">        res.write(`hello $&#123;count&#125;`);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.end();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">let</span> <span class=\"variable\">closed</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 记录请求被取消</span></span><br><span class=\"line\">    req.on(<span class=\"string\">&#x27;close&#x27;</span>, () =&gt; &#123;</span><br><span class=\"line\">        closed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (closed) &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&#x27;req cancel&#x27;</span>); <span class=\"comment\">// 最终停止时可能有部分请求被强制取消，作为记录</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.end();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.write(`hello $&#123;port&#125;`);</span><br><span class=\"line\">        res.statusCode = <span class=\"number\">200</span>;</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">        count++; <span class=\"comment\">// 计数</span></span><br><span class=\"line\">    &#125;, Math.random() * <span class=\"number\">1000</span>) <span class=\"comment\">// 模拟响应处理延迟</span></span><br><span class=\"line\">&#125;).listen(port, () =&gt; &#123;</span><br><span class=\"line\">    console.log(`server is running at $&#123;port&#125;`);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用 <code>pm2</code> 进程管理启动集群服务，多进程方式处理响应</p>\n<p>动态请求脚本内容如下</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">counter = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"built_in\">path</span> = <span class=\"string\">&quot;/&quot;</span> .. counter</span><br><span class=\"line\">    wrk.headers[<span class=\"string\">&quot;X-Counter&quot;</span>] = counter # 为每次请求头增加叠加数字</span><br><span class=\"line\">    counter = counter + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrk.<span class=\"built_in\">format</span>(<span class=\"literal\">nil</span>, <span class=\"built_in\">path</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>请求示例如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wrk -c 5 -t 5 -s 1280.lua --latency http://127.0.0.1:1280/</span><br><span class=\"line\"></span><br><span class=\"line\">Running 10s test @ http://127.0.0.1:1280/   # 默认执行10s</span><br><span class=\"line\">  5 threads and 5 connections               # 5个线程，一共5个客户端, 平均一个线程作为一个客户端 </span><br><span class=\"line\">  Thread Stats   Avg      Stdev     Max     +/- Stdev </span><br><span class=\"line\">                (平均值)  (标准差)   (最大值)  (正负一个标准差所占比例)</span><br><span class=\"line\">    Latency   531.20ms  284.56ms   1.01s    59.34%  (延迟)[主要关注]</span><br><span class=\"line\">    Req/Sec     2.44      2.57     10.00    91.95%  (每秒处理中的请求数)</span><br><span class=\"line\">  Latency Distribution  (延迟分布)</span><br><span class=\"line\">     50%  576.00ms      # 50%以内的请求</span><br><span class=\"line\">     75%  777.17ms      # 75%以内的请求</span><br><span class=\"line\">     90%  914.97ms      # 90%以内的请求</span><br><span class=\"line\">     99%    1.01s       # 99%以内的请求</span><br><span class=\"line\">  91 requests in 10.02s, 13.95KB read   (10s之内共处理完成了91个请求，读取了13.95KB数据)</span><br><span class=\"line\">Requests/sec:      9.09     (平均每秒262.22个请求)</span><br><span class=\"line\">Transfer/sec:      1.39KB   (平均每秒读取数据554.27KB)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ol>\n<li><code>https://www.escapelife.site/posts/4b014d0b.html</code></li>\n<li><code>https://corvo.myseu.cn/2021/03/24/2021-03-24-使用wrk压测并精细控制并发请求量/</code></li>\n<li><code>http://www.taodudu.cc/news/show-5177501.html?action=onClick</code></li>\n</ol>\n",
            "tags": [
                "测试",
                "lua",
                "wrk"
            ]
        }
    ]
}