{
    "version": "https://jsonfeed.org/version/1",
    "title": "小码农博客",
    "description": null,
    "home_page_url": "http://qiubo.ink",
    "items": [
        {
            "id": "http://qiubo.ink/2024/11/16/%E5%88%A4%E6%96%AD%E9%A1%B5%E9%9D%A2%E5%86%85%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E5%8F%AF%E8%A7%81/",
            "url": "http://qiubo.ink/2024/11/16/%E5%88%A4%E6%96%AD%E9%A1%B5%E9%9D%A2%E5%86%85%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E5%8F%AF%E8%A7%81/",
            "title": "判断页面内元素是否可见",
            "date_published": "2024-11-16T07:46:42.000Z",
            "content_html": "<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目前观测只支持非占位隐藏， dispaly:none; </span></span><br><span class=\"line\"><span class=\"comment\">// 占位隐藏可以通过 ele.style 去判断对应的 css</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dom_visibility</span>(<span class=\"params\">ele</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!ele) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ele.<span class=\"property\">checkVisibility</span>) <span class=\"keyword\">return</span> ele.<span class=\"title function_\">checkVisibility</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (ele.<span class=\"property\">offsetWidth</span> &gt; <span class=\"number\">0</span> || ele.<span class=\"property\">offsetHeight</span> &gt; <span class=\"number\">0</span>) || !!ele.<span class=\"property\">offsetParent</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p><code>var ele = document.getElementById(&#39;someId&#39;)</code></p>\n<ol>\n<li>判断网页中的Element元素是否可见<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.<span class=\"title function_\">checkVisibility</span>();</span><br></pre></td></tr></table></figure>\n此方法目前只有 谷歌 105 版本 和 Firefox 106版本 以后的浏览器支持，Safari全系不支持。</li>\n<li>判断 ele.offsetParent 是否为null。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (d.<span class=\"property\">offsetParent</span> === <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27; the element currently is invisible&#x27;</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n原文链接：<a href=\"https://stackoverflow.com/questions/19669786/check-if-element-is-visible-in-dom\">https://stackoverflow.com/questions/19669786/check-if-element-is-visible-in-dom</a></li>\n<li>判断 offsetWidth 和 offsetHeight 同时等于0<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isvisible</span>(<span class=\"params\">ele</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ele.<span class=\"property\">offsetWidth</span> &gt; <span class=\"number\">0</span> || ele.<span class=\"property\">offsetHeight</span> &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目前观测只支持非占位隐藏， dispaly:none; </span></span><br><span class=\"line\"><span class=\"comment\">// 占位隐藏可以通过 ele.style 去判断对应的 css</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dom_visibility</span>(<span class=\"params\">ele</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!ele) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ele.<span class=\"property\">checkVisibility</span>) <span class=\"keyword\">return</span> ele.<span class=\"title function_\">checkVisibility</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (ele.<span class=\"property\">offsetWidth</span> &gt; <span class=\"number\">0</span> || ele.<span class=\"property\">offsetHeight</span> &gt; <span class=\"number\">0</span>) || !!ele.<span class=\"property\">offsetParent</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "http://qiubo.ink/2024/11/15/github-pages-%E4%B8%8D%E8%83%BD%E8%AF%86%E5%88%AB%E4%B8%8B%E5%88%92%E7%BA%BF%E5%BC%80%E5%A4%B4%E7%9A%84%E6%96%87%E4%BB%B6/",
            "url": "http://qiubo.ink/2024/11/15/github-pages-%E4%B8%8D%E8%83%BD%E8%AF%86%E5%88%AB%E4%B8%8B%E5%88%92%E7%BA%BF%E5%BC%80%E5%A4%B4%E7%9A%84%E6%96%87%E4%BB%B6/",
            "title": "github pages 不能识别下划线开头的文件",
            "date_published": "2024-11-15T16:41:59.000Z",
            "content_html": "<p>github 默认使用 jekyll ，下划线是配置文件，默认是不展示的。</p>\n<span id=\"more\"></span>\n\n<p>github pages 不能识别下划线开头的文件。</p>\n<p>网络上可以找到对应的原因：</p>\n<blockquote>\n<p>github 默认使用 jekyll ，下划线是配置文件，默认是不展示的。</p>\n</blockquote>\n<p>但是前端打包时不可避免不同框架输出的打包结果中，包含下划线开头的文件。解决方案如下</p>\n<p>在部署根目录下: </p>\n<p>1.不需要使用 jekyll </p>\n<blockquote>\n<p> 使用 .nojekyll 关闭 jekyll 主题</p>\n</blockquote>\n<p><img src=\"https://fastly.jsdelivr.net/gh/bucketio/img19@main/2024/11/15/1731653357224-54407df6-7ee8-428f-8472-170e14afe872.png\"></p>\n<p>2.还需要使用 jekyll </p>\n<blockquote>\n<p>在 _config.yml 中显式包含文件 <a href=\"https://jekyllrb.com/docs/configuration/options/\">include</a></p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">incldes:</span> [<span class=\"string\">&quot;assets/&quot;</span>]</span><br></pre></td></tr></table></figure>",
            "tags": [
                "笔记"
            ]
        },
        {
            "id": "http://qiubo.ink/2024/11/14/%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%AF%B9%E6%AF%94/",
            "url": "http://qiubo.ink/2024/11/14/%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%AF%B9%E6%AF%94/",
            "title": "编码格式对比",
            "date_published": "2024-11-14T14:22:01.000Z",
            "content_html": "<ul>\n<li>包含自描述信息 <ul>\n<li>JSON </li>\n<li>MessagePack </li>\n<li>CBOR</li>\n<li>XML</li>\n</ul>\n</li>\n<li>不包含自描述信息<ul>\n<li>Protobuf</li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"包含自描述信息\"><a href=\"#包含自描述信息\" class=\"headerlink\" title=\"包含自描述信息\"></a>包含自描述信息</h2><h3 id=\"1-JSON-JavaScript-Object-Notation\"><a href=\"#1-JSON-JavaScript-Object-Notation\" class=\"headerlink\" title=\"1. JSON (JavaScript Object Notation)\"></a>1. JSON (JavaScript Object Notation)</h3><p>JSON格式是1999年ECMA-262的子集合，由 Douglas Crockford 提出。</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/bucketio/img16@main/2024/11/14/1731572575398-16d7bc4a-8714-46b4-b47a-0762fb9f7aac.png\"></p>\n<p>基本数据类型：</p>\n<ul>\n<li><strong>数值</strong>：符合IEEE754的十进制数，不能有前导0，可以为负数，可以有小数部分。还可以用e或者E表示指数部分。不能包含非数，如<code>NaN</code>。不区分整数与浮点数。JavaScript用双精度浮点数表示所有数值。</li>\n<li><strong>字符串</strong>：以双引号<code>&quot;&quot;</code>括起来的零个或多个Unicode码位。支持反斜杠开始的转义字符序列。</li>\n<li><strong>布尔值</strong>：表示为 <code>true</code> 或者 <code>false</code>。</li>\n<li><strong>数组</strong>：有序的零个或者多个值。每个值可以为任意类型。数组使用方括号 <code>[]</code> 包裹。多个数组元素之间用逗号 <code>,</code> 分隔，形如：<code>[value, value]</code>。</li>\n<li><strong>对象</strong>：若干无序的“键-值对”，其中键只能是字符串。建议但不强制要求对象中的键是独一无二的。对象以花括号 <code>&#123;&#125;</code> 包裹。多个键-值对之间使用逗号,分隔。键与值之间用冒号 <code>:</code> 分隔。</li>\n<li><strong>空值</strong>：值写为 <code>null</code></li>\n</ul>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>自描述，人类可阅读性高</li>\n<li>几乎所有与网络开发相关的语言都有JSON函数库。</li>\n</ol>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li>整型最大，浮点型最大</li>\n<li>不支持二进制数据</li>\n</ol>\n<h3 id=\"2-MessagePack\"><a href=\"#2-MessagePack\" class=\"headerlink\" title=\"2. MessagePack\"></a>2. MessagePack</h3><p><img src=\"https://fastly.jsdelivr.net/gh/bucketio/img4@main/2024/11/14/1731572437513-5bb35a10-69ed-432f-9cfe-b5fe36c35b31.png\"></p>\n<p>基本数据类型：</p>\n<ul>\n<li><strong>空值</strong>：<code>nil</code></li>\n<li><strong>布尔值</strong>, 表示为 <code>true</code> 或者 <code>false</code>。</li>\n<li><strong>整型</strong>, 最大64位有符号或无符号整数</li>\n<li><strong>浮点型</strong>, IEEE单双精度浮点</li>\n<li><strong>字符串</strong>, UTF-8 字符串</li>\n<li><strong>二进制</strong>, 最大 ($2^{32}-1$)<code>4294967295</code>  字节 </li>\n<li><strong>数组</strong></li>\n<li><strong>对象</strong>, 关系数组</li>\n<li><strong>扩展类型</strong> <code>ext type</code></li>\n<li><strong>时间</strong> ext type &#x3D; -1</li>\n</ul>\n<p>以二进制形式，用于表示简单的数据结构，如数组和关系数组。旨在尽可能紧凑和简单。</p>\n<h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>编解码自描述</li>\n<li>体积小</li>\n<li>速度快</li>\n<li>支持二进制编码</li>\n</ol>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li>人类可阅读性差</li>\n<li>额外引包 (msgpack 官方提供了多种语言)</li>\n</ol>\n<h3 id=\"3-CBOR-Concise-Binary-Object-Representation\"><a href=\"#3-CBOR-Concise-Binary-Object-Representation\" class=\"headerlink\" title=\"3. CBOR (Concise Binary Object Representation)\"></a>3. CBOR (Concise Binary Object Representation)</h3><p>CBOR的灵感来自Message Pack。<br>一种简洁二进制对象表示格式，其设计目标包括极小的代码体积、相当小的消息体积以及无需版本协商的可扩展性。</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/bucketio/img11@main/2024/11/14/1731572810388-4cac6a0f-2324-4486-996b-47b19a8161b6.png\"></p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/bucketio/img14@main/2024/11/14/1731573013926-d2c3b287-41a6-4f8c-9bb4-1628a2af4aeb.png\"></p>\n<h5 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>编解码自描述</li>\n<li>体积小</li>\n<li>速度快</li>\n<li>支持二进制编码</li>\n<li>占用资源少</li>\n</ol>\n<h5 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li>人类可阅读性很差</li>\n<li>大部分语言需要依靠第三方实现</li>\n</ol>\n<h3 id=\"4-XML-Extensible-Markup-Language\"><a href=\"#4-XML-Extensible-Markup-Language\" class=\"headerlink\" title=\"4. XML (Extensible Markup Language)\"></a>4. XML (Extensible Markup Language)</h3><p><img src=\"https://fastly.jsdelivr.net/gh/bucketio/img3@main/2024/11/14/1731573326634-766518bc-3694-4183-afe0-f8c611905753.png\"></p>\n<p>可扩展标记语言是一种标记语言和用于存储、传输和重构松散数据的文件格式。它定义了一系列编码文档的规则以使其在人类可读的同时机器可读。万维网联盟于1998年发布的 XML 1.0 规范和其他相关开源标准共同定义了 XML。</p>\n<p>关键术语</p>\n<ul>\n<li><strong>字符（ Character ）</strong></li>\n<li><strong>处理器（ Processor ）与应用（ Application ）</strong></li>\n<li><strong>标记（ Markup ）与内容（ Content ）</strong></li>\n<li><strong>标签（ Tag ）</strong></li>\n<li><strong>元素（ Element ）</strong></li>\n<li><strong>属性（ Attribute ）</strong></li>\n<li><strong>XML 声明（ Declaration ）</strong></li>\n</ul>\n<h5 id=\"优点-3\"><a href=\"#优点-3\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>编解码自描述，可阅读性高</li>\n<li>易于编写，作为配置文件</li>\n</ol>\n<h5 id=\"缺点-3\"><a href=\"#缺点-3\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li>占用空间大，重复字符多</li>\n<li>结构不灵活</li>\n</ol>\n<h2 id=\"不包含自描述信息\"><a href=\"#不包含自描述信息\" class=\"headerlink\" title=\"不包含自描述信息\"></a>不包含自描述信息</h2><h3 id=\"1-Protobuf-Protocol-Buffers\"><a href=\"#1-Protobuf-Protocol-Buffers\" class=\"headerlink\" title=\"1. Protobuf (Protocol Buffers)\"></a>1. Protobuf (Protocol Buffers)</h3><p>像JSON一样，只是它更小、更快，并且需要生成本地语言绑定。</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/bucketio/img6@main/2024/11/14/1731574814079-682b9cce-4658-44b6-ade2-b65541f03b7f.png\"></p>\n<h5 id=\"优点-4\"><a href=\"#优点-4\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>编解码速度快</li>\n<li>占用体积小</li>\n<li>支持二进制编码</li>\n</ol>\n<h5 id=\"缺点-4\"><a href=\"#缺点-4\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li>接发双方均需要预定义结构</li>\n</ol>\n<p>基本数据类型：</p>\n<ul>\n<li><strong>double</strong>：双精度浮点</li>\n<li><strong>float</strong>：单精度浮点</li>\n<li><strong>int32</strong>：32位整型，可变长度编码</li>\n<li><strong>int64</strong>：64 位整型，可变长度编码</li>\n<li><strong>uint32</strong>：32位整型，可变长度编码</li>\n<li><strong>uint64</strong>：64 位整型，可变长度编码</li>\n<li><strong>sint32</strong>：比常规 <strong>int32</strong> 更有效地编码负值。</li>\n<li><strong>sint64</strong>：比常规 <strong>int64</strong> 更有效地编码负值。</li>\n<li><strong>fixed32</strong>：固定4字节。如果值通常大于$2^{28}$，则比<strong>uint32</strong>更有效。</li>\n<li><strong>fixed64</strong>：固定8字节。如果值通常大于$2^{56}$，则比<strong>uint32</strong>更有效。</li>\n<li><strong>sfixed32</strong>：固定4字节。</li>\n<li><strong>sfixed64</strong>：固定8字节。</li>\n<li><strong>bool</strong>：布尔值</li>\n<li><strong>string</strong>：字符串</li>\n<li><strong>bytes</strong>：二进制数据</li>\n</ul>\n<h3 id=\"其他类似的格式\"><a href=\"#其他类似的格式\" class=\"headerlink\" title=\"其他类似的格式\"></a>其他类似的格式</h3><h5 id=\"1-Apache-Thrift\"><a href=\"#1-Apache-Thrift\" class=\"headerlink\" title=\"1. Apache Thrift\"></a>1. Apache Thrift</h5><h5 id=\"2-Apache-Avro\"><a href=\"#2-Apache-Avro\" class=\"headerlink\" title=\"2. Apache Avro\"></a>2. Apache Avro</h5><h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><table>\n<thead>\n<tr>\n<th>格式</th>\n<th>标准</th>\n<th>阅读性(0-9)</th>\n<th>易用性(0-9)</th>\n<th>速度(0-9)</th>\n<th>大小(0-9)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.json.org/json-zh.html\">JSON</a></td>\n<td><a href=\"https://www.ecma-international.org/publications-and-standards/standards/ecma-404/\">ECMA-404</a></td>\n<td>高</td>\n<td>高</td>\n<td>一般</td>\n<td>大</td>\n</tr>\n<tr>\n<td><a href=\"https://msgpack.org/\">MessagePack</a></td>\n<td>-</td>\n<td>中</td>\n<td>高</td>\n<td>快</td>\n<td>中</td>\n</tr>\n<tr>\n<td><a href=\"https://cbor.io/\">CBOR</a></td>\n<td>RFC 8949</td>\n<td>中</td>\n<td>高</td>\n<td>快</td>\n<td>中</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3.org/XML/\">XML</a></td>\n<td>RFC 7303</td>\n<td>高</td>\n<td>高</td>\n<td>慢</td>\n<td>大</td>\n</tr>\n<tr>\n<td><a href=\"https://protobuf.dev/programming-guides/proto3/\">Protobuf</a></td>\n<td>RFC 7303</td>\n<td>不可阅读</td>\n<td>中</td>\n<td>快</td>\n<td>小</td>\n</tr>\n</tbody></table>\n<hr>\n<center>\n    <img src=\"https://cdn-doocs.oss-cn-shenzhen.aliyuncs.com/gh/doocs/md/images/1648303220922-7e14aefa-816e-44c1-8604-ade709ca1c69.png\" style=\"width: 100px;\">\n</center>\n",
            "tags": [
                "算法",
                "JSON",
                "XML",
                "Protobuf",
                "Msgpack",
                "CBOR"
            ]
        },
        {
            "id": "http://qiubo.ink/2023/12/29/Nats%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/",
            "url": "http://qiubo.ink/2023/12/29/Nats%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/",
            "title": "Nats服务部署记录",
            "date_published": "2023-12-29T17:19:02.000Z",
            "content_html": "<p>为了学习和了解 <code>systemctl</code> 采用手动部署 <code>Nats</code>.</p>\n<span id=\"more\"></span>\n\n<h3 id=\"1-Service-配置\"><a href=\"#1-Service-配置\" class=\"headerlink\" title=\"1. Service 配置\"></a>1. Service 配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在网络启动后启动</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Nats Server Custom Process</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用完整路径</span></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=pathto/nats-server -l pathto/nats.log -c /etc/nats-server/nats-server.conf -pid pathto/nats-server.pid</span><br><span class=\"line\">ExecStop=/bin/kill $(<span class=\"built_in\">cat</span> pathto/nats-server.pid) <span class=\"comment\"># 找到 pid 终止进程</span></span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\">Restart=on-failure <span class=\"comment\"># 在失败时重启</span></span><br><span class=\"line\">RestartSec=42s</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target <span class=\"comment\"># 默认开机随用户启动</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Nats-配置\"><a href=\"#2-Nats-配置\" class=\"headerlink\" title=\"2. Nats 配置\"></a>2. Nats 配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http_port: 8222</span><br><span class=\"line\"></span><br><span class=\"line\">jetstream: &#123;</span><br><span class=\"line\">\t# 持久化存储</span><br><span class=\"line\">    store_dir: /usr/local/nats-server-v2.10.7-linux-amd64/data/</span><br><span class=\"line\">\t# 最大内存消息</span><br><span class=\"line\">    max_mem: 128MB</span><br><span class=\"line\">\t# 最大本地存储</span><br><span class=\"line\">    max_file: 1G</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">authorization: &#123;</span><br><span class=\"line\">    users = [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t# 使用 nkey 作为登录</span><br><span class=\"line\">            nkey: UBFE2GTSYNUPELVDQO5N2Q56EMGD7HZ6MGX32XRTK3CWENYK6PM3RW7O</span><br><span class=\"line\">\t\t\t# 拥有全部权限</span><br><span class=\"line\">            permissions: &#123;</span><br><span class=\"line\">                publish: &quot;&gt;&quot;</span><br><span class=\"line\">                subscribe: &quot;&gt;&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-参考文章\"><a href=\"#3-参考文章\" class=\"headerlink\" title=\"3. 参考文章\"></a>3. 参考文章</h3><ol>\n<li><code>https://yoshiera.gitee.io/posts/nats/nats-keys/</code></li>\n<li><code>https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html</code></li>\n<li><code>https://natsbyexample.com/</code></li>\n</ol>\n",
            "tags": [
                "golang",
                "linux",
                "queue",
                "笔记",
                "nats"
            ]
        },
        {
            "id": "http://qiubo.ink/2023/09/05/%E4%BD%BF%E7%94%A8openresty%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E7%81%B0%E5%BA%A6%E5%88%87%E6%8D%A2/",
            "url": "http://qiubo.ink/2023/09/05/%E4%BD%BF%E7%94%A8openresty%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E7%81%B0%E5%BA%A6%E5%88%87%E6%8D%A2/",
            "title": "使用openresty实现简单的灰度切换",
            "date_published": "2023-09-05T09:24:33.000Z",
            "content_html": "<p>通过了解 <code>C10K</code> 了解到了 <a href=\"https://openresty.org/\">openresty</a>。OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p>\n<span id=\"more\"></span>\n\n<p>底层使用了 <code>openresty</code> 的动态网关应用有 <a href=\"https://apisix.apache.org/\"><code>apisix</code></a> <a href=\"https://konghq.com/\"><code>Kong</code></a> 等知名网关服务。<br>本文就是在 <code>openresty</code> 的基础上实现简版的动态流量切换，达到灰度流量切换的目的。</p>\n<p><img src=\"/images/2023-09-05/01.png\"></p>\n<h3 id=\"运行原理\"><a href=\"#运行原理\" class=\"headerlink\" title=\"运行原理\"></a>运行原理</h3><ul>\n<li>openresty 执行过程，基础学习参照文章尾部 <code>OpenResty 最佳实践</code><br><img src=\"/images/2023-09-05/02.webp\"></li>\n</ul>\n<p>当HTTP请求进入时，判断请求信息(请求头或者请求URL参数)，如果符合灰度条件，则转发流量到灰度服务。</p>\n<h3 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h3><p>两个不同端口的后端服务，本文使用 nodejs 环境运行后端服务，代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"title class_\">Number</span>(process.<span class=\"property\">argv</span>[<span class=\"number\">2</span>]) || <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(port);</span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">write</span>(<span class=\"title class_\">String</span>(port));</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(port);</span><br></pre></td></tr></table></figure>\n\n<p>openresty conf 配置如下:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"section\">upstream</span> test.switch &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> localhost:<span class=\"number\">12345</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> localhost:<span class=\"number\">12346</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"section\">upstream</span> grey.test.switch &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> localhost:<span class=\"number\">12347</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">1280</span>;</span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://test.switch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时是使用反向代理的常规配置，命中的均为上游测试服务。</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><h4 id=\"基于本地文件的灰度识别\"><a href=\"#基于本地文件的灰度识别\" class=\"headerlink\" title=\"基于本地文件的灰度识别\"></a>基于本地文件的灰度识别</h4><p>lua 脚本</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> cjosn = <span class=\"built_in\">require</span> <span class=\"string\">&#x27;cjson&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">-- 获取请求头</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> headers = ngx.req.get_headers()</span><br><span class=\"line\"><span class=\"keyword\">local</span> key = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> headers ~= <span class=\"literal\">nil</span> <span class=\"keyword\">and</span> headers[<span class=\"string\">&quot;user-id&quot;</span>] ~= <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> </span><br><span class=\"line\">  <span class=\"comment\">-- 整理请求key</span></span><br><span class=\"line\">  key = <span class=\"string\">&quot;grey_key_prefix:&quot;</span>..headers[<span class=\"string\">&quot;user-id&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 灰度控制</span></span><br><span class=\"line\">ngx.header[<span class=\"string\">&quot;x-response-switch&quot;</span>] = <span class=\"string\">&quot;origin&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> v, ok = ngx.shared[<span class=\"string\">&quot;grey_host_dict&quot;</span>]:get(key)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> v <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"comment\">-- base_upstream 是外部配置的变量，正常服务</span></span><br><span class=\"line\">  ngx.var.switch_upstream = ngx.var.base_upstream</span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">  <span class=\"comment\">-- grey_upstream 是外部配置的变量，灰度服务</span></span><br><span class=\"line\">  ngx.header[<span class=\"string\">&quot;x-response-switch&quot;</span>] = <span class=\"string\">&quot;grey&quot;</span></span><br><span class=\"line\">  ngx.var.switch_upstream = ngx.var.grey_upstream</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 重载灰度配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ngx.var.document_uri == <span class=\"string\">&quot;/reload_grey_file&quot;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> fd = <span class=\"built_in\">io</span>.<span class=\"built_in\">open</span>(ngx.var.grey_file, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> s = fd:<span class=\"built_in\">read</span>(<span class=\"string\">&quot;*a&quot;</span>)</span><br><span class=\"line\">    fd:<span class=\"built_in\">close</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 输出load file 的内容</span></span><br><span class=\"line\">    ngx.<span class=\"built_in\">print</span>(<span class=\"string\">&quot;load json: &quot;</span>)</span><br><span class=\"line\">    ngx.say(s)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> json = cjosn:new()</span><br><span class=\"line\">    <span class=\"keyword\">local</span> tb = json.decode(s)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tb) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"comment\">-- 输出实际加入的灰度信息</span></span><br><span class=\"line\">        ngx.say(<span class=\"string\">&quot;kv: &quot;</span>..k..<span class=\"string\">&quot; =&gt; &quot;</span>..v)</span><br><span class=\"line\">        ngx.shared[<span class=\"string\">&quot;grey_host_dict&quot;</span>]:safe_set(k, v)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    ngx.<span class=\"built_in\">exit</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>openresty 配置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"attribute\">lua_shared_dict</span> grey_mem <span class=\"number\">1m</span>; <span class=\"comment\"># 配置灰度信息跨 worker 共享内存块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 配置基础变量</span></span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$base_upstream</span> <span class=\"string\">&quot;grey.test.switch&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$grey_upstream</span> <span class=\"string\">&quot;test.switch&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$grey_host_dict</span> <span class=\"string\">&quot;grey_mem2&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$grey_file</span> <span class=\"string\">&quot;/usr/local/openresty/custom/grey/config.json&quot;</span>; <span class=\"comment\"># &#123;&quot;grey_key_prefix:1&quot;: &quot;1&quot;&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">1280</span>;</span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 配置切换上下游变量便于切换流量</span></span><br><span class=\"line\">    <span class=\"attribute\">set</span> <span class=\"variable\">$switch_upstream</span> <span class=\"variable\">$switch_upstream</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://<span class=\"variable\">$switch_upstream</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>这样就达到了如开篇图的效果。</p>\n<h4 id=\"基于-redis-的灰度识别\"><a href=\"#基于-redis-的灰度识别\" class=\"headerlink\" title=\"基于 redis 的灰度识别\"></a>基于 redis 的灰度识别</h4><p>但是，基于文件的灰度配置不便，因此可以利用 openresty 提供的各种后端存储库实现方便的配置，如：<code>ngx_postgres</code> <code>ngx_redis2</code> <code>ngx_redis</code> 等模块， <code>lua-resty-memcached</code> <code>lua-resty-mysql</code> <code>lua-resty-redis</code> 等库。</p>\n<p>模块的简单使用如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"section\">upstream</span> redis_backend &#123;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:6379</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">keepalive</span> <span class=\"number\">16</span>; <span class=\"comment\"># redis持久化连接</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"section\">location</span> = /redis &#123;</span><br><span class=\"line\">    internal; <span class=\"comment\"># 标记为内部服务，外部无法请求到该路由</span></span><br><span class=\"line\">    <span class=\"attribute\">set_unescape_uri</span> <span class=\"variable\">$query</span> <span class=\"variable\">$arg_query</span>; <span class=\"comment\"># 处理请求参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">redis2_raw_query</span> <span class=\"variable\">$query</span>; <span class=\"comment\"># 传递给redis后端处理原始 redis 请求</span></span><br><span class=\"line\">    <span class=\"attribute\">redis2_pass</span> redis_backend;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>修改lua代码:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 获取请求头</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ngx.req.is_internal <span class=\"keyword\">then</span> </span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> parser = <span class=\"built_in\">require</span> <span class=\"string\">&quot;redis.parser&quot;</span> <span class=\"comment\">-- 引入基础库，解析redis响应</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> headers = ngx.req.get_headers()</span><br><span class=\"line\"><span class=\"keyword\">local</span> key = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> headers ~= <span class=\"literal\">nil</span> <span class=\"keyword\">and</span> headers[<span class=\"string\">&quot;user-id&quot;</span>] ~= <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> </span><br><span class=\"line\">  <span class=\"comment\">-- 整理请求key</span></span><br><span class=\"line\">  key = <span class=\"string\">&quot;grey_key_prefix:&quot;</span>..headers[<span class=\"string\">&quot;user-id&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hmget</span><span class=\"params\">(dict, key)</span></span></span><br><span class=\"line\">    <span class=\"comment\">-- 构造内部请求</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> res = ngx.location.capture(<span class=\"string\">&quot;/redis?query=hmget &quot;</span> .. dict .. <span class=\"string\">&quot; &quot;</span>.. key ..<span class=\"string\">&quot;\\r\\n&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> replies = parser.parse_replies(res.body, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\">-- 解析响应结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, reply <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(replies) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> reply[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 灰度控制</span></span><br><span class=\"line\">ngx.header[<span class=\"string\">&quot;x-response-switch&quot;</span>] = <span class=\"string\">&quot;origin&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> v, ok = hmget(<span class=\"string\">&quot;grey_host_dict&quot;</span>, key)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> v <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"comment\">-- base_upstream 是外部配置的变量，正常服务</span></span><br><span class=\"line\">  ngx.var.switch_upstream = ngx.var.base_upstream</span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">  <span class=\"comment\">-- grey_upstream 是外部配置的变量，灰度服务</span></span><br><span class=\"line\">  ngx.header[<span class=\"string\">&quot;x-response-switch&quot;</span>] = <span class=\"string\">&quot;grey&quot;</span></span><br><span class=\"line\">  ngx.var.switch_upstream = ngx.var.grey_upstream</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>如此就完成了轻量级的灰度流量自动切换。<br>Openresty还可以实现更加复杂的流量控制，可以直接使用成熟的网关框架；如果服务较小也可以直接基于 openresty 做一些简单的任务。</p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ol>\n<li>OpenResty 官网 <code>https://openresty.org/cn/</code></li>\n<li>OpenResty 最佳实践 <code>https://moonbingbing.gitbooks.io/openresty-best-practices/content/</code></li>\n<li>OpenResty 开源组件 <code>https://github.com/search?q=openresty&amp;type=repositories</code></li>\n</ol>\n",
            "tags": [
                "openresty",
                "nginx",
                "lua"
            ]
        },
        {
            "id": "http://qiubo.ink/2023/08/30/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8wrk%E8%BF%9B%E8%A1%8C%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/",
            "url": "http://qiubo.ink/2023/08/30/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8wrk%E8%BF%9B%E8%A1%8C%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/",
            "title": "学习使用wrk进行压力测试",
            "date_published": "2023-08-30T13:13:08.000Z",
            "content_html": "<p>最近发现了一个新的 HTTP 压力测试工具 <code>wrk</code>，非常容易上手和使用。<code>wrk</code> 使用非常简单，对应的命令行参数也不多，但是足够自己简单压测一些 <code>http</code> 服务了。官方下载地址为 <code>https://github.com/wg/wrk</code>。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/images/2023-08-30/01.png\"></p>\n<p>根据官方示例，其实 <code>wrk</code> 最大的特点是支持动态脚本修改请求，本身不大的身体集成了 <code>luajit</code> 用于实施请求时动态修改请求&#x2F;响应。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h5 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h5><p>由于wrk依赖的一些特性在Windows上没有，因此<a href=\"https://github.com/wg/wrk/issues/187\">不支持</a>在windows上编译运行，编译成功也会有一些奇怪的问题。因此建议曲线使用，在 docker 中编译, 借助docker在windows上使用。</p>\n<h5 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h5><ol>\n<li><code>brew install wrk</code></li>\n<li>源码安装<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取源码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/wg/wrk</span><br><span class=\"line\"><span class=\"comment\"># mbp2018 大概编译10分钟</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> wrk &amp;&amp; make</span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\">wrk -h</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h5><p>源码安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取源码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/wg/wrk</span><br><span class=\"line\"><span class=\"comment\"># 编译过程相关依赖可以参照 dockerfile 中的依赖项</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> wrk &amp;&amp; make</span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\">wrk -h</span><br></pre></td></tr></table></figure>\n<h5 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h5><p>Dockerfile内容如下，较少的依赖，编译后无依赖项</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:latest as BUILD</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> root</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> ./ /root/wrk</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">cd</span> wrk &amp;&amp; apt update &amp;&amp; apt install make gcc unzip openssl libterm-readkey-perl -y </span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> make</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:latest</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=BUILD /root/wrk/wrk /usr/local/bin</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用介绍\"><a href=\"#使用介绍\" class=\"headerlink\" title=\"使用介绍\"></a>使用介绍</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wrk: invalid option -- h</span><br><span class=\"line\">Usage: wrk &lt;options&gt; &lt;url&gt;                            </span><br><span class=\"line\">  Options:                                            </span><br><span class=\"line\">    -c, --connections &lt;N&gt;  Connections to keep open   # 总连接数(客户端数)</span><br><span class=\"line\">    -d, --duration    &lt;T&gt;  Duration of test           # 测试运行总时间</span><br><span class=\"line\">    -t, --threads     &lt;N&gt;  Number of threads to use   # 线程数</span><br><span class=\"line\">                                                      </span><br><span class=\"line\">    -s, --script      &lt;S&gt;  Load Lua script file       # 执行脚本 </span><br><span class=\"line\">    -H, --header      &lt;H&gt;  Add header to request      # 全局请求 header</span><br><span class=\"line\">        --latency          Print latency statistics   # 输出延迟统计信息</span><br><span class=\"line\">        --timeout     &lt;T&gt;  Socket/request timeout     # 单次请求超时时间</span><br><span class=\"line\">    -v, --version          Print version details      # 版本</span><br><span class=\"line\">                                                      </span><br><span class=\"line\">  Numeric arguments may include a SI unit (1k, 1M, 1G) # 数值参数可以包括单位(1K、1M、1G)</span><br><span class=\"line\">  Time arguments may include a time unit (2s, 2m, 2h)  # 时间参数可以包括时间单位(2s、2m、2h)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>使用 <code>nodejs</code> 写了一个脚本, 用于测试并发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">http</span> <span class=\"operator\">=</span> require(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">port</span> <span class=\"operator\">=</span> Number(process.argv[<span class=\"number\">2</span>]) || <span class=\"number\">0</span>;</span><br><span class=\"line\">console.log(port);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">let</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">http.createServer((req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.url.includes(<span class=\"string\">&#x27;status&#x27;</span>)) <span class=\"keyword\">return</span> res.end();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.url.includes(<span class=\"string\">&#x27;count&#x27;</span>)) &#123; <span class=\"comment\">// 可以事后统计实际处理的请求数量</span></span><br><span class=\"line\">        res.write(`hello $&#123;count&#125;`);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.end();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">let</span> <span class=\"variable\">closed</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 记录请求被取消</span></span><br><span class=\"line\">    req.on(<span class=\"string\">&#x27;close&#x27;</span>, () =&gt; &#123;</span><br><span class=\"line\">        closed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (closed) &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&#x27;req cancel&#x27;</span>); <span class=\"comment\">// 最终停止时可能有部分请求被强制取消，作为记录</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.end();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.write(`hello $&#123;port&#125;`);</span><br><span class=\"line\">        res.statusCode = <span class=\"number\">200</span>;</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">        count++; <span class=\"comment\">// 计数</span></span><br><span class=\"line\">    &#125;, Math.random() * <span class=\"number\">1000</span>) <span class=\"comment\">// 模拟响应处理延迟</span></span><br><span class=\"line\">&#125;).listen(port, () =&gt; &#123;</span><br><span class=\"line\">    console.log(`server is running at $&#123;port&#125;`);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用 <code>pm2</code> 进程管理启动集群服务，多进程方式处理响应</p>\n<p>动态请求脚本内容如下</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">counter = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"built_in\">path</span> = <span class=\"string\">&quot;/&quot;</span> .. counter</span><br><span class=\"line\">    wrk.headers[<span class=\"string\">&quot;X-Counter&quot;</span>] = counter # 为每次请求头增加叠加数字</span><br><span class=\"line\">    counter = counter + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrk.<span class=\"built_in\">format</span>(<span class=\"literal\">nil</span>, <span class=\"built_in\">path</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>请求示例如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wrk -c 5 -t 5 -s 1280.lua --latency http://127.0.0.1:1280/</span><br><span class=\"line\"></span><br><span class=\"line\">Running 10s test @ http://127.0.0.1:1280/   # 默认执行10s</span><br><span class=\"line\">  5 threads and 5 connections               # 5个线程，一共5个客户端, 平均一个线程作为一个客户端 </span><br><span class=\"line\">  Thread Stats   Avg      Stdev     Max     +/- Stdev </span><br><span class=\"line\">                (平均值)  (标准差)   (最大值)  (正负一个标准差所占比例)</span><br><span class=\"line\">    Latency   531.20ms  284.56ms   1.01s    59.34%  (延迟)[主要关注]</span><br><span class=\"line\">    Req/Sec     2.44      2.57     10.00    91.95%  (每秒处理中的请求数)</span><br><span class=\"line\">  Latency Distribution  (延迟分布)</span><br><span class=\"line\">     50%  576.00ms      # 50%以内的请求</span><br><span class=\"line\">     75%  777.17ms      # 75%以内的请求</span><br><span class=\"line\">     90%  914.97ms      # 90%以内的请求</span><br><span class=\"line\">     99%    1.01s       # 99%以内的请求</span><br><span class=\"line\">  91 requests in 10.02s, 13.95KB read   (10s之内共处理完成了91个请求，读取了13.95KB数据)</span><br><span class=\"line\">Requests/sec:      9.09     (平均每秒262.22个请求)</span><br><span class=\"line\">Transfer/sec:      1.39KB   (平均每秒读取数据554.27KB)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ol>\n<li><code>https://www.escapelife.site/posts/4b014d0b.html</code></li>\n<li><code>https://corvo.myseu.cn/2021/03/24/2021-03-24-使用wrk压测并精细控制并发请求量/</code></li>\n<li><code>http://www.taodudu.cc/news/show-5177501.html?action=onClick</code></li>\n</ol>\n",
            "tags": [
                "测试",
                "lua",
                "wrk"
            ]
        },
        {
            "id": "http://qiubo.ink/2023/03/16/Nodejs-v19-x-%E6%94%AF%E6%8C%81%E6%89%93%E5%8C%85%E5%8F%AF%E6%89%A7%E8%A1%8C%E5%8D%95%E6%96%87%E4%BB%B6/",
            "url": "http://qiubo.ink/2023/03/16/Nodejs-v19-x-%E6%94%AF%E6%8C%81%E6%89%93%E5%8C%85%E5%8F%AF%E6%89%A7%E8%A1%8C%E5%8D%95%E6%96%87%E4%BB%B6/",
            "title": "Nodejs v19.x 支持打包可执行单文件",
            "date_published": "2023-03-16T10:45:34.000Z",
            "content_html": "<p>官方文档：<a href=\"https://nodejs.org/dist/latest-v19.x/docs/api/single-executable-applications.html\">Single executable applications</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"特性介绍：\"><a href=\"#特性介绍：\" class=\"headerlink\" title=\"特性介绍：\"></a>特性介绍：</h2><p>有的语言原生工具链就支持打包单独可执行文件，如：<code>go build</code> <code>dart complite exe</code></p>\n<p>有的有社区解决方案，如：<code>PyInstaller</code> nodejs社区的：<a href=\"https://github.com/vercel/ncc\"><code>ncc</code></a>&#x2F;<a href=\"https://github.com/vercel/pkg\"><code>pkg</code></a></p>\n<p>如今，nodejs 在 v19.x 引入实验性单独可执行文件，提供了官方打包工具链。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>基础环境：安装 Nodejs v19.x 及以上，只有最新版本支持</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  1.创建 js 文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;console.log(`Hello, $&#123;process.argv[2]&#125;!`);&#x27;</span> &gt; hello.js</span><br><span class=\"line\"><span class=\"comment\"># 2. 复制当前版本的 node 二进制文件到当前目录，并重命名为想要的二进制名称</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> $(<span class=\"built_in\">which</span> node) hello</span><br><span class=\"line\"><span class=\"comment\"># 3. 进行打包</span></span><br><span class=\"line\">npx postject hello NODE_JS_CODE hello.js \\</span><br><span class=\"line\">    --sentinel-fuse NODE_JS_FUSE_fce680ab2cc467b6e072b8b5df1996b2 \\</span><br><span class=\"line\">    --macho-segment-name NODE_JS <span class=\"comment\"># 最后一行只有 macos 需要</span></span><br><span class=\"line\"><span class=\"comment\"># 4. 运行可执行文件</span></span><br><span class=\"line\">./hello world</span><br><span class=\"line\">Hello, world!</span><br></pre></td></tr></table></figure>\n<p>以上是官方示例，通过第三步可以看出，实际上是 <a href=\"https://github.com/nodejs/postject\"><code>postject</code></a> 在起作用, 可以自行安装使用</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>目前只能打包一个 js 文件， 与 pkg 是打包一整个文件夹不同，是否就不能应用了呢？顺势可以想到把整个项目打包为单独的 js 文件不就解决了这个问题了吗？这便是 ncc（Compile a Node.js project into a single file. Supports TypeScript, binary addons, dynamic requires.）, 尝试一下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> singleapp</span><br><span class=\"line\"><span class=\"comment\"># 初始化项目</span></span><br><span class=\"line\">npm init</span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">npm i -S express</span><br><span class=\"line\"><span class=\"comment\"># ...创建多文件文件夹及相互依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 ncc 打包单文件， dist/index.js</span></span><br><span class=\"line\">ncc build app.js -o dist</span><br><span class=\"line\"><span class=\"comment\"># 复制当前版本的 node 二进制文件到当前目录，并重命名为想要的二进制名称</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> $(<span class=\"built_in\">which</span> node) singleapp</span><br><span class=\"line\"><span class=\"comment\"># 3. 进行打包</span></span><br><span class=\"line\">npx postject singleapp NODE_JS_CODE dist/index.js \\</span><br><span class=\"line\">    --sentinel-fuse NODE_JS_FUSE_fce680ab2cc467b6e072b8b5df1996b2 \\</span><br><span class=\"line\">    --macho-segment-name NODE_JS <span class=\"comment\"># 最后一行只有 macos 需要</span></span><br><span class=\"line\"><span class=\"comment\"># 4. 运行可执行文件</span></span><br><span class=\"line\">./singleapp</span><br><span class=\"line\">server is running at 127.0.0.1:3000</span><br></pre></td></tr></table></figure>\n<p>由于打包了 nodevm 所以生成的二进制文件会比较大，单文件打包结果是 83Mb，但是 node 二进制原包是 90MB，应该是有压缩，可以使用 <code>upx</code> 进行二进制加壳压缩。</p>\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>Nodejs 多年呼吁的打包功能官方终于开始启动了，还有一些瑕疵，而且实验性功能改动到后边会比较大，可以多多跟进，目前的官方讨论区在</p>\n<ul>\n<li><a href=\"https://github.com/nodejs/single-executable/discussions\">讨论区</a></li>\n<li><a href=\"https://github.com/nodejs/node/issues/43432\">Initiative: Single Executable Application #43432</a></li>\n</ul>\n<p>以前社区百花齐放提供了很多的打包方案，<code>pkg</code>, <code>jsexe</code>, <code>ncc</code>, <code>bytecode</code> 等等，其实 <code>webpack</code> 这些也是可以支持后端项目打包的，也可以打包合并为单独 js 文件，复用 js 打包生态，源码混淆，sourcemap 支持等等</p>\n",
            "tags": [
                "nodejs"
            ]
        },
        {
            "id": "http://qiubo.ink/2021/11/11/%E6%AC%A1%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/",
            "url": "http://qiubo.ink/2021/11/11/%E6%AC%A1%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/",
            "title": "次常用git命令",
            "date_published": "2021-11-11T00:00:00.000Z",
            "content_html": "<p>部分场景下需要获取一些git信息, 如CI&#x2F;CD自动化部署时, 获取最近hashID, 提交信息等</p>\n<span id=\"more\"></span>\n\n<ol>\n<li>获取当前分支名称<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rev-parse --abbrev-ref HEAD</span><br><span class=\"line\"><span class=\"comment\"># f-20210903-entrust-pay-third</span></span><br></pre></td></tr></table></figure></li>\n<li>获取最近一次 commitID<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rev-parse HEAD</span><br><span class=\"line\"><span class=\"comment\"># 6f50fe018c261e3aa8e2c5199681a42bc25eb6ca</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取指定分支最后一次commitID</span></span><br><span class=\"line\">git rev-parse master</span><br><span class=\"line\"><span class=\"comment\"># 7226af556d8e7a80192ad3db8cb0fb319425ac87</span></span><br></pre></td></tr></table></figure></li>\n<li>获取.git的实际目录<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rev-parse --git-dir</span><br><span class=\"line\"><span class=\"comment\"># .git</span></span><br></pre></td></tr></table></figure></li>\n<li>获取git仓库顶层目录<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rev-parse --show-toplevel_</span><br><span class=\"line\"><span class=\"comment\"># /Users/xiaoyiyu/Desktop/your_program_dir</span></span><br></pre></td></tr></table></figure></li>\n<li>获取指提交信息详情<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取作者</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(git <span class=\"built_in\">log</span> --pretty=format:“%an” 7226af556d8e7a80192ad3db8cb0fb319425ac87 -1</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取提交信息</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(git <span class=\"built_in\">log</span> --pretty=format:“%s” 7226af556d8e7a80192ad3db8cb0fb319425ac87 -1)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取修改时间</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(git <span class=\"built_in\">log</span> --pretty=format:“%ad” 7226af556d8e7a80192ad3db8cb0fb319425ac87 --<span class=\"built_in\">date</span>=format:<span class=\"string\">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span> -1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取提交时间</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(git <span class=\"built_in\">log</span> --pretty=format:“%<span class=\"built_in\">cd</span>” 7226af556d8e7a80192ad3db8cb0fb319425ac87 --<span class=\"built_in\">date</span>=format:<span class=\"string\">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span> -1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取提交者的邮件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(git <span class=\"built_in\">log</span> --pretty=format:“%ae” 7226af556d8e7a80192ad3db8cb0fb319425ac87 -1)</span><br></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "http://qiubo.ink/2021/03/04/redis%E9%99%90%E6%B5%81%E6%96%B9%E6%B3%95/",
            "url": "http://qiubo.ink/2021/03/04/redis%E9%99%90%E6%B5%81%E6%96%B9%E6%B3%95/",
            "title": "redis限流方法",
            "date_published": "2021-03-04T16:41:52.000Z",
            "content_html": "<ol>\n<li>利用之前的redis锁来处理队列请求</li>\n<li>使用zset有序集合限定某一时间内的流量</li>\n<li>使用令牌桶算法限流</li>\n</ol>\n<span id=\"more\"></span>\n\n<h4 id=\"1-利用之前的redis锁来处理队列请求\"><a href=\"#1-利用之前的redis锁来处理队列请求\" class=\"headerlink\" title=\"1. 利用之前的redis锁来处理队列请求\"></a>1. 利用之前的redis锁来处理队列请求</h4><p>利用<code>set nx</code> 原子操作强行排队</p>\n<h4 id=\"2-使用zset有序集合限定某一时间内的流量\"><a href=\"#2-使用zset有序集合限定某一时间内的流量\" class=\"headerlink\" title=\"2. 使用zset有序集合限定某一时间内的流量\"></a>2. 使用zset有序集合限定某一时间内的流量</h4><p>原理</p>\n<blockquote>\n<p>zset为有序集合, 记录下某一key值,相同分数, 不同访问时间<br><code>zadd user:10 0 1617070146897</code>, 请求到来时, 获取到(限流总数-1)的有序数据量, 即当前限制key的次数访问记录, 判断第一个值的时间, 是否为在限制区间内</p>\n</blockquote>\n<p>相关命令操作</p>\n<blockquote>\n<p>记限制单个用户发送验证码的访问频率为1分钟1次, 5分钟2次,1小时5次, 一天10次</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 请求进入, 获取已存入的</span></span><br><span class=\"line\">zcard user:10:<span class=\"variable\">$url</span> =&gt; <span class=\"variable\">$count</span></span><br><span class=\"line\"><span class=\"comment\"># 获取前一条数据(每分钟)</span></span><br><span class=\"line\">zrange user:10:<span class=\"variable\">$url</span> -1 -1</span><br><span class=\"line\"><span class=\"comment\"># 对比时间 $time -$result &lt; 1000</span></span><br><span class=\"line\"><span class=\"comment\"># 获取前一条数据(5分钟)</span></span><br><span class=\"line\">zrange user:10:<span class=\"variable\">$url</span> -2 -2</span><br><span class=\"line\"><span class=\"comment\"># 对比时间 $time -$result &lt; 5000</span></span><br><span class=\"line\"><span class=\"comment\"># 获取前一条数据(60分钟)</span></span><br><span class=\"line\">zrange user:10:<span class=\"variable\">$url</span> -5 -5 </span><br><span class=\"line\"><span class=\"comment\"># 对比时间 $time -$result &lt; 3600000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取前一条数据(一天)</span></span><br><span class=\"line\">zrange user:10:<span class=\"variable\">$url</span> -10 -10 </span><br><span class=\"line\"><span class=\"comment\"># 对比时间 $time -$result &lt; 24 * 3600 * 000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全部通过, 记下本次</span></span><br><span class=\"line\">zadd user:10:<span class=\"variable\">$url</span> <span class=\"variable\">$time</span> <span class=\"variable\">$time</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同时删除,超过24小时+1ms的数据</span></span><br><span class=\"line\">zremrangebyscore user:10:<span class=\"variable\">$url</span> 0 (<span class=\"variable\">$time</span> - 24 * 3600 * 1000 + 1)</span><br><span class=\"line\"><span class=\"comment\"># 可以先查询再删除,减少数据变动</span></span><br><span class=\"line\">zcount user:10:<span class=\"variable\">$url</span> 0 (<span class=\"variable\">$time</span> - 24 * 3600 * 1000 + 1)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意点: 每条数据的最大保存时间为,限制幅度的最大时间, 此处为 24 * 3600 + 1</span></span><br></pre></td></tr></table></figure>\n<p>相关代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RateLimiter</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; type 限制类型, user|uri|ip, 可组合, user,uri|uri,ip|user,ip|user,uri,ip</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">type, msg</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用于判断生成 zset 的 key</span></span><br><span class=\"line\">        <span class=\"comment\">// 空,则仅对user进行判断</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">types</span> = (type || <span class=\"string\">&#x27;user&#x27;</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = msg;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">rules</span> = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">getKey</span>(<span class=\"params\">req</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> keys = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> <span class=\"variable language_\">this</span>.<span class=\"property\">types</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(item) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;user&#x27;</span>:</span><br><span class=\"line\">                    key.<span class=\"title function_\">push</span>(<span class=\"string\">`user:<span class=\"subst\">$&#123;req.userIfo.id&#125;</span>`</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;uri&#x27;</span>:</span><br><span class=\"line\">                    key.<span class=\"title function_\">push</span>(<span class=\"string\">`uri:<span class=\"subst\">$&#123;req.url&#125;</span>`</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;ip&#x27;</span>:</span><br><span class=\"line\">                    key.<span class=\"title function_\">push</span>(<span class=\"string\">`ip:<span class=\"subst\">$&#123;req.get(<span class=\"string\">&#x27;X-Real-IP&#x27;</span>) || req.ip&#125;</span>`</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;:&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">rate</span>(<span class=\"params\">rules</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rules) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;ReteLimiter.rate is not rules&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">rules</span> = (rules || []).<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a.<span class=\"property\">time</span> &gt; b.<span class=\"property\">time</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">action</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">action</span>(<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getKey</span>(req);</span><br><span class=\"line\">        <span class=\"comment\">// 组织定义对象</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> redis = req.<span class=\"property\">redis</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> item <span class=\"keyword\">of</span> <span class=\"variable language_\">this</span>.<span class=\"property\">rules</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">let</span> limit = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">query</span>(redis, key, item);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (limit) &#123;</span><br><span class=\"line\">               res.<span class=\"title function_\">statusCoce</span>(<span class=\"number\">429</span>);</span><br><span class=\"line\">               res.<span class=\"title function_\">send</span>(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> || <span class=\"string\">&#x27;Many too request&#x27;</span>&#125;)</span><br><span class=\"line\">               <span class=\"keyword\">return</span> res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"title function_\">next</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 记录</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">mark</span>(redis, key, <span class=\"variable language_\">this</span>.<span class=\"property\">rules</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">rules</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span>].<span class=\"property\">time</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">mark</span>(<span class=\"params\">redis, key, maxRule</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> time = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>();</span><br><span class=\"line\">        redis.<span class=\"title function_\">zadd</span>(key, time, time);</span><br><span class=\"line\">        <span class=\"comment\">// 移除过期</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> remTime = time - maxRule * <span class=\"number\">1000</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> count = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">zcount</span>(key, <span class=\"number\">0</span>, remTime);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> redis.<span class=\"title function_\">zremrangebysore</span>(key, <span class=\"number\">0</span>, remTime);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">RedisConection</span>&#125; redis </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; ops 查询单位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Number</span>&#125; ops.time 单位时长, 单位:s, 1s, 300s, 3600s等</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Number</span>&#125; ops.rate 单位时间限制次数 </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Boolean</span>&#125; 是否被限制 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">query</span>(<span class=\"params\">redis, key, &#123;time, rate&#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> now = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">zrange</span>(key, -<span class=\"number\">1</span> * rate, -<span class=\"number\">1</span> * rate);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now - result[<span class=\"number\">0</span>] &lt; time * <span class=\"number\">1000</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-使用令牌桶算法限流\"><a href=\"#3-使用令牌桶算法限流\" class=\"headerlink\" title=\"3. 使用令牌桶算法限流\"></a>3. 使用令牌桶算法限流</h4><ol>\n<li>漏桶<blockquote>\n<p>以一定速度生成令牌, 放入桶内, 请求来临时, 桶内以固定速率释放令牌, 请求获取到令牌,则继续进行, 无峰值访问, 实际请求强制排队等候, 类似setnx, 可以用 <code>lpush/blpop</code>模拟实现, 假定生成与释放令牌速度相同, 即定时生成即消费</p>\n</blockquote>\n</li>\n</ol>\n<p>漏桶</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成</span></span><br><span class=\"line\">lpush user:10:<span class=\"variable\">$url</span> <span class=\"variable\">$token</span></span><br><span class=\"line\"><span class=\"comment\"># 获取</span></span><br><span class=\"line\">blpop user:10:<span class=\"variable\">$url</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>令牌桶<blockquote>\n<p>以一定速度生成令牌, 放入桶内, 请求来临时,从桶内获取令牌, 如果桶内为空则拒绝请求, 当请求速度大于令牌生成速度时, 桶内在一定时间内为空, 产生拒绝服务, 可以产生较小峰值</p>\n</blockquote>\n</li>\n</ol>\n<p>共同缺点, 需要额外进程&#x2F;线程以固定速率生成令牌放入队列, 利用的是 <code>lpush/blpop/llen</code>适合通用接口流量削峰填谷</p>\n<p>令牌桶</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 额外进程生成令牌</span></span><br><span class=\"line\">llen user:10:<span class=\"variable\">$url</span> =&gt; 如果大于设定值如100, 则不再继续生成</span><br><span class=\"line\">lpush user:10:<span class=\"variable\">$url</span> <span class=\"variable\">$token</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求进入(redis blpop先到先得,不会超发)</span></span><br><span class=\"line\">blpop user:10:<span class=\"variable\">$url</span> </span><br><span class=\"line\"><span class=\"comment\"># 拿到令牌继续操作</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>",
            "tags": [
                "redis"
            ]
        },
        {
            "id": "http://qiubo.ink/2021/02/20/%E7%94%A8200%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0web%E6%A1%86%E6%9E%B6/",
            "url": "http://qiubo.ink/2021/02/20/%E7%94%A8200%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0web%E6%A1%86%E6%9E%B6/",
            "title": "用200行代码实现web框架",
            "date_published": "2021-02-20T16:58:31.000Z",
            "content_html": "<p>简化的web框架实现, 实现类似express的函数式路由注册, 支持模糊路由匹配, 支持洋葱中间件模型</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>说明: </p>\n<ol>\n<li>无特殊表达式</li>\n<li>移除类型可以直接作为js使用</li>\n</ol>\n</blockquote>\n<p><a href=\"https://github.com/opentoys/baseweb\">已实现多语言</a> <a href=\"https://github.com/opentoys/singleweb\">单文件版</a></p>\n<p>实现前提:</p>\n<ol>\n<li>ts基本语法</li>\n<li>仅依赖内置<code>http</code>库</li>\n<li>利用 <code>Map</code> 实现路由查找</li>\n</ol>\n<p>实现内容:</p>\n<ol>\n<li>基础服务</li>\n<li>路由查找</li>\n<li>上下文处理</li>\n<li>超时处理</li>\n<li>中间件</li>\n<li>错误处理</li>\n</ol>\n<p>核心内容包含3个类:</p>\n<ol>\n<li>Application</li>\n<li>Router</li>\n<li>Context</li>\n</ol>\n<p>1个额外类型定义</p>\n<ol>\n<li><code>type Handler=(ctx: Context) =&gt; void|Promise&lt;void&gt;</code></li>\n</ol>\n<p>特殊语法介绍:</p>\n<ol>\n<li>自定义类型 <code>type a=()=&gt;void</code> </li>\n<li>空值判断 <code>var a = id ?? 0</code></li>\n<li>可选参数 <code>function(a?:any)</code></li>\n<li>解构参数 <code>function(...arr: string[])</code></li>\n</ol>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><h4 id=\"1-Router\"><a href=\"#1-Router\" class=\"headerlink\" title=\"1. Router\"></a>1. Router</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Handler</span>=<span class=\"function\">(<span class=\"params\">ctx: Context</span>) =&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt; | <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Router</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认路由</span></span><br><span class=\"line\">    <span class=\"attr\">uri</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 子级路由</span></span><br><span class=\"line\">    <span class=\"attr\">childrenRoute</span>:<span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">Router</span>&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">Router</span>&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 中间件处理函数</span></span><br><span class=\"line\">    <span class=\"attr\">middleware</span>:<span class=\"title class_\">Handler</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">u: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">uri</span> = u ?? <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 挂载自定义路由</span></span><br><span class=\"line\">    <span class=\"title function_\">hook</span>(<span class=\"params\">r: Router</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">childrenRoute</span>.<span class=\"title function_\">set</span>(r.<span class=\"property\">uri</span>, r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 挂载中间件</span></span><br><span class=\"line\">    <span class=\"title function_\">use</span>(<span class=\"params\">...a:Handler[]</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>.<span class=\"title function_\">push</span>(...a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// get请求</span></span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\">uri: <span class=\"built_in\">string</span>, ...params: Handler[]</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">any</span>(<span class=\"string\">&#x27;GET&#x27;</span>, uri, ...params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认路由加载</span></span><br><span class=\"line\">    <span class=\"title function_\">any</span>(<span class=\"params\">method: <span class=\"built_in\">string</span>, uri: <span class=\"built_in\">string</span>, ...handler: Handler[]</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (uri.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;/&#x27;</span>) == <span class=\"number\">0</span>) uri = uri.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> uris = uri.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">r</span>: <span class=\"title class_\">Router</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果添加的为多级路由, 则拆分挂载</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> u <span class=\"keyword\">of</span> uris) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> nr = <span class=\"keyword\">new</span> <span class=\"title class_\">Router</span>(u);</span><br><span class=\"line\">            r.<span class=\"property\">childrenRoute</span>.<span class=\"title function_\">set</span>(u, nr);</span><br><span class=\"line\">            r = nr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        r.<span class=\"property\">middleware</span>.<span class=\"title function_\">push</span>(...handler);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 路由分组</span></span><br><span class=\"line\">    <span class=\"title function_\">group</span>(<span class=\"params\">prefix: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">any</span>(<span class=\"string\">&#x27;ANY&#x27;</span>, prefix);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 分组函数别名</span></span><br><span class=\"line\">    <span class=\"title function_\">prefix</span>(<span class=\"params\">prefix: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">any</span>(<span class=\"string\">&#x27;ANY&#x27;</span>, prefix);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 实现路由查找及执行</span></span><br><span class=\"line\">    <span class=\"title function_\">find</span>(<span class=\"params\">ctx: Context, uris?: <span class=\"built_in\">string</span>[]</span>) &#123;</span><br><span class=\"line\">        uris = uris ?? ctx.<span class=\"property\">url</span>.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">r</span>: <span class=\"title class_\">Router</span>|<span class=\"literal\">null</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        ctx.<span class=\"property\">middleware</span>.<span class=\"title function_\">push</span>(...r?.<span class=\"property\">middleware</span> ?? []);</span><br><span class=\"line\">        <span class=\"comment\">// 查询递归执行子路由</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> uris) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 查询下一级路由</span></span><br><span class=\"line\">            r = r?.<span class=\"property\">childrenRoute</span>.<span class=\"title function_\">get</span>(uris[i]) ?? <span class=\"literal\">null</span>;</span><br><span class=\"line\">            ctx.<span class=\"property\">middleware</span>.<span class=\"title function_\">push</span>(...r?.<span class=\"property\">middleware</span> ?? []);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有查到最后的路由, 手动添加404处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!r) ctx.<span class=\"property\">middleware</span>.<span class=\"title function_\">push</span>(<span class=\"keyword\">async</span> (ctx) =&gt; &#123;</span><br><span class=\"line\">            ctx.<span class=\"property\">statusCode</span> = <span class=\"number\">404</span>;</span><br><span class=\"line\">            ctx.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Not found&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 开始依次执行中间件</span></span><br><span class=\"line\">        ctx.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Application\"><a href=\"#2-Application\" class=\"headerlink\" title=\"2. Application\"></a>2. Application</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 核心app类继承路由, 即为全局根路由</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Router</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">server</span>: http.<span class=\"property\">Server</span>;</span><br><span class=\"line\">    <span class=\"attr\">timeout</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attr\">errorHandler</span>: <span class=\"function\">(<span class=\"params\">err: <span class=\"built_in\">Error</span>, ctx: Context</span>) =&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt;;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化根路由</span></span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 默认错误处理函数</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">errorHandler</span> = <span class=\"keyword\">async</span> (err, ctx) =&gt; &#123;</span><br><span class=\"line\">            ctx.<span class=\"property\">statusCode</span> = <span class=\"number\">500</span>;</span><br><span class=\"line\">            ctx.<span class=\"title function_\">send</span>(err.<span class=\"property\">stack</span> ?? <span class=\"string\">&#x27;server error&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 创建服务</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">server</span> = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 初始化上下文</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> ctx = <span class=\"keyword\">new</span> <span class=\"title class_\">Context</span>(req, res);</span><br><span class=\"line\">            <span class=\"comment\">// 绑定处理函数</span></span><br><span class=\"line\">            ctx.<span class=\"property\">errorHandler</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">errorHandler</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 设置超时</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">timeout</span> &gt; <span class=\"number\">0</span>) ctx.<span class=\"title function_\">timeout</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timeout</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 路由查找处理</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">find</span>(ctx);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 监听</span></span><br><span class=\"line\">    <span class=\"title function_\">listen</span>(<span class=\"params\">addr: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">server</span>.<span class=\"title function_\">listen</span>(addr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Context\"><a href=\"#3-Context\" class=\"headerlink\" title=\"3. Context\"></a>3. Context</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> http <span class=\"keyword\">from</span> <span class=\"string\">&#x27;http&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Context</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 原生请求</span></span><br><span class=\"line\">    <span class=\"attr\">request</span>: http.<span class=\"property\">IncomingMessage</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 原生响应</span></span><br><span class=\"line\">    <span class=\"attr\">response</span>: http.<span class=\"property\">ServerResponse</span>;</span><br><span class=\"line\">    <span class=\"attr\">query</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    <span class=\"attr\">body</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 是否已返回请求</span></span><br><span class=\"line\">    <span class=\"attr\">isEnd</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 中间件执行计数</span></span><br><span class=\"line\">    <span class=\"attr\">nextInx</span>: <span class=\"built_in\">number</span> = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 设置响应码</span></span><br><span class=\"line\">    <span class=\"attr\">statusCode</span>:<span class=\"built_in\">number</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 当前路由的全部执行函数</span></span><br><span class=\"line\">    <span class=\"attr\">middleware</span>:<span class=\"title class_\">Handler</span>[] = [];</span><br><span class=\"line\">    <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">    <span class=\"attr\">errorHandler</span>: <span class=\"function\">(<span class=\"params\">err: <span class=\"built_in\">Error</span>, ctx: Context</span>) =&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt;;</span><br><span class=\"line\">    <span class=\"attr\">responseHeader</span>: <span class=\"title class_\">Map</span>&lt;<span class=\"title class_\">String</span>, <span class=\"built_in\">string</span>&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"title class_\">String</span>, <span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 初始化上下文</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">req: http.IncomingMessage, res: http.ServerResponse</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">request</span> = req;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span> = res;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> = req.<span class=\"property\">url</span> ?? <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">method</span> = req.<span class=\"property\">method</span>?.<span class=\"title function_\">toLocaleUpperCase</span>() ?? <span class=\"string\">&quot;GET&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">errorHandler</span> = <span class=\"keyword\">async</span> (err, ctx) =&gt; &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 超时处理</span></span><br><span class=\"line\">    <span class=\"title function_\">timeout</span>(<span class=\"params\">time: <span class=\"built_in\">number</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (time &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">statusCode</span> = <span class=\"number\">500</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;server timeout&quot;</span>);</span><br><span class=\"line\">        &#125;, time);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 下一次执行原理</span></span><br><span class=\"line\">    <span class=\"title function_\">next</span>(<span class=\"params\">info?: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果next有内容, 则证明有显式错误, 及时处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (info) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">nextInx</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>.<span class=\"property\">length</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">errorHandler</span>(info, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">nextInx</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果计数结束/响应结束, 则终止中间件执行</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nextInx</span> &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>.<span class=\"property\">length</span> || <span class=\"variable language_\">this</span>.<span class=\"property\">isEnd</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 防止中间件错误</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">nextInx</span>](<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">nextInx</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">middleware</span>.<span class=\"property\">length</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">errorHandler</span>(err, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 响应封装</span></span><br><span class=\"line\">    <span class=\"title function_\">send</span>(<span class=\"params\">str: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isEnd</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/plain; charset=utf-8&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> <span class=\"variable language_\">this</span>.<span class=\"property\">responseHeader</span>.<span class=\"title function_\">keys</span>()) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">setHeader</span>(key, <span class=\"variable language_\">this</span>.<span class=\"property\">responseHeader</span>.<span class=\"title function_\">get</span>(key) ?? <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"property\">statusCode</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">statusCode</span> || <span class=\"number\">200</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">write</span>(str);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">isEnd</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">json</span>(<span class=\"params\">str: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isEnd</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/json; charset=utf-8&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> <span class=\"variable language_\">this</span>.<span class=\"property\">responseHeader</span>.<span class=\"title function_\">keys</span>()) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">setHeader</span>(key, <span class=\"variable language_\">this</span>.<span class=\"property\">responseHeader</span>.<span class=\"title function_\">get</span>(key) ?? <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"property\">statusCode</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">statusCode</span> || <span class=\"number\">200</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">write</span>(str);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">isEnd</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">setHeader</span>(<span class=\"params\">key: <span class=\"built_in\">string</span>, value: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">responseHeader</span>.<span class=\"title function_\">set</span>(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">Application</span>();</span><br><span class=\"line\">    root.<span class=\"title function_\">use</span>(<span class=\"keyword\">async</span> (ctx)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello middleware&quot;</span>);</span><br><span class=\"line\">        ctx.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> api = root.<span class=\"title function_\">group</span>(<span class=\"string\">&#x27;/api&#x27;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    api.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/user&quot;</span>, <span class=\"function\">(<span class=\"params\">ctx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        ctx.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;hello ctx&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> apiPrefix = api.<span class=\"title function_\">prefix</span>(<span class=\"string\">&quot;/prefix&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 中间件及执行顺序</span></span><br><span class=\"line\">    apiPrefix.<span class=\"title function_\">use</span>(<span class=\"keyword\">async</span> (ctx) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello next&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// ctx.json(`&#123;&quot;status&quot;: 200&#125;`)</span></span><br><span class=\"line\">        ctx.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello next end&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 测试执行顺序</span></span><br><span class=\"line\">    apiPrefix.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/hello&quot;</span>, <span class=\"keyword\">async</span> (ctx) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello prefix start&quot;</span>);</span><br><span class=\"line\">        ctx.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;hello prefix ctx&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello prefix end&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 测试超时</span></span><br><span class=\"line\">    apiPrefix.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/timeout&quot;</span>, <span class=\"keyword\">async</span> (ctx) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello timeout start&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 测试错误捕获</span></span><br><span class=\"line\">    apiPrefix.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/error&quot;</span>, <span class=\"keyword\">async</span> (ctx) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello error start&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 测试hook</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> r = <span class=\"keyword\">new</span> <span class=\"title class_\">Router</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    root.<span class=\"title function_\">hook</span>(r);</span><br><span class=\"line\">    </span><br><span class=\"line\">    root.<span class=\"property\">errorHandler</span> = <span class=\"keyword\">async</span> (err, ctx) =&gt; &#123;</span><br><span class=\"line\">        ctx.<span class=\"property\">statusCode</span> = <span class=\"number\">500</span>;</span><br><span class=\"line\">        ctx.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;server hello error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.<span class=\"title function_\">listen</span>(<span class=\"string\">&#x27;12345&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">main</span>();</span><br></pre></td></tr></table></figure>",
            "tags": [
                "golang",
                "nodejs",
                "web",
                "dart"
            ]
        },
        {
            "id": "http://qiubo.ink/2020/12/25/redis%E9%98%B2%E6%AD%A2%E8%B6%85%E5%94%AE/",
            "url": "http://qiubo.ink/2020/12/25/redis%E9%98%B2%E6%AD%A2%E8%B6%85%E5%94%AE/",
            "title": "redis防止超售",
            "date_published": "2020-12-25T11:50:23.000Z",
            "content_html": "<p>redis在应用中越来越广泛, 其中常用的大部分操作都是非原子性的, 例如<code>set</code>&#x2F;<code>get</code>&#x2F;<code>hmset</code>…这些会在多个操作时后边的覆写前边的</p>\n<span id=\"more\"></span>\n<h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h3><p>redis在应用中越来越广泛, 其中常用的大部分操作都是非原子性的, 例如<code>set</code>&#x2F;<code>get</code>&#x2F;<code>hmset</code>…这些会在多个操作时后边的覆写前边的, 例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">请求A--&gt;数据库C</span><br><span class=\"line\">更多... --&gt;数据库C</span><br><span class=\"line\">请求B--&gt;数据库C</span><br></pre></td></tr></table></figure>\n<p>请求前后先后进入, 几乎同时抵达数据库, 当<code>A</code>检查时没有请求, <code>B</code>先后到达,也检查到没有请求, 此时向<code>redis</code>写入当前请求信息, A写入,B也写入了, 且会被后写入的覆盖, 无提示, 此时便达不到限制的目的, 而且如果秒杀场景下请求大的情况下, 一下进入的可能销售远远超过库存的数量. </p>\n<p>此时就需要使用redis的原子性操作, 同时只能一个读写, 写入&#x2F;读取有失败提示.<br><code>setnx</code>&#x2F;<code>getset</code></p>\n<blockquote>\n<ul>\n<li><code>setnx Key Value</code> 设置一个键值, 如果同时写入只有一个会成功返回 1, 其余失败返回 0, 满足了并发加锁限制,</li>\n<li><code>getset Key NewValue</code> 获取并设置一个值, 成功会返回当前设置的值,</li>\n</ul>\n</blockquote>\n<p><strong>如果锁已超时，那么锁可能已由其他进程获得，这时直接执行 <code>del Key</code> 操作会导致把其他进程已获得 的锁释放掉</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数封装</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">lockRequest</span>(<span class=\"params\">lockKey</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 加锁, 默认无锁</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 进入加锁, 如果失败循环判断</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> resdis.<span class=\"title function_\">setnx</span>(lockKey, <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() + <span class=\"number\">100</span>&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 1. 加锁是否成功</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> time = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">get</span>(lockKey);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 加锁失败, 检测锁值时间是否小于当前时间,</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> timeout = time - <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 如果小于当前时间, 证明有进程超时, 直接绕过,不等待</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> time = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() + <span class=\"number\">100</span>&#125;</span>&#125;`</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 增加新值并返回旧值, 原子操作, </span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> t = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">getset</span>(lockKey, time);</span><br><span class=\"line\">            <span class=\"comment\">// 3. 如果有值在我们之前操作, 则返回的是前值, 不等于当前值, 继续等待</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() &gt; t) &#123;</span><br><span class=\"line\">                result = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不浪费资源,超时之后再操作, setTimeout实现的会有ms级误差</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"title function_\">sleep</span>(timeout);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span>(!result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h3><p>使用原子增减操作 <code>incrby/decrby</code> , 下单时对数据进行增减, 优势无超长时间等待</p>\n<p>如下: 简略代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Redis</span> =  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ioredis&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> redis = <span class=\"keyword\">new</span> <span class=\"title class_\">Redis</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = <span class=\"string\">&#x27;test:count&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count  = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (req.<span class=\"property\">url</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span>  <span class=\"string\">&#x27;/count&#x27;</span>:</span><br><span class=\"line\">            <span class=\"comment\">// 查询redis库存剩余 =&gt; 实际查询数据库库存剩余即可</span></span><br><span class=\"line\">            count = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">get</span>(key);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/set_count&#x27;</span>:</span><br><span class=\"line\">            <span class=\"comment\">// 设置库存数</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> redis.<span class=\"title function_\">set</span>(key, <span class=\"number\">10</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"attr\">default</span>: <span class=\"comment\">// 抢购逻辑</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> stock = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">get</span>(key);</span><br><span class=\"line\">            <span class=\"comment\">// 1. 查询当前库存, 如果有再进行</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stock &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                res.<span class=\"property\">statusCode</span>  = <span class=\"number\">500</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 模拟下单数量不同</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> num = <span class=\"built_in\">parseInt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">3</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 2. 原子减库存, 如果原子减后小于0, 则返还减量</span></span><br><span class=\"line\">            count = <span class=\"keyword\">await</span> redis.<span class=\"title function_\">decrby</span>(key, num);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2.1 返还库存</span></span><br><span class=\"line\">                <span class=\"keyword\">await</span> redis.<span class=\"title function_\">incrby</span>(key, num);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 可以购买</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;库存: %d, 购买: %d&#x27;</span>, stock, num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>此案例使用 <code>单机redis</code> &#x2F; <code>pm2 start app.js -i 4</code> &#x2F; <code>ab -c 10 -n 100</code> 多进程进行&#x2F;多请求模拟操作. </p>\n<p>示例如下:</p>\n<ol>\n<li>多进程启动<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; pm2 start app.js -i 4</span><br></pre></td></tr></table></figure></li>\n<li><code>ab</code> 工具模拟请求<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; ab -c 10 -n 100 http://127.0.0.1:3000/buy</span><br><span class=\"line\">This is ApacheBench, Version 2.3 &lt;<span class=\"variable\">$Revision</span>: 1843412 $&gt;</span><br><span class=\"line\">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class=\"line\">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class=\"line\"></span><br><span class=\"line\">Benchmarking 127.0.0.1 (be patient).....<span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">Server Software:        </span><br><span class=\"line\">Server Hostname:        127.0.0.1</span><br><span class=\"line\">Server Port:            3000</span><br><span class=\"line\"></span><br><span class=\"line\">Document Path:          /buy/</span><br><span class=\"line\">Document Length:        0 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Concurrency Level:      10</span><br><span class=\"line\">Time taken <span class=\"keyword\">for</span> tests:   0.031 seconds</span><br><span class=\"line\">Complete requests:      100</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Non-2xx responses:      94</span><br><span class=\"line\">Total transferred:      9286 bytes</span><br><span class=\"line\">HTML transferred:       0 bytes</span><br><span class=\"line\">Requests per second:    3180.16 [<span class=\"comment\">#/sec] (mean)</span></span><br><span class=\"line\">Time per request:       3.144 [ms] (mean)</span><br><span class=\"line\">Time per request:       0.314 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          288.39 [Kbytes/sec] received</span><br><span class=\"line\"></span><br><span class=\"line\">Connection Times (ms)</span><br><span class=\"line\">              min  mean[+/-sd] median   max</span><br><span class=\"line\">Connect:        0    0   0.2      0       1</span><br><span class=\"line\">Processing:     1    2   1.4      2       8</span><br><span class=\"line\">Waiting:        1    2   1.2      1       6</span><br><span class=\"line\">Total:          1    3   1.4      2       8</span><br><span class=\"line\"></span><br><span class=\"line\">Percentage of the requests served within a certain time (ms)</span><br><span class=\"line\">  50%      2</span><br><span class=\"line\">  66%      2</span><br><span class=\"line\">  75%      3</span><br><span class=\"line\">  80%      3</span><br><span class=\"line\">  90%      5</span><br><span class=\"line\">  95%      6</span><br><span class=\"line\">  98%      8</span><br><span class=\"line\">  99%      8</span><br><span class=\"line\"> 100%      8 (longest request)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><code>pm2 log app</code> 日志打印<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; pm2 <span class=\"built_in\">log</span> app</span><br><span class=\"line\">...</span><br><span class=\"line\">2|app  | 库存: 10, 购买: 3</span><br><span class=\"line\">2|app  | 库存: 7, 购买: 3</span><br><span class=\"line\">0|app  | 库存: 7, 购买: 1</span><br><span class=\"line\">0|app  | 库存: 7, 购买: 1</span><br><span class=\"line\">0|app  | 库存: 7, 购买: 2</span><br></pre></td></tr></table></figure>\n通过日志打印可以看出, 库存为7的时候, 有4个请求进入, 并且下单成功, 之后便没有了, 保证了库存安全</li>\n<li>查看剩余库存<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; curl http://localhost:3000/count</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "nodejs",
                "redis",
                "并发"
            ]
        },
        {
            "id": "http://qiubo.ink/2020/03/26/docker%E5%85%8D%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE/",
            "url": "http://qiubo.ink/2020/03/26/docker%E5%85%8D%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE/",
            "title": "docker免删除容器修改配置",
            "date_published": "2020-03-26T21:28:24.000Z",
            "content_html": "<p>适用于小服务, 原理是暂停docker服务来修改容器配置,然后启动</p>\n<span id=\"more\"></span>\n<h3 id=\"起因docker部署mysql时端口配置错误\"><a href=\"#起因docker部署mysql时端口配置错误\" class=\"headerlink\" title=\"起因docker部署mysql时端口配置错误\"></a>起因docker部署mysql时端口配置错误</h3><p>3307 -&gt; 3307</p>\n<h3 id=\"知道可以删除运行中的docker容器-然后重启\"><a href=\"#知道可以删除运行中的docker容器-然后重启\" class=\"headerlink\" title=\"知道可以删除运行中的docker容器,然后重启\"></a>知道可以删除运行中的docker容器,然后重启</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop mysql_name &amp;&amp; docker <span class=\"built_in\">rm</span> mysql_name</span><br></pre></td></tr></table></figure>\n<h3 id=\"增加一种方式-暂停docker服务-修改hostconfig-json文件-再启动\"><a href=\"#增加一种方式-暂停docker服务-修改hostconfig-json文件-再启动\" class=\"headerlink\" title=\"增加一种方式, 暂停docker服务, 修改hostconfig.json文件,再启动\"></a>增加一种方式, 暂停docker服务, 修改hostconfig.json文件,再启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 暂停服务</span></span><br><span class=\"line\">service docker stop</span><br><span class=\"line\"><span class=\"comment\"># 修改hostcaonfig.json</span></span><br><span class=\"line\">vim /var/lib/docker/containers/[cont_hash_code]/hostconfig.json</span><br><span class=\"line\"><span class=\"comment\"># 修改对应配置,保存,启动docker</span></span><br><span class=\"line\">service docker start</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "测试",
                "docker"
            ]
        },
        {
            "id": "http://qiubo.ink/2019/06/27/Golang%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%8F%8A%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87/",
            "url": "http://qiubo.ink/2019/06/27/Golang%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%8F%8A%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87/",
            "title": "Golang单元测试及测试覆盖率",
            "date_published": "2019-06-27T09:21:24.000Z",
            "content_html": "<p>使用 Golang 内置库 <code>testing</code> 测试书写的代码,如有不足,请雅正.</p>\n<span id=\"more\"></span>\n<p>本文 go 版本 1.12.5, 在 <code>go mod</code> 下 当前项目名称 <code>goshop</code></p>\n<h3 id=\"1-书写代码\"><a href=\"#1-书写代码\" class=\"headerlink\" title=\"1. 书写代码\"></a>1. 书写代码</h3><ol>\n<li>自定义库代码 <code>goshop/app/lib</code> 下 utils.go  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CheckPhoneNumber 校验手机号</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CheckPhoneNumber</span><span class=\"params\">(phone <span class=\"type\">string</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 手机号长度11位</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> StringLength(phone) != <span class=\"number\">11</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  reg := regexp.MustCompile(<span class=\"string\">`^1[3,4,5,6,7,8,9]&#123;1&#125;[0-9]&#123;9&#125;$`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.MatchString(phone)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// StringLength 获取字符串长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringLength</span><span class=\"params\">(str <span class=\"type\">string</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> strings.Count(str, <span class=\"string\">&quot;&quot;</span>) - <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>测试代码 <code>goshop/app/lib</code> 下 utils_test.go  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestCheckPhoneNumber</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">type</span> suite <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    data   <span class=\"type\">string</span></span><br><span class=\"line\">    result <span class=\"type\">bool</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  phoneExample := []suite&#123;</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;12345678901&quot;</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;1020&quot;</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;19456782901&quot;</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> phoneExample &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> result := CheckPhoneNumber(v.data); result != v.result &#123;</span><br><span class=\"line\">      t.Errorf(<span class=\"string\">&quot;测试用例 %s : 测试结构 %t , 与期望不符合 %t&quot;</span>, v.data, result, v.result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStringLength</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">type</span> suite <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    data   <span class=\"type\">string</span></span><br><span class=\"line\">    result <span class=\"type\">int</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  strExample := []suite&#123;</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;1678&quot;</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;13456789301&quot;</span>, <span class=\"number\">11</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;abcd&quot;</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;hello world&quot;</span>, <span class=\"number\">11</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;我在这&quot;</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">    suite&#123;<span class=\"string\">&quot;你是谁?Who are you?&quot;</span>, <span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> strExample &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> result := StringLength(v.data); result != v.result &#123;</span><br><span class=\"line\">      t.Errorf(<span class=\"string\">&quot;测试用例 %s : 测试结构 %d , 与期望不符合 %d&quot;</span>, v.data, result, v.result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"2-查看覆盖率\"><a href=\"#2-查看覆盖率\" class=\"headerlink\" title=\"2. 查看覆盖率\"></a>2. 查看覆盖率</h3><blockquote>\n<p><code>go test</code> 常用命令解释<br> 用法 <code>go test [build/_test flags] [packages] [build/test flags &amp; test binary flags]</code><br> <code>go test [file.go / mod_dir | main_test.go]</code> &#x2F; <code>go test 文件名/包名(main_test.go)</code></p>\n</blockquote>\n<ol>\n<li><p>普通展示<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 普通测试,只展示测试结果及时间</span></span><br><span class=\"line\">➜  go test goshop/app/lib</span><br><span class=\"line\"><span class=\"comment\">// ok      goshop/app/lib  0.007s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 展示测试明细, 此时仍没有覆盖率</span></span><br><span class=\"line\">➜  go test goshop/app/lib -v</span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestCheckEmail</span></span><br><span class=\"line\"><span class=\"comment\">// --- PASS: TestCheckEmail (0.00s)</span></span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestStringLength</span></span><br><span class=\"line\"><span class=\"comment\">// --- PASS: TestStringLength (0.00s)</span></span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestCheckPhoneNumber</span></span><br><span class=\"line\"><span class=\"comment\">// --- PASS: TestCheckPhoneNumber (0.00s)</span></span><br><span class=\"line\"><span class=\"comment\">// PASS</span></span><br><span class=\"line\"><span class=\"comment\">// ok      goshop/app/lib  (cached)</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li><p>展示测试明细及覆盖率,<br>展示的是当前库的所有文件的覆盖率,<br>此时已经知道覆盖率了,<br>但是不知道测试到底覆盖的是哪部分代码,<br>哪部分没有覆盖<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ go test goshop/app/lib -v -covermode=count </span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestCheckEmail</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// PASS</span></span><br><span class=\"line\"><span class=\"comment\">// coverage: 19.2% of statements</span></span><br><span class=\"line\"><span class=\"comment\">// ok      goshop/app/lib  0.007s  coverage: 19.2% of statements</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li><p>展示测试覆盖率,并生成覆盖统计文件到 count.out,<br>count.out 文件中详细展示了每个文件测试时某一行,执行的次数及其他信息(暂时只能用到次数)</p>\n</li>\n</ol>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ go test goshop/app/lib -v -coverprofile=count.<span class=\"property\">out</span></span><br><span class=\"line\"><span class=\"comment\">// === RUN   TestCheckEmail</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// PASS</span></span><br><span class=\"line\"><span class=\"comment\">// coverage: 19.2% of statements</span></span><br><span class=\"line\"><span class=\"comment\">// ok      goshop/app/lib  0.007s  coverage: 19.2% of statements</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"4\">\n<li>分析 count.out 文件生成想要的结果<br>-func 生成每个函数的覆盖率<br>-html 生成 html 文件,已图形形式展示每个函数,每一行代码的覆盖率<br>生成测试运行,函数覆盖率,展示每一个函数单元测试的覆盖率,100% 则测试完整,0 则没有测试<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ go tool cover -func=count.<span class=\"property\">out</span></span><br><span class=\"line\"><span class=\"comment\">// goshop/app/lib/jwt.go:31:       signHeader              0.0%</span></span><br><span class=\"line\"><span class=\"comment\">// ....</span></span><br><span class=\"line\"><span class=\"comment\">// goshop/app/lib/utils.go:11:     CheckEmail              100.0%</span></span><br><span class=\"line\"><span class=\"comment\">// goshop/app/lib/utils.go:21:     CheckPhoneNumber        100.0%</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// total:                          (statements)            19.2%</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<pre><code>`➜ go tool cover -html=count.out` 会打开默认浏览器,展示测试覆盖率的图形化,\n可以切换,当前库下每个文件,看到每一行代码是否测试执行,没有执行的显示为红色, 灰色是不需要测试的, 亮绿色是测试通过的\n![](go-tool-cover-html.png)\n</code></pre>\n",
            "tags": [
                "golang",
                "测试"
            ]
        },
        {
            "id": "http://qiubo.ink/2019/06/21/Golang%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/",
            "url": "http://qiubo.ink/2019/06/21/Golang%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/",
            "title": "Golang获取字符串长度",
            "date_published": "2019-06-21T17:28:41.000Z",
            "content_html": "<p>尝试通过实际使用逐步了解go源码及发现实用函数</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-builtin-中的-len-函数\"><a href=\"#1-builtin-中的-len-函数\" class=\"headerlink\" title=\"1. builtin 中的 len 函数\"></a>1. builtin 中的 len 函数</h2><p>builtin 包为Go的预声明标识符提供了文档。无需引包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length := len(&quot;hello world&quot;)</span><br><span class=\"line\">// 11</span><br><span class=\"line\">length = len(&quot;你好, world&quot;)</span><br><span class=\"line\">// 13</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>优点：无需引包，直接使用<br>缺点：中文占3个字节长度，非实际字符数</p>\n</blockquote>\n<h2 id=\"2-strings-Count-统计字符函数\"><a href=\"#2-strings-Count-统计字符函数\" class=\"headerlink\" title=\"2. strings.Count 统计字符函数\"></a>2. strings.Count 统计字符函数</h2><p>strings 是字符串相关操作的内置库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length := strings.Count(&quot;hello world&quot;,&quot;&quot;) -1 </span><br><span class=\"line\">// 11</span><br><span class=\"line\">length = strings.Count(&quot;你好，世界&quot;,&quot;&quot;) - 1</span><br><span class=\"line\">// 5</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>优点：中文字符识别<br>缺点：参数冗余，且底层另有实现函数, 见3</p>\n</blockquote>\n<h2 id=\"3-unicode-utf8-RuneCountInString-utf8字符统计\"><a href=\"#3-unicode-utf8-RuneCountInString-utf8字符统计\" class=\"headerlink\" title=\"3. unicode&#x2F;utf8.RuneCountInString utf8字符统计\"></a>3. unicode&#x2F;utf8.RuneCountInString utf8字符统计</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length := utf8.RuneCountInString(&quot;hello world&quot;)</span><br><span class=\"line\">// 11</span><br><span class=\"line\">length = utf8.RuneCountInString(&quot;你好，世界&quot;)</span><br><span class=\"line\">// 5</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>优点：官方utf8长度统计，无其他函数调用<br>缺点：貌似只有utf8字符集</p>\n</blockquote>\n",
            "tags": [
                "golang",
                "string"
            ]
        },
        {
            "id": "http://qiubo.ink/2019/03/19/Go%20module%E7%A7%81%E6%9C%8D/",
            "url": "http://qiubo.ink/2019/03/19/Go%20module%E7%A7%81%E6%9C%8D/",
            "title": "Go module 私服",
            "date_published": "2019-03-19T17:00:43.000Z",
            "content_html": "<p>golang 1.11.0 之后 <code>go</code> 提供 mod 内置包管理工具</p>\n<p>但是实际应用时，由于网络等原因造成请求部分网站托管模块时无法响应，导致无法使用，使用ss代理有时又会产生新的问题， 又或者由于依赖过多，致使go mod 网络处理时长过久等原因，于是便有了go mod 私服项目 <a href=\"https://github.com/gomods/athens\">Athens</a></p>\n<span id=\"more\"></span>\n\n<h4 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h4><p>golang 1.11.0 之后 <code>go</code> 提供 mod 内置包管理工具</p>\n<p>但是实际应用时，由于网络等原因造成请求部分网站托管模块时无法响应，导致无法使用，使用ss代理有时又会产生新的问题， 又或者由于依赖过多，致使go mod 网络处理时长过久等原因，于是便有了go mod 私服项目 <a href=\"https://github.com/gomods/athens\">Athens</a></p>\n<h4 id=\"2-服务部署\"><a href=\"#2-服务部署\" class=\"headerlink\" title=\"2. 服务部署\"></a>2. 服务部署</h4><ul>\n<li>拉取代码</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># progromeRoot</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/gomods/athens</span><br><span class=\"line\"><span class=\"built_in\">cd</span> athens/cmd/proxy</span><br><span class=\"line\">go install</span><br></pre></td></tr></table></figure>\n<ul>\n<li>检查安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$GOPATH</span>/bin/proxy version</span><br></pre></td></tr></table></figure>\n<ul>\n<li>部署 使用任何常用的进程守护工具均可，此处 pm2 实例</li>\n</ul>\n<h6 id=\"默认配置文件端口为3000-3001-有冲突修改配置文件\"><a href=\"#默认配置文件端口为3000-3001-有冲突修改配置文件\" class=\"headerlink\" title=\"默认配置文件端口为3000&#x2F;3001 有冲突修改配置文件\"></a>默认配置文件端口为3000&#x2F;3001 有冲突修改配置文件</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start ./proxy -- -config_file=progromeRoot/config.dev.toml</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(可选)配置nginx 代理</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单配置</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name your.domain.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:3000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-本地使用\"><a href=\"#3-本地使用\" class=\"headerlink\" title=\"3. 本地使用\"></a>3. 本地使用</h4><p>服务配置完成后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host: http://your.domain.com</span><br><span class=\"line\">port: 80</span><br></pre></td></tr></table></figure>\n<p>修改本地环境变量</p>\n<h6 id=\"go-mod-go-get-使用的代理\"><a href=\"#go-mod-go-get-使用的代理\" class=\"headerlink\" title=\"go mod &#x2F;go get 使用的代理\"></a>go mod &#x2F;go get 使用的代理</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GOPROXY=http://your.domian.com</span><br></pre></td></tr></table></figure>\n<h6 id=\"不需要使用代理的域名\"><a href=\"#不需要使用代理的域名\" class=\"headerlink\" title=\"不需要使用代理的域名\"></a>不需要使用代理的域名</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> NO_PROXY=github.com,<span class=\"variable\">$NO_PROXY</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-小结\"><a href=\"#4-小结\" class=\"headerlink\" title=\"4. 小结\"></a>4. 小结</h4><p>此文是go mod 私服配置简版，该项目支持模块缓存，默认是使用内存，有兴趣的可以自行研究配置</p>\n",
            "tags": [
                "golang",
                "mod",
                "module",
                "私服"
            ]
        },
        {
            "id": "http://qiubo.ink/2018/09/25/Linux%E6%89%8B%E5%8A%A8%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98/",
            "url": "http://qiubo.ink/2018/09/25/Linux%E6%89%8B%E5%8A%A8%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98/",
            "title": "Linux手动释放内存",
            "date_published": "2018-09-25T14:09:08.000Z",
            "content_html": "<p>正常情况linux 下是不需要手动内存释放的,但是使用图形界面的时候部分程序的确占用较大内存，但又需要释放的时候就需要用到手动释放了．</p>\n<h3 id=\"1-查看内存\"><a href=\"#1-查看内存\" class=\"headerlink\" title=\"1. 查看内存\"></a>1. 查看内存</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/sys/vm/drop_caches</span><br><span class=\"line\"><span class=\"comment\"># 0</span></span><br><span class=\"line\"><span class=\"comment\"># 0 – 不释放</span></span><br><span class=\"line\"><span class=\"comment\"># 1 – 释放页缓存</span></span><br><span class=\"line\"><span class=\"comment\"># 2 – 释放dentries和inodes</span></span><br><span class=\"line\"><span class=\"comment\"># 3 – 释放所有缓存</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sync</span></span><br><span class=\"line\"><span class=\"comment\"># sync 命令运行 sync 子例程。如果必须停止系统，则运行 sync 命令以确保文件系统的完整性。</span></span><br><span class=\"line\"></span><br><span class=\"line\">$&gt; free -m </span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\"> Mem:           7929        5876         502         128        1549        1649</span><br><span class=\"line\"> Swap:             0           0           0</span><br><span class=\"line\"><span class=\"comment\"># total——总物理内存</span></span><br><span class=\"line\"><span class=\"comment\"># used——已使用内存，一般情况这个值会比较大，因为这个值包括了cache+应用程序使用的内存</span></span><br><span class=\"line\"><span class=\"comment\"># free——完全未被使用的内存</span></span><br><span class=\"line\"><span class=\"comment\"># shared——应用程序共享内存</span></span><br><span class=\"line\"><span class=\"comment\"># buffers——缓存，主要用于目录方面,inode值等（ls大目录可看到这个值增加）</span></span><br><span class=\"line\"><span class=\"comment\"># cached——缓存，用于已打开的文件</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-释放内存\"><a href=\"#2-释放内存\" class=\"headerlink\" title=\"2. 释放内存\"></a>2. 释放内存</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\">#              total        used        free      shared  buff/cache   available</span></span><br><span class=\"line\"><span class=\"comment\"># Mem:           7929        5902        1375         129         650        1628</span></span><br><span class=\"line\"><span class=\"comment\"># Swap:             0           0           0</span></span><br></pre></td></tr></table></figure>\n<p>内存已经释放掉了</p>\n",
            "tags": [
                "linux",
                "内存"
            ]
        },
        {
            "id": "http://qiubo.ink/2018/09/14/%E4%BD%BF%E7%94%A8nodejs%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/",
            "url": "http://qiubo.ink/2018/09/14/%E4%BD%BF%E7%94%A8nodejs%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/",
            "title": "使用nodejs创建自己的自动化工具",
            "date_published": "2018-09-14T12:00:07.000Z",
            "content_html": "<p>nodejs能方便的进行前端的文件压缩结合等等,自动化操作,但是经常使用的我们,是不是也能方便的建立自己的自动化部署工具呢?比如:经常从头建立的文件夹模式,千篇一律的index.html等等</p>\n<span id=\"more\"></span>\n<h3 id=\"开发步骤\"><a href=\"#开发步骤\" class=\"headerlink\" title=\"开发步骤\"></a>开发步骤</h3><h6 id=\"1-安装nodejs环境\"><a href=\"#1-安装nodejs环境\" class=\"headerlink\" title=\"1. 安装nodejs环境\"></a>1. 安装nodejs环境</h6><p>从<a href=\"https://nodejs.org/\">官网</a>或<a href=\"https://nodejs.cn/\">中文官网</a>下载nodejs的安装包,参照网上的安装方法安装好nodejs环境,</p>\n<p>此处不是介绍nodejs,,因此不介绍如何安装</p>\n<h6 id=\"2-创建项目\"><a href=\"#2-创建项目\" class=\"headerlink\" title=\"2. 创建项目\"></a>2. 创建项目</h6><p>创建项目文件夹,进入并执行npm init,如下图 <a href=\"https://github.com/xiaqiubo/nodejs-traning/blob/master/course/imgs/20171031/01.png\"><img src=\"https://github.com/xiaqiubo/nodejs-traning/raw/master/course/imgs/20171031/01.png\"></a></p>\n<p>如下信息是需要填写的 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package name: (jiaocheng)</span><br><span class=\"line\">version: (1.0.0) 0.1.0</span><br><span class=\"line\">description: 自制自动化工具</span><br><span class=\"line\">entry point: (index.js)</span><br><span class=\"line\"><span class=\"built_in\">test</span> <span class=\"built_in\">command</span>:</span><br><span class=\"line\">git repository:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: xiaoxia</span><br><span class=\"line\">license: (ISC)</span><br></pre></td></tr></table></figure>\n<p>在最后生成的package.json中增加一项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"string\">&quot;bin&quot;</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;jiaocheng&quot;</span>:<span class=\"string\">&quot;index.js&quot;</span>\t</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>bin为可执行命令,<code>jiaocheng</code>为执行命令,<code>index.js</code>为命令执行文件入口</p>\n<p>然后执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">link</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/xiaqiubo/nodejs-traning/blob/master/course/imgs/20171031/04.png\"><img src=\"https://github.com/xiaqiubo/nodejs-traning/raw/master/course/imgs/20171031/04.png\"></a>此命令向系统增加一条软连接(可以理解为快捷方式)引用,方便使用当前项目的 bin 命令(便于本地调试)</p>\n<h6 id=\"3-创建index-js-入口文件\"><a href=\"#3-创建index-js-入口文件\" class=\"headerlink\" title=\"3. 创建index.js,入口文件\"></a>3. 创建index.js,入口文件</h6><p>一定要在顶部加上 <code>#!/usr/bin/env node</code> 声明,该文件使用环境变量 node 调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>如图 :</p>\n<p><a href=\"https://github.com/xiaqiubo/nodejs-traning/blob/master/course/imgs/20171031/02.png\"><img src=\"https://github.com/xiaqiubo/nodejs-traning/raw/master/course/imgs/20171031/02.png\"></a></p>\n<p>然后打开cmd窗口,输入 <code>jiaocheng</code> 回车,输出如下图</p>\n<p><a href=\"https://github.com/xiaqiubo/nodejs-traning/blob/master/course/imgs/20171031/03.png\"><img src=\"https://github.com/xiaqiubo/nodejs-traning/raw/master/course/imgs/20171031/03.png\"></a></p>\n<h6 id=\"4-项目依赖选择\"><a href=\"#4-项目依赖选择\" class=\"headerlink\" title=\"4. 项目依赖选择\"></a>4. 项目依赖选择</h6><p>此时已经基本成型了,你可以执行命令做一些你想做的事情,也可以自己处理一些 process 变量</p>\n<p>常用的nodejs自带 process属性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.argv\t\t<span class=\"comment\"># \t获取传入参数</span></span><br><span class=\"line\">process.cwd()\t\t<span class=\"comment\">#\t获取当前命令执行所在目录</span></span><br><span class=\"line\">process.env\t\t\t<span class=\"comment\">#\t获取当前系统用户的环境变量</span></span><br><span class=\"line\">process.pid\t\t\t<span class=\"comment\">#\t获取当前进程的pid</span></span><br><span class=\"line\">process.platform\t<span class=\"comment\">#\t获取当前运行的平台(系统)</span></span><br><span class=\"line\">process.stdin\t\t<span class=\"comment\">#\t输入</span></span><br><span class=\"line\">process.stdout\t\t<span class=\"comment\"># \t输出</span></span><br><span class=\"line\">process.versions\t<span class=\"comment\">#\t当前nodejs环境所有版本信息</span></span><br></pre></td></tr></table></figure>\n<p>常用模块推荐 (持续更新中):</p>\n<p>commander \t#\t作者Tj用于自动生成命令参数获取,单包无依赖</p>\n<p>commander 链接及使用看<a href=\"https://npmjs.com/package/commander\">npmjs</a>介绍或者<a href=\"https://github.com/tj/commander.js\">github</a>介绍即可</p>\n<h3 id=\"模块发布\"><a href=\"#模块发布\" class=\"headerlink\" title=\"模块发布\"></a>模块发布</h3><hr>\n<h6 id=\"5-注册npmjs账号\"><a href=\"#5-注册npmjs账号\" class=\"headerlink\" title=\"5. 注册npmjs账号\"></a>5. 注册npmjs账号</h6><p>到<a href=\"https://www.npmjs.com/signup\">npmjs官网注册</a>一个npmjs账号,用于发布自己的模块</p>\n<h6 id=\"6-登录npmjs并发布自己的模块\"><a href=\"#6-登录npmjs并发布自己的模块\" class=\"headerlink\" title=\"6. 登录npmjs并发布自己的模块\"></a>6. 登录npmjs并发布自己的模块</h6><p>模块按照上面的步骤开发,注册过账号后就可以发布自己的模块了,此处的登录不是在网页上的登录,而是在命令行下执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n<p>会提示输入账号密码,输入注册的账号密码即可</p>\n<p>登录成功后,到项目目录下,执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n<p>片刻后便会执行成功</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>部分开发者习惯将npm镜像修改为国内的cnpm.js淘宝镜像,在发布包的时候记得将镜像切换回官方 <a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a></li>\n</ol>\n<p>可以执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config list</span><br></pre></td></tr></table></figure>\n<p>查看是否替换</p>\n<ol start=\"2\">\n<li>发布的npm模块名称必须为全小写,不支持大小驼峰名称,一般修改为英文中横线</li>\n</ol>\n",
            "tags": [
                "nodejs",
                "cli"
            ]
        },
        {
            "id": "http://qiubo.ink/2018/09/14/nodejs%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80%E7%9A%84jwt/",
            "url": "http://qiubo.ink/2018/09/14/nodejs%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80%E7%9A%84jwt/",
            "title": "nodejs实现基础的jwt",
            "date_published": "2018-09-14T11:57:03.000Z",
            "content_html": "<p>手动实现 <code>JSON Web Token</code> 了解 token 验证基本原理</p>\n<span id=\"more\"></span>\n<p>使用模块,nodejs原生模块<br>Crypto</p>\n<h3 id=\"1-实现机制\"><a href=\"#1-实现机制\" class=\"headerlink\" title=\"1. 实现机制\"></a>1. 实现机制</h3><p>JSON Web Token 由三部分组成，头部（Header）、载荷（Payload）与签名（Signature），并由 <code>.</code> 英文点拼接。</p>\n<h6 id=\"1-Header\"><a href=\"#1-Header\" class=\"headerlink\" title=\"1. Header\"></a>1. Header</h6><p>生成jwt头部,声明其类型以及签名所用的算法等的JSON格式,并将其进行base64转码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let jwtHeader = &#123;</span><br><span class=\"line\">    typ:&#x27;JWT&#x27;,</span><br><span class=\"line\">    alg:&#x27;SHA256&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jwtHeader = Buffer.from(JSON.stringify(jwtHeader)).toString(&#x27;base64&#x27;);</span><br><span class=\"line\">// base64</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-Payload\"><a href=\"#2-Payload\" class=\"headerlink\" title=\"2. Payload\"></a>2. Payload</h6><p>生成jwt载荷部分,并将其进行base64转码</p>\n<ul>\n<li><p>iss: 该JWT的签发者，是否使用是可选的；</p>\n</li>\n<li><p>sub: 该JWT所面向的用户，是否使用是可选的；</p>\n</li>\n<li><p>aud: 接收该JWT的一方，是否使用是可选的；</p>\n</li>\n<li><p>exp(expires): 什么时候过期，这里是一个Unix时间戳，是否使用是可选的；</p>\n</li>\n<li><p>iat(issued at): 在什么时候签发的(UNIX时间)，是否使用是可选的；</p>\n</li>\n<li><p>nbf (Not Before)：如果当前时间在nbf里的时间之前，则Token不被接受；一般都会留一些余地，比如几分钟；，是否使用是可选的；</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let jwtPayload = &#123;</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        userId: 123456</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    exp: &#x27;2018-08-01&#x27;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jwtPayload = Buffer.from(JSON.stringify(jwtPayload)).toString(&#x27;base64&#x27;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-Signature\"><a href=\"#3-Signature\" class=\"headerlink\" title=\"3. Signature\"></a>3. Signature</h6><p>将上面的两个编码后的字符串都用句号.连接在一起（头部在前）,并使用sha256及secret对其进行签名处理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const crypto = require(&#x27;crypto&#x27;);</span><br><span class=\"line\">let jwtStr = jwtHeader + &#x27;.&#x27; + jwtPayload;</span><br><span class=\"line\">let jwtSignature = crypto.createHmac(&#x27;sha256&#x27;,&#x27;my secret&#x27;).update(jwtStr).digest(&#x27;base64&#x27;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-jwt\"><a href=\"#4-jwt\" class=\"headerlink\" title=\"4. jwt\"></a>4. jwt</h6><p>将三个部分连接即组成了完整的jwt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let jwtToken = jwtHeader + &#x27;.&#x27; + jwtPayload + &#x27;.&#x27; + jwtSignature;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-jwt解析\"><a href=\"#2-jwt解析\" class=\"headerlink\" title=\"2. jwt解析\"></a>2. jwt解析</h3><p>处理生成 <code>jwt</code> 是需要使用的，生成如上，解析自然也就比较简单</p>\n<h6 id=\"1-校验签名\"><a href=\"#1-校验签名\" class=\"headerlink\" title=\"1. 校验签名\"></a>1. 校验签名</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 拆分jwt</span><br><span class=\"line\">let jwtArr = jwtToken.split(&#x27;.&#x27;);</span><br><span class=\"line\">// 根据头部和载荷验证签名是否匹配</span><br><span class=\"line\">let checkToken = crypto.createHmac(&#x27;sha256&#x27;,&#x27;my secret&#x27;).update(jwtArr[0]+&#x27;.&#x27;+jwtArr[1]).digest(&#x27;base64&#x27;);</span><br><span class=\"line\">checkToken ?= jwtArr[2]</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-解析数据\"><a href=\"#2-解析数据\" class=\"headerlink\" title=\"2. 解析数据\"></a>2. 解析数据</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//　校验签名通过，解析载荷的base64数据</span><br><span class=\"line\">let jwtPayload = JSON.parse(Buffer.from(jwtArr[1],&#x27;base64&#x27;).toString())</span><br></pre></td></tr></table></figure>",
            "tags": [
                "josn web token",
                "jwt"
            ]
        },
        {
            "id": "http://qiubo.ink/2018/09/14/frp%E7%BD%91%E7%BB%9C%E6%98%A0%E5%B0%84%E8%AE%B0%E5%BD%95/",
            "url": "http://qiubo.ink/2018/09/14/frp%E7%BD%91%E7%BB%9C%E6%98%A0%E5%B0%84%E8%AE%B0%E5%BD%95/",
            "title": "frp网络映射记录",
            "date_published": "2018-09-14T11:54:07.000Z",
            "content_html": "<p><code>frp</code>是使用 Golang 开发的一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。简单的部署和配置即可满足端口映射功能，用于调试微信开发或是其他必须外网条件的应用…</p>\n<span id=\"more\"></span>\n\n<p>下载 <a href=\"https://github.com/fatedier/frp/\"><code>frp</code></a> 对应版本</p>\n<p>文件结构</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frpc.exe      <span class=\"comment\"># 客户端二进制文件</span></span><br><span class=\"line\">frpc.ini      <span class=\"comment\"># 客户端配置文件</span></span><br><span class=\"line\">frpc.full.ini <span class=\"comment\"># 客户端配置完整文件</span></span><br><span class=\"line\">fprs.exe      <span class=\"comment\"># 服务端二进制文件</span></span><br><span class=\"line\">frps.ini      <span class=\"comment\"># 服务端配置文件</span></span><br><span class=\"line\">frps.full.ini <span class=\"comment\"># 服务端完整配置文件    </span></span><br><span class=\"line\">LICENSE       <span class=\"comment\"># 开源协议证书</span></span><br></pre></td></tr></table></figure>\n\n<p><code>frps</code> 服务端配置:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"comment\"># 绑定ip</span></span><br><span class=\"line\"><span class=\"attr\">bind_addr</span> = <span class=\"number\">192.168</span>.<span class=\"number\">1.114</span></span><br><span class=\"line\"><span class=\"comment\"># 绑定端口</span></span><br><span class=\"line\"><span class=\"attr\">bind_port</span> = <span class=\"number\">9898</span></span><br><span class=\"line\"><span class=\"comment\"># http设置需要的虚拟主机端口(访问时输入的端口,必须与监听端口不同)</span></span><br><span class=\"line\"><span class=\"attr\">vhost_http_port</span> = <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n<p><code>frpc</code> 服务端配置:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"comment\"># 链接服务端的地址</span></span><br><span class=\"line\"><span class=\"attr\">server_addr</span> = <span class=\"number\">192.168</span>.<span class=\"number\">1.114</span></span><br><span class=\"line\"><span class=\"comment\"># 链接服务端的端口</span></span><br><span class=\"line\"><span class=\"attr\">server_post</span> = <span class=\"number\">9898</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># http配置</span></span><br><span class=\"line\"><span class=\"section\">[http]</span></span><br><span class=\"line\"><span class=\"comment\"># 类型是http</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"comment\"># 域名(可以写为ip,访问时输入的ip)</span></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"comment\"># 需要映射的本地端口</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>",
            "tags": [
                "frp",
                "网络"
            ]
        },
        {
            "id": "http://qiubo.ink/2017/09/14/Verdaccio%E6%90%AD%E5%BB%BAnpm%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/",
            "url": "http://qiubo.ink/2017/09/14/Verdaccio%E6%90%AD%E5%BB%BAnpm%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/",
            "title": "Verdaccio 搭建npm私有仓库",
            "date_published": "2017-09-14T11:56:01.000Z",
            "content_html": "<p>使用Nodejs的过程中未免会遇到公司项目私有化开发，此时需要一些私有模块的发布和使用，<code>npmjs</code>的私有仓库是付费的功能,<code>cnpm</code>本地搭建又偏重，<code>verdaccio</code>项目刚好满足，轻量私有部署简单</p>\n<span id=\"more\"></span>\n\n<p>由于<code>sinopia</code>项目不再维护,故选取fork项目<code>verdaccio</code>进行搭建,使用方法一样,仅仅将<code>sinopia</code>换为<code>verdaccio</code></p>\n<p>环境依赖</p>\n<p>python 2.7.x<br>node-gyp</p>\n<h3 id=\"1-安装verdaccio\"><a href=\"#1-安装verdaccio\" class=\"headerlink\" title=\"1. 安装verdaccio\"></a>1. 安装verdaccio</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g verdaccio</span><br><span class=\"line\"></span><br><span class=\"line\">配置文件 ~/.config/verdaccio/config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 存放位置</span></span><br><span class=\"line\">storage: ./npmdata</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 认证</span></span><br><span class=\"line\">auth:</span><br><span class=\"line\">\thtpasswd:</span><br><span class=\"line\">\t\tfile:./authpasswd</span><br><span class=\"line\">\t\tmax_users:10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 抓取镜像源</span></span><br><span class=\"line\">uplinks</span><br><span class=\"line\">\tnpmjs:</span><br><span class=\"line\">\t\turl:http://registry.npm.taobao.org/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># package</span></span><br><span class=\"line\">packages:</span><br><span class=\"line\">\t<span class=\"string\">&quot;@*/*&quot;</span>:</span><br><span class=\"line\">\t\taccess:<span class=\"variable\">$all</span></span><br><span class=\"line\">\t\tpublish:<span class=\"variable\">$authenticated</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">\t\taccess:<span class=\"variable\">$all</span></span><br><span class=\"line\">\t\tpublish:<span class=\"variable\">$authenticated</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志</span></span><br><span class=\"line\">logs:</span><br><span class=\"line\">\t- &#123;<span class=\"built_in\">type</span>:stdout,format:pretty,level:http,path:./npm.log&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监听端口(默认没有这个选项监听4873端口)</span></span><br><span class=\"line\">listen:\t0.0.0.0:4433</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-启动项目\"><a href=\"#2-启动项目\" class=\"headerlink\" title=\"2. 启动项目\"></a>2. 启动项目</h3><ol>\n<li>默认启动<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">verdaccio</span><br><span class=\"line\"><span class=\"comment\"># 默认加载 ~/.config/verdaccio/config.yaml</span></span><br><span class=\"line\"><span class=\"comment\"># 默认监听</span></span><br><span class=\"line\"><span class=\"comment\"># 默认存储位置 ~/.config/verdaccio/storage/</span></span><br><span class=\"line\"><span class=\"comment\"># 默认账号密码存放位置 ~/.config/verdaccio/htpasswd</span></span><br></pre></td></tr></table></figure></li>\n<li>终端命令启动</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">verdaccio -l 端口 -c 配置文件位置</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>pm2进程守护</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start `<span class=\"built_in\">which</span> verdaccio` --name <span class=\"string\">&quot;local_npm&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-项目使用\"><a href=\"#3-项目使用\" class=\"headerlink\" title=\"3. 项目使用\"></a>3. 项目使用</h3><ol>\n<li>修改源<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">set</span> registry http://0.0.0.0:4433</span><br></pre></td></tr></table></figure></li>\n<li>增加用户</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm adduser --registry http://0.0.0.0:4433</span><br><span class=\"line\">Username:</span><br><span class=\"line\">Passwd:</span><br><span class=\"line\">Emial:</span><br></pre></td></tr></table></figure>\n<ol>\n<li>发布包 和发布到npm仓库一样,登录,发布</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n<ol>\n<li>安装包</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @xxx/yyy</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-注\"><a href=\"#4-注\" class=\"headerlink\" title=\"4. 注\"></a>4. 注</h3><p>使用 <code>nrm</code> 管理源 使用 nrm 增加源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm add nl http://0.0.0.0:4433</span><br></pre></td></tr></table></figure>\n<p>使用 nrm 切换源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm use nl</span><br></pre></td></tr></table></figure>\n<p>浏览 nrm 源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br></pre></td></tr></table></figure>",
            "tags": [
                "npm"
            ]
        }
    ]
}